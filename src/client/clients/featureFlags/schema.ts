export interface paths {
    "/api/admin/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all projects.
         * @description This endpoint returns an list of all the projects in the Unleash instance.
         */
        get: operations["getProjects"];
        put?: never;
        /**
         * Create project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Create a new [Unleash project](https://docs.getunleash.io/reference/projects).
         */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate project ID
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Validate a project ID against Unleash's rules
         */
        post: operations["validateProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Update a project with new configuration. Any fields not provided are ignored.
         */
        put: operations["updateProject"];
        post?: never;
        /**
         * Delete project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Permanently delete the provided project. All feature flags in the project must be archived before you can delete it. This permanently deletes the project and its archived flags. It can not be undone.
         */
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update project enterprise settings
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Update project enterprise settings with new values. Any fields not provided are ignored.
         */
        put: operations["updateProjectEnterpriseSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/archive/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Archive the provided project. All feature flags in the project must be archived before you can archive the project.
         */
        post: operations["archiveProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/revive/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revive project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Revive the specified project from the archive.
         */
        post: operations["reviveProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users and groups in project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Get all groups, users and their roles, and available roles for the given project.
         */
        get: operations["getProjectAccess"];
        /**
         * Set users and groups to roles in the current project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Sets all groups, users and their roles for the given project, overriding any existing configuration.
         */
        put: operations["setProjectAccess"];
        /**
         * Configure project access
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Configure project access for groups and single users. The provided users and groups will be given the roles specified in the payload.
         */
        post: operations["addAccessToProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/roles/{roleId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project-role mappings
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     For the provided role, retrieves a list of projects that use this role. For each project it also contains information about how the role used in that project, such as how many users, groups, or service accounts that use the role.
         */
        get: operations["getRoleProjectAccess"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/users/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sets roles for user
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Sets the roles a user has in the project.
         */
        put: operations["setRolesForUser"];
        post?: never;
        /**
         * Remove project access for a user
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Removes project access for a user by removing all of its roles for the project.
         */
        delete: operations["removeUserAccess"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/groups/{groupId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sets roles for group
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Sets the roles a group has in the project.
         */
        put: operations["setRolesForGroup"];
        post?: never;
        /**
         * Remove project access for a group
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Removes project access for a group by removing all of its roles for the project.
         */
        delete: operations["removeGroupAccess"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/changeProject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move feature to project
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Moves the specified feature to the new project in the request schema. Requires you to have permissions to move the feature flag in both projects. Features that are included in any active change requests can not be moved.
         */
        post: operations["changeProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets available permissions
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Returns a list of available permissions
         */
        get: operations["getPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/rps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets usage data
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Gets usage data per app/endpoint from a prometheus compatible metrics endpoint
         */
        get: operations["getRequestsPerSecond"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/traffic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get aggregated traffic data for a given time period.
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Gets traffic usage data for the selected period, either aggregated by day or by month.
         */
        get: operations["getTrafficDataUsageForPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get aggregated metered connections for a given time period.
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Gets metered connections count for the selected period, either aggregated by day or by month.
         */
        get: operations["getConnectionsForPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get aggregated metered requests for a given time period.
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Gets metered requests count for the selected period, either aggregated by day or by month.
         */
        get: operations["getRequestsForPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a list of notifications
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     A user may get relevant notifications from the projects they are a member of
         */
        get: operations["getNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/notifications/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark notifications as read
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Allow to select which notifications were read and saving a read date
         */
        post: operations["markNotificationsAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/insights/lifecycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lifecycle trends
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     ![Beta](/demo/openapi-static/Beta.svg) This is a beta endpoint and it may change or be removed in the future.
         *
         *     Gets lifecycle trends information showing feature flag progression across development, production, and cleanup stages.
         */
        get: operations["getLifecycleTrends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get instance information
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Gets high level information about the usage of this Unleash instance, including user, project, and flag information.
         */
        get: operations["getInstanceInsights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/email-subscription/{subscription}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Subscribe to email subscription
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Subscribe to email subscription e.g. monthly productivity report. By default everyone is subscribed. This API is mostly used by hosted Unleash.
         */
        put: operations["subscribeEmailSubscription"];
        post?: never;
        /**
         * Unsubscribe from email subscription
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Unsubscribe from email subscription e.g. monthly productivity report. This API is mostly used by hosted Unleash.
         */
        delete: operations["unsubscribeEmailSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/licensed-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves all licensed users data.
         * @description ![Unleash Enterprise](/demo/openapi-static/Enterprise.svg) **Enterprise feature**
         *
         *     Fetches an array of licensed users with date and count.
         */
        get: operations["getAllLicensedUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get instance operational status
         * @description This operation returns information about whether this Unleash instance is healthy and ready to serve requests or not. Typically used by your deployment orchestrator (e.g. Kubernetes, Docker Swarm, Mesos, et al.).
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invite/{token}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate signup token
         * @description Check whether the provided public sign-up token exists, has not expired and is enabled
         */
        get: operations["validatePublicSignupToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invite/{token}/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a user via a signup token
         * @description Create a user with the viewer root role and link them to the provided signup token
         */
        post: operations["addPublicSignupTokenUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/simple/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in
         * @description Logs in the user and creates an active session
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validates a token
         * @description If the token is valid returns the user that owns the token
         */
        get: operations["validateToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Changes a user password
         * @description Allows users with a valid reset token to reset their password without remembering their old password
         */
        post: operations["changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset/validate-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validates password
         * @description Verifies that the password adheres to the [Unleash password guidelines](https://docs.getunleash.io/using-unleash/deploy/configuring-unleash#securing-unleash)
         */
        post: operations["validatePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset/password-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password
         * @description Requests a password reset email for the user. This email can be used to reset the password for a user that has forgotten their password
         */
        post: operations["sendResetPasswordEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate a feature flag name.
         * @description Validates a feature flag name: checks whether the name is URL-friendly and whether a feature with the given name already exists. Returns 200 if the feature name is compliant and unused.
         */
        post: operations["validateFeature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features/{featureName}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tags for a feature.
         * @description Retrieves all the tags for a feature name. If the feature does not exist it returns an empty list.
         */
        get: operations["listTags"];
        /**
         * Updates multiple tags for a feature.
         * @description Receives a list of tags to add and a list of tags to remove that are mandatory but can be empty. All tags under addedTags are first added to the feature and then all tags under removedTags are removed from the feature.
         */
        put: operations["updateTags"];
        /**
         * Adds a tag to a feature.
         * @description Adds a tag to a feature if the feature and tag type exist in the system. The operation is idempotent, so adding an existing tag will result in a successful response.
         */
        post: operations["addTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features/{featureName}/tags/{type}/{value}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Removes a tag from a feature.
         * @description Removes a tag from a feature. If the feature exists but the tag does not, it returns a successful response.
         */
        delete: operations["removeTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feature-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all feature types
         * @description Retrieves all feature types that exist in this Unleash instance, along with their descriptions and lifetimes.
         */
        get: operations["getAllFeatureTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feature-types/{id}/lifetime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update feature type lifetime
         * @description Updates the lifetime configuration for the specified [feature flag type](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types). The expected lifetime is an integer representing the number of days before Unleash marks a feature flag of that type as potentially stale. If set to `null` or `0`, then feature flags of that particular type will never be marked as potentially stale.
         *
         *     When a feature flag type's expected lifetime is changed, this will also cause any feature flags of this type to be reevaluated for potential staleness.
         */
        put: operations["updateFeatureTypeLifetime"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/archive/{featureName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Archives a feature
         * @description This endpoint archives the specified feature.
         */
        delete: operations["deleteFeature"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/archive/revive/{featureName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revives a feature
         * @description This endpoint revives the specified feature from archive.
         */
        post: operations["reviveFeature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all strategies
         * @description Retrieves all strategy types ([predefined](https://docs.getunleash.io/reference/activation-strategies "predefined strategies") and [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)) that are defined on this Unleash instance.
         */
        get: operations["getAllStrategies"];
        put?: never;
        /**
         * Create a strategy
         * @description Creates a custom strategy type based on the supplied data.
         */
        post: operations["createStrategy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/strategies/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a strategy definition
         * @description Retrieves the definition of the strategy specified in the URL
         */
        get: operations["getStrategy"];
        /**
         * Update a strategy type
         * @description Updates the specified strategy type. Any properties not specified in the request body are left untouched.
         */
        put: operations["updateStrategy"];
        post?: never;
        /**
         * Delete a strategy
         * @description Deletes the specified strategy definition
         */
        delete: operations["removeStrategy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/strategies/{strategyName}/deprecate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deprecate a strategy
         * @description Marks the specified strategy as deprecated.
         */
        post: operations["deprecateStrategy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/strategies/{strategyName}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reactivate a strategy
         * @description Marks the specified strategy as not deprecated. If the strategy wasn't already deprecated, nothing changes.
         */
        post: operations["reactivateStrategy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the most recent events from the Unleash instance or all events related to a project.
         * @deprecated
         * @description Returns **the last 100** events from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.
         *
         *     If the provided project does not exist, the list of events will be empty.
         */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{featureName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all events related to a specific feature flag.
         * @deprecated
         * @description Returns all events related to the specified feature flag. If the feature flag does not exist, the list of events will be empty.
         */
        get: operations["getEventsForToggle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/event-creators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all users that have created events
         * @description Returns a list of all users that have created events in the system.
         */
        get: operations["getEventCreators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/playground": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Evaluate an Unleash context against a set of environments and projects.
         * @description Deprecated. Will be removed in the next Unleash major update. Use the provided `context`, `environment`, and `projects` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.
         */
        post: operations["getPlayground"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/playground/advanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Batch evaluate an Unleash context against a set of environments and projects.
         * @description Use the provided `context`, `environments`, and `projects` to evaluate toggles on this Unleash instance. You can use comma-separated values to provide multiple values to each context field. Returns a combinatorial list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.
         */
        post: operations["getAdvancedPlayground"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/unknown-flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest reported unknown flag names
         * @description Returns a list of unknown flag reports from the last 7 days, if any. Maximum of 1000.
         */
        get: operations["getUnknownFlags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/applications/{appName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application data
         * @description Returns data about the specified application (`appName`). The data contains information on the name of the application, sdkVersion (which sdk reported these metrics, typically `unleash-client-node:3.4.1` or `unleash-client-java:7.1.0`), as well as data about how to display this application in a list.
         */
        get: operations["getApplication"];
        put?: never;
        /**
         * Create an application to connect reported metrics
         * @description Is used to report usage as well which sdk the application uses
         */
        post: operations["createApplication"];
        /**
         * Delete an application
         * @description Delete the application specified in the request URL. Returns 200 OK if the application was successfully deleted or if it didn't exist
         */
        delete: operations["deleteApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all applications
         * @description Returns all applications registered with Unleash. Applications can be created via metrics reporting or manual creation
         */
        get: operations["getApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/applications/{appName}/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application overview
         * @description Returns an overview of the specified application (`appName`).
         */
        get: operations["getApplicationOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/instances/{appName}/environment/{environment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application environment instances (Last 24h)
         * @description Returns an overview of the instances for the given `appName` and `environment` that have received traffic in the last 24 hours.
         */
        get: operations["getApplicationEnvironmentInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/metrics/sdks/outdated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get outdated SDKs
         * @description Returns a list of the outdated SDKS with the applications using them.
         */
        get: operations["getOutdatedSdks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/client-metrics/features/{name}/raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get feature metrics
         * @description Get usage metrics for a specific feature for the last 48 hours, grouped by hour
         */
        get: operations["getRawFeatureMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/client-metrics/features/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Last hour of usage and a list of applications that have reported seeing this feature flag
         * @description Separate counts for yes (enabled), no (disabled), as well as how many times each variant was selected during the last hour
         */
        get: operations["getFeatureUsageSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/custom-metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stored custom metrics
         * @description Retrieves the stored custom metrics data.
         */
        get: operations["getCustomMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/custom-metrics/prometheus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get metrics in Prometheus format
         * @description Exposes all custom metrics in Prometheus text format for scraping.
         */
        get: operations["getPrometheusMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get your own user details
         * @description Detailed information about the current user, user permissions and user feedback
         */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get your own user profile
         * @description Detailed information about the current user root role and project membership
         */
        get: operations["getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change your own password
         * @description Requires specifying old password and confirming new password
         */
        post: operations["changeMyPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get roles for currently logged in user
         * @description Gets roles assigned to currently logged in user. Both explicitly and transitively through group memberships
         */
        get: operations["getUserRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all personal access tokens (PATs) for the current user.
         * @description Returns all of the [personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens) (PATs) belonging to the current user.
         */
        get: operations["getPats"];
        put?: never;
        /**
         * Create a new personal access token (PAT) for the current user.
         * @description Creates a new [personal access token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens (PAT) belonging to the current user.
         */
        post: operations["createPat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a personal access token (PAT) for the current user.
         * @description Deletes a [personal access token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens) (PAT) belonging to the current user.
         */
        delete: operations["deletePat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/ui-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get UI configuration
         * @description Retrieves the full configuration used to set up the Unleash Admin UI.
         */
        get: operations["getUiConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/ui-config/cors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sets allowed CORS origins
         * @description Sets Cross-Origin Resource Sharing headers for Frontend SDK API.
         */
        post: operations["setCors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets configured context fields
         * @description Returns all configured [Context fields](https://docs.getunleash.io/reference/unleash-context) that have been created.
         */
        get: operations["getContextFields"];
        put?: never;
        /**
         * Create a context field
         * @description Endpoint that allows creation of [custom context fields](https://docs.getunleash.io/reference/unleash-context#custom-context-fields)
         */
        post: operations["createContextField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context/{contextField}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets context field
         * @description Returns specific [context field](https://docs.getunleash.io/reference/unleash-context) identified by the name in the path
         */
        get: operations["getContextField"];
        /**
         * Update an existing context field
         * @description Endpoint that allows updating a custom context field. Used to toggle stickiness and add/remove legal values for this context field
         */
        put: operations["updateContextField"];
        post?: never;
        /**
         * Delete an existing context field
         * @description Endpoint that allows deletion of a custom context field. Does not validate that context field is not in use, but since context field configuration is stored in a json blob for the strategy, existing strategies are safe.
         */
        delete: operations["deleteContextField"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context/{contextField}/strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get strategies that use a context field
         * @description Retrieves a list of all strategies that use the specified context field. If the context field doesn't exist, returns an empty list of strategies
         */
        get: operations["getStrategiesByContextField"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context/{contextField}/legal-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add or update legal value for the context field
         * @description Endpoint that allows adding or updating a single custom context field legal value. If the legal value already exists, it will be updated with the new description
         */
        post: operations["updateContextFieldLegalValue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context/{contextField}/legal-values/{legalValue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete legal value for the context field
         * @description Removes the specified custom context field legal value. Does not validate that the legal value is not in use and does not remove usage from constraints that use it.
         */
        delete: operations["deleteContextFieldLegalValue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/context/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate a context field
         * @description Check whether the provided data can be used to create a context field. If the data is not valid, returns a 400 status code with the reason why it is not valid.
         */
        post: operations["validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features-batch/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export feature flags from an environment
         * @description Exports all features listed in the `features` property from the environment specified in the request body. If set to `true`, the `downloadFile` property will let you download a file with the exported data. Otherwise, the export data is returned directly as JSON. Refer to the documentation for more information about [Unleash's export functionality](https://docs.getunleash.io/reference/deploy/environment-import-export#export).
         */
        post: operations["exportFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features-batch/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate feature import data
         * @description Validates a feature flag data set. Checks whether the data can be imported into the specified project and environment. The returned value is an object that contains errors, warnings, and permissions required to perform the import, as described in the [import documentation](https://docs.getunleash.io/reference/deploy/environment-import-export#import).
         */
        post: operations["validateImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/features-batch/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import feature flags
         * @description [Import feature flags](https://docs.getunleash.io/reference/deploy/environment-import-export#import) into a specific project and environment.
         */
        post: operations["importToggles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tags.
         * @description List all tags available in Unleash.
         */
        get: operations["getTags"];
        put?: never;
        /**
         * Create a new tag.
         * @description Create a new tag with the specified data.
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tags/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tags of a given type.
         * @description List all tags of a given type. If the tag type does not exist it returns an empty list.
         */
        get: operations["getTagsByType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tags/{type}/{value}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tag by type and value.
         * @description Get a tag by type and value. Can be used to check whether a given tag already exists in Unleash or not.
         */
        get: operations["getTag"];
        put?: never;
        post?: never;
        /**
         * Delete a tag.
         * @description Delete a tag by type and value. When a tag is deleted all references to the tag are removed.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tag-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tag types
         * @description Get a list of all available tag types.
         */
        get: operations["getTagTypes"];
        put?: never;
        /**
         * Create a tag type
         * @description Create a new tag type.
         */
        post: operations["createTagType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tag-types/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate a tag type
         * @description Validates whether if the body of the request is a valid tag and whether the a tag type with that name already exists or not. If a tag type with the same name exists, this operation will return a 409 status code.
         */
        post: operations["validateTagType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/tag-types/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tag type
         * @description Get a tag type by name.
         */
        get: operations["getTagType"];
        /**
         * Update a tag type
         * @description Update the configuration for the specified tag type.
         */
        put: operations["updateTagType"];
        post?: never;
        /**
         * Delete a tag type
         * @description Deletes a tag type. If any features have tags of this type, those tags will be deleted.
         */
        delete: operations["deleteTagType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/addons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all addons and providers
         * @description Retrieve all addons and providers that are defined on this Unleash instance.
         */
        get: operations["getAddons"];
        put?: never;
        /**
         * Create a new addon
         * @description Create an addon instance. The addon must use one of the providers available on this Unleash instance.
         */
        post: operations["createAddon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/addons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific addon
         * @description Retrieve information about the addon whose ID matches the ID in the request URL.
         */
        get: operations["getAddon"];
        /**
         * Update an addon
         * @description Update the addon with a specific ID. Any fields in the update object will be updated. Properties that are not included in the update object will not be affected. To empty a property, pass `null` as that property's value.
         *
         *     Note: passing `null` as a value for the description property will set it to an empty string.
         */
        put: operations["updateAddon"];
        post?: never;
        /**
         * Delete an addon
         * @description Delete the addon specified by the ID in the request path.
         */
        delete: operations["deleteAddon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/addons/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get integration events for a specific integration configuration.
         * @description Returns a list of integration events belonging to a specific integration configuration, identified by its id.
         */
        get: operations["getIntegrationEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API tokens
         * @description Retrieves all API tokens that exist in the Unleash instance.
         */
        get: operations["getAllApiTokens"];
        put?: never;
        /**
         * Create API token
         * @description Create an API token of a specific type: one of client, admin, frontend.
         */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-tokens/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API tokens by name
         * @description Retrieves all API tokens that match a given token name. Because token names are not unique, this endpoint will always return a list. If no tokens with the provided name exist, the list will be empty. Otherwise, it will contain all the tokens with the given name.
         */
        get: operations["getApiTokensByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/api-tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update API token
         * @description Updates an existing API token with a new expiry date. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.
         */
        put: operations["updateApiToken"];
        post?: never;
        /**
         * Delete API token
         * @description Deletes an existing API token. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.
         */
        delete: operations["deleteApiToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/inactive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets inactive users
         * @description Gets all inactive users. An inactive user is a user that has not logged in in the last 180 days
         */
        get: operations["getInactiveUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/inactive/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deletes inactive users
         * @description Deletes all inactive users. An inactive user is a user that has not logged in in the last 180 days
         */
        post: operations["deleteInactiveUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/validate-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate password for a user
         * @description Validate the password strength. Minimum 10 characters, uppercase letter, number, special character.
         */
        post: operations["validateUserPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/{id}/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change password for a user
         * @description Change password for a user as an admin
         */
        post: operations["changeUserPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset user password
         * @description Reset user password as an admin
         */
        post: operations["resetUserPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)
         * @description Will return all users and all available root roles for the Unleash instance.
         */
        get: operations["getUsers"];
        put?: never;
        /**
         * Create a new user
         * @description Creates a new user with the given root role.
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search users
         * @description  It will preform a simple search based on name and email matching the given query. Requires minimum 2 characters
         */
        get: operations["searchUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get basic user and group information
         * @description Get a subset of user and group information eligible even for non-admin users
         */
        get: operations["getBaseUsersAndGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/{id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the list of permissions for the user
         * @description Gets a list of permissions for a user, additional project and environment can be specified.
         */
        get: operations["getUserPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/admin-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total count of admin accounts
         * @description Get a total count of admins with password, without password and admin service accounts
         */
        get: operations["getAdminCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user
         * @description Will return a single user by id
         */
        get: operations["getUser"];
        /**
         * Update a user
         * @description Only the explicitly specified fields get updated.
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * Delete a user
         * @description Deletes the user with the given userId
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/user-admin/scim-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete all SCIM users
         * @description Deletes all users managed by SCIM
         */
        delete: operations["deleteScimUsers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Unleash feedback
         * @description Sends feedback gathered from the Unleash UI to the Unleash server. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).
         */
        post: operations["createFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feedback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Unleash feedback
         * @description Updates the feedback with the provided ID. Only provided fields are updated. Fields left out are left untouched. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).
         */
        put: operations["updateFeedback"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an overview of a project.
         * @description This endpoint returns an overview of the specified projects stats, project health, number of members, which environments are configured, and the features types in the project.
         */
        get: operations["getProjectOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/dora": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an overview project dora metrics.
         * @deprecated
         * @description This endpoint returns an overview of the specified dora metrics
         */
        get: operations["getProjectDora"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all applications for a project.
         * @description This endpoint returns an list of all the applications for a project.
         */
        get: operations["getProjectApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/flag-creators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all flag creators for a project.
         * @description This endpoint returns every user who created a flag in the project.
         */
        get: operations["getProjectFlagCreators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/sdks/outdated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get outdated project SDKs
         * @description Returns a list of the outdated SDKS with the applications using them.
         */
        get: operations["getOutdatedProjectSdks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a feature environment
         * @description Information about the enablement status and strategies for a feature flag in specified environment.
         */
        get: operations["getFeatureEnvironment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a feature flag
         * @description Disable a feature flag in the specified environment.
         */
        post: operations["toggleFeatureEnvironmentOff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a feature flag
         * @description Enable a feature flag in the specified environment.
         */
        post: operations["toggleFeatureEnvironmentOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/on": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk enable a list of features
         * @description This endpoint enables multiple feature flags.
         */
        post: operations["bulkToggleFeaturesEnvironmentOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/off": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk disable a list of features
         * @description This endpoint disables multiple feature flags.
         */
        post: operations["bulkToggleFeaturesEnvironmentOff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get feature flag strategies
         * @description Get strategies defined for a feature flag in the specified environment.
         */
        get: operations["getFeatureStrategies"];
        put?: never;
        /**
         * Add a strategy to a feature flag
         * @description Add a strategy to a feature flag in the specified environment.
         */
        post: operations["addFeatureStrategy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a strategy configuration
         * @description Get a strategy configuration for an environment in a feature flag.
         */
        get: operations["getFeatureStrategy"];
        /**
         * Update a strategy
         * @description Replace strategy configuration for a feature flag in the specified environment.
         */
        put: operations["updateFeatureStrategy"];
        post?: never;
        /**
         * Delete a strategy from a feature flag
         * @description Delete a strategy configuration from a feature flag in the specified environment.
         */
        delete: operations["deleteFeatureStrategy"];
        options?: never;
        head?: never;
        /**
         * Change specific properties of a strategy
         * @description Change specific properties of a strategy configuration in a feature flag.
         */
        patch: operations["patchFeatureStrategy"];
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set strategy sort order
         * @description Set the sort order of the provided list of strategies.
         */
        post: operations["setStrategySortOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all features in a project
         * @description A list of all features for the specified project.
         */
        get: operations["getFeatures"];
        put?: never;
        /**
         * Add a new feature flag
         * @description Create a new feature flag in a specified project.
         */
        post: operations["createFeature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone a feature flag
         * @description Creates a copy of the specified feature flag. The copy can be created in any project.
         */
        post: operations["cloneFeature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a feature
         * @description This endpoint returns the information about the requested feature if the feature belongs to the specified project.
         */
        get: operations["getFeature"];
        /**
         * Update a feature flag
         * @description Updates the specified feature if the feature belongs to the specified project. Only the provided properties are updated; any feature properties left out of the request body are left untouched.
         */
        put: operations["updateFeature"];
        post?: never;
        /**
         * Archive a feature flag
         * @description This endpoint archives the specified feature if the feature belongs to the specified project.
         */
        delete: operations["archiveFeature"];
        options?: never;
        head?: never;
        /**
         * Modify a feature flag
         * @description Change specific properties of a feature flag.
         */
        patch: operations["patchFeature"];
        trace?: never;
    };
    "/api/admin/projects/{projectId}/stale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark features as stale / not stale
         * @description This endpoint marks the provided list of features as either [stale](https://docs.getunleash.io/reference/technical-debt#stale-and-potentially-stale-flags) or not stale depending on the request body you send. Any provided features that don't exist are ignored.
         */
        post: operations["staleFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Adds a tag to the specified features
         * @description Add a tag to a list of features. Create tags if needed.
         */
        put: operations["addTagToFeatures"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{child}/dependencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a feature dependency.
         * @description Add a dependency to a parent feature. Each environment will resolve corresponding dependency independently.
         */
        post: operations["addFeatureDependency"];
        /**
         * Deletes feature dependencies.
         * @description Remove dependencies to all parent features.
         */
        delete: operations["deleteFeatureDependencies"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{child}/dependencies/{parent}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deletes a feature dependency.
         * @description Remove a dependency to a parent feature.
         */
        delete: operations["deleteFeatureDependency"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{child}/parents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List parent options.
         * @description List available parents who have no transitive dependencies.
         */
        get: operations["listParentOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{parent}/parent-variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List parent feature variants.
         * @description List available parent variants across all strategy variants and feature environment variants.
         */
        get: operations["listParentVariantOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/dependencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check dependencies exist.
         * @description Check if any dependencies exist in this Unleash instance
         */
        get: operations["checkDependenciesExist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add an environment to a project.
         * @description This endpoint adds the provided environment to the specified project, with optional support for enabling and disabling change requests for the environment and project.
         */
        post: operations["addEnvironmentToProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/environments/{environment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an environment from a project.
         * @description This endpoint removes the specified environment from the project.
         */
        delete: operations["removeEnvironmentFromProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/environments/{environment}/default-strategy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set environment-default strategy
         * @description Sets a default strategy for this environment. Unleash will use this strategy by default when enabling a feature flag. Use the wild card "*" for `:environment` to add to all environments.
         */
        post: operations["addDefaultStrategyToProjectEnvironment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/health-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a health report for a project.
         * @deprecated
         * @description This endpoint returns a health report for the specified project. This data is used for [the technical debt insights](https://docs.getunleash.io/reference/technical-debt)
         */
        get: operations["getProjectHealthReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get variants for a feature in an environment
         * @description Returns the variants for a feature in a specific environment. If the feature has no variants it will return an empty array of variants
         */
        get: operations["getEnvironmentFeatureVariants"];
        /**
         * Create (overwrite) variants for a feature in an environment
         * @description This overwrites the current variants for the feature flag in the :featureName parameter for the :environment parameter.
         *
         *     The backend will validate the input for the following invariants:
         *
         *     * If there are variants, there needs to be at least one variant with `weightType: variable`
         *
         *     * The sum of the weights of variants with `weightType: fix` must be strictly less than 1000 (< 1000)
         *
         *     The backend will also distribute remaining weight up to 1000 after adding the variants with `weightType: fix` together amongst the variants of `weightType: variable`
         */
        put: operations["overwriteEnvironmentFeatureVariants"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch a feature's variants in an environment
         * @description Apply a list of patches to the features environments in the specified environment. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).
         */
        patch: operations["patchEnvironmentsFeatureVariants"];
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/variants-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create (overwrite) variants for a feature flag in multiple environments
         * @description This overwrites the current variants for the feature flag in the :featureName parameter for the :environment parameter.
         */
        put: operations["overwriteFeatureVariantsOnEnvironments"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get api tokens for project.
         * @description Returns the project-specific [API tokens](https://docs.getunleash.io/reference/api-tokens) that have been created for this project.
         */
        get: operations["getProjectApiTokens"];
        put?: never;
        /**
         * Create a project API token.
         * @description Endpoint that allows creation of [project API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-token-visibility) for the specified project.
         */
        post: operations["createProjectApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/api-tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a project API token.
         * @description This operation deletes the API token specified in the request URL. If the token doesn't exist, returns an OK response (status code 200).
         */
        delete: operations["deleteProjectApiToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deletes a list of features
         * @description This endpoint deletes the specified features, that are in archive.
         */
        post: operations["deleteFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/revive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revives a list of features
         * @description This endpoint revives the specified features.
         */
        post: operations["reviveFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/archive/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validates archive features
         * @description This endpoint return info about the archive features impact.
         */
        post: operations["validateArchiveFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archives a list of features
         * @description This endpoint archives the specified features. Any features that are already archived or that don't exist are ignored. All existing features (whether already archived or not) that are provided must belong to the specified project.
         */
        post: operations["archiveFeatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an overview of a project insights.
         * @deprecated
         * @description This endpoint returns insights into the specified projects stats, health, lead time for changes, feature types used, members and change requests.
         */
        get: operations["getProjectInsights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project status
         * @description This endpoint returns information on the status the project, including activities, health, resources, and aggregated flag lifecycle data.
         */
        get: operations["getProjectStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get feature lifecycle
         * @description Information about the lifecycle stages of the feature.
         */
        get: operations["getFeatureLifecycle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set feature completed
         * @description This will set the feature as completed.
         */
        post: operations["complete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle/uncomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set feature uncompleted
         * @description This will set the feature as uncompleted.
         */
        post: operations["uncomplete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a feature link
         * @description Create a new link for a feature.
         */
        post: operations["createFeatureLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/link/{linkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a feature link
         * @description Update an existing feature link.
         */
        put: operations["updateFeatureLink"];
        post?: never;
        /**
         * Delete a feature link
         * @description Delete a feature link by id.
         */
        delete: operations["deleteFeatureLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/lifecycle/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all features lifecycle stage count
         * @description Information about the number of features in each lifecycle stage.
         */
        get: operations["getFeatureLifecycleStageCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/personal-dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get personal dashboard
         * @description Return all projects and flags that are relevant to the user.
         */
        get: operations["getPersonalDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/personal-dashboard/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get personal project details
         * @description Return personal dashboard project events, owners, user roles and onboarding status
         */
        get: operations["getPersonalDashboardProjectDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all environments
         * @description Retrieves all environments that exist in this Unleash instance.
         */
        get: operations["getAllEnvironments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the environment with `name`
         * @description Retrieves the environment with `name` if it exists in this Unleash instance
         */
        get: operations["getEnvironment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments/project/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the environments available to a project
         * @description Gets the environments that are available for this project. An environment is available for a project if enabled in the [project configuration](https://docs.getunleash.io/reference/environments#enable-an-environment)
         */
        get: operations["getProjectEnvironments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments/sort-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update environment sort orders
         * @description Updates sort orders for the named environments. Environments not specified are unaffected.
         */
        put: operations["updateSortOrder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments/{name}/on": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle the environment with `name` on
         * @description Makes it possible to enable this environment for a project. An environment must first be globally enabled using this endpoint before it can be enabled for a project
         */
        post: operations["toggleEnvironmentOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/environments/{name}/off": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle the environment with `name` off
         * @description Removes this environment from the list of available environments for projects to use
         */
        post: operations["toggleEnvironmentOff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/splash/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update splash settings
         * @description This operation updates splash settings for a user, indicating that they have seen a particualar splash screen.
         */
        post: operations["updateSplashSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/constraints/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate constraint
         * @description Validates a constraint definition. Checks whether the context field exists and whether the applied configuration is valid. Additional properties are not allowed on data objects that you send to this endpoint.
         */
        post: operations["validateConstraint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/invite-link/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get public signup tokens
         * @description Retrieves all existing public signup tokens.
         */
        get: operations["getAllPublicSignupTokens"];
        put?: never;
        /**
         * Create a public signup token
         * @description Lets administrators create a invite link to share with colleagues.  People that join using the public invite are assigned the `Viewer` role
         */
        post: operations["createPublicSignupToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/invite-link/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a token
         * @description Get information about a specific token. The `:token` part of the URL should be the token's secret.
         */
        get: operations["getPublicSignupToken"];
        /**
         * Update a public signup token
         * @description Update information about a specific token. The `:token` part of the URL should be the token's secret.
         */
        put: operations["updatePublicSignupToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/instance-admin/statistics/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Instance usage statistics
         * @description Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.
         */
        get: operations["getInstanceAdminStatsCsv"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/instance-admin/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Instance usage statistics
         * @description Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.
         */
        get: operations["getInstanceAdminStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/features/{featureName}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add feature to favorites
         * @description This endpoint marks the feature in the url as favorite
         */
        post: operations["addFavoriteFeature"];
        /**
         * Remove feature from favorites
         * @description This endpoint removes the feature in the url from favorites
         */
        delete: operations["removeFavoriteFeature"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/projects/{projectId}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add project to favorites
         * @description This endpoint marks the project in the url as favorite
         */
        post: operations["addFavoriteProject"];
        /**
         * Remove project from favorites
         * @description This endpoint removes the project in the url from favorites
         */
        delete: operations["removeFavoriteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validates if a segment name exists
         * @description Uses the name provided in the body of the request to validate if the given name exists or not
         */
        post: operations["validateSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments/strategies/{strategyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get strategy segments
         * @description Retrieve all segments that are referenced by the specified strategy. Returns an empty list of segments if the strategy ID doesn't exist.
         */
        get: operations["getSegmentsByStrategyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments/strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update strategy segments
         * @description Sets the segments of the strategy specified to be exactly the ones passed in the payload. Any segments that were used by the strategy before will be removed if they are not in the provided list of segments.
         */
        post: operations["updateFeatureStrategySegments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments/{id}/strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get strategies that reference segment
         * @description Retrieve all strategies that reference the specified segment.
         */
        get: operations["getStrategiesBySegmentId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a segment
         * @description Retrieves a segment based on its ID.
         */
        get: operations["getSegment"];
        /**
         * Update segment by id
         * @description Updates the content of the segment with the provided payload. Requires `name` and `constraints` to be present. If `project` is not present, it will be set to `null`. Any other fields not specified will be left untouched.
         */
        put: operations["updateSegment"];
        post?: never;
        /**
         * Deletes a segment by id
         * @description Deletes a segment by its id, if not found returns a 409 error
         */
        delete: operations["removeSegment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all segments
         * @description Retrieves all segments that exist in this Unleash instance.
         */
        get: operations["getSegments"];
        put?: never;
        /**
         * Create a new segment
         * @description Creates a new segment using the payload provided
         */
        post: operations["createSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get maintenance mode status
         * @description Tells you whether maintenance mode is enabled or disabled
         */
        get: operations["getMaintenance"];
        put?: never;
        /**
         * Enabled/disabled maintenance mode
         * @description Lets administrators put Unleash into a mostly read-only mode. While Unleash is in maintenance mode, users can not change any configuration settings
         */
        post: operations["toggleMaintenance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/telemetry/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get telemetry settings
         * @description Provides the configured settings for [telemetry information collection](https://docs.getunleash.io/topics/data-collection)
         */
        get: operations["getTelemetrySettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/search/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search and filter features
         * @description Search and filter by selected fields.
         */
        get: operations["searchFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/search/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for events
         * @description Allows searching for events that match the query parameter criteria.
         */
        get: operations["searchEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/record-ui-error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accepts errors from the UI client
         * @description This endpoint accepts error reports from the UI client, so that we can add observability on UI errors.
         */
        post: operations["uiObservability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/features/{featureName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single feature flag
         * @description Gets all the client data for a single flag. Contains the exact same information about a flag as the `/api/client/features` endpoint does, but only contains data about the specified flag. All SDKs should use `/api/client/features`
         */
        get: operations["getClientFeature"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all flags (SDK)
         * @description Returns the SDK configuration for all feature flags that are available to the provided API key. Used by SDKs to configure local evaluation
         */
        get: operations["getAllClientFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register client usage metrics
         * @description Registers usage metrics. Stores information about how many times each flag was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature flag's variants were displayed to the end user.
         */
        post: operations["registerClientMetrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/metrics/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send metrics in bulk
         * @description This operation accepts batched metrics from any client. Metrics will be inserted into Unleash's metrics storage
         */
        post: operations["clientBulkMetrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/metrics/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send custom metrics
         * @description This operation accepts custom metrics from clients. These metrics will be exposed via Prometheus in Unleash.
         */
        post: operations["clientCustomMetrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a client SDK
         * @description Register a client SDK with Unleash. SDKs call this endpoint on startup to tell Unleash about their existence. Used to track custom strategies in use as well as SDK versions.
         */
        post: operations["registerClientApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/frontend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve enabled feature flags for the provided context.
         * @description This endpoint returns the list of feature flags that the frontend API evaluates to enabled for the given context. Context values are provided as query parameters. If the Frontend API is disabled 404 is returned.
         */
        get: operations["getFrontendFeatures"];
        put?: never;
        /**
         * Retrieve enabled feature flags for the provided context, using POST.
         * @description This endpoint returns the list of feature flags that the frontend API evaluates to enabled for the given context, using POST. Context values are provided as a `context` property in the request body. If the Frontend API is disabled 404 is returned.
         */
        post: operations["getFrontendApiFeaturesWithPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/frontend/client/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register client usage metrics
         * @description Registers usage metrics. Stores information about how many times each flag was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature flag's variants were displayed to the end user. If the Frontend API is disabled 404 is returned.
         */
        post: operations["registerFrontendMetrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/frontend/client/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a client SDK
         * @description This is for future use. Currently Frontend client registration is not supported. Returning 200 for clients that expect this status code. If the Frontend API is disabled 404 is returned.
         */
        post: operations["registerFrontendClient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check which tokens are valid
         * @description This operation accepts a list of tokens to validate. Unleash will validate each token you provide. For each valid token you provide, Unleash will return the token along with its type and which projects it has access to.
         */
        post: operations["getValidTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Data required to create or update an [Unleash addon](https://docs.getunleash.io/reference/addons) instance. */
        addonCreateUpdateSchema: {
            /**
             * @description The addon provider, such as "webhook" or "slack". This string is **case sensitive** and maps to the provider's `name` property.
             *
             *     The list of all supported providers and their parameters for a specific Unleash instance can be found by making a GET request to the `api/admin/addons` endpoint: the `providers` property of that response will contain all available providers.
             *
             *     The default set of providers can be found in the [addons reference documentation](https://docs.getunleash.io/reference/addons). The default supported options are:
             *     - `datadog` for [Datadog](https://docs.getunleash.io/reference/addons/datadog)
             *     - `slack` for [Slack](https://docs.getunleash.io/reference/addons/slack)
             *     - `teams` for [Microsoft Teams](https://docs.getunleash.io/reference/addons/teams)
             *     - `webhook` for [webhooks](https://docs.getunleash.io/reference/addons/webhook)
             *
             *     The provider you choose for your addon dictates what properties the `parameters` object needs. Refer to the documentation for each provider for more information.
             *
             * @example webhook
             */
            provider: string;
            /**
             * @description A description of the addon.
             * @example This addon posts updates to our internal feature tracking system whenever a feature is created or updated.
             */
            description?: string;
            /** @description Whether the addon should be enabled or not. */
            enabled: boolean;
            /**
             * @description Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose. Consult the documentation for details.
             * @example {
             *       "url": "http://localhost:4242/webhook"
             *     }
             */
            parameters: {
                [key: string]: unknown;
            };
            /**
             * @description The event types that will trigger this specific addon.
             * @example [
             *       "feature-created",
             *       "feature-updated"
             *     ]
             */
            events: string[];
            /**
             * @description The projects that this addon will listen to events from. An empty list means it will listen to events from **all** projects.
             * @example [
             *       "new-landing-project",
             *       "signups-v2"
             *     ]
             */
            projects?: string[];
            /**
             * @description The list of environments that this addon will listen to events from. An empty list means it will listen to events from **all** environments.
             * @example [
             *       "development",
             *       "production"
             *     ]
             */
            environments?: string[];
        };
        /** @description An addon parameter definition. */
        addonParameterSchema: {
            /**
             * @description The name of the parameter as it is used in code. References to this parameter should use this value.
             * @example emojiIcon
             */
            name: string;
            /**
             * @description The name of the parameter as it is shown to the end user in the Admin UI.
             * @example Emoji Icon
             */
            displayName: string;
            /**
             * @description The type of the parameter. Corresponds roughly to [HTML `input` field types](https://developer.mozilla.org/docs/Web/HTML/Element/Input#input_types). Multi-line inut fields are indicated as `textfield` (equivalent to the HTML `textarea` tag).
             * @example text
             */
            type: string;
            /**
             * @description A description of the parameter. This should explain to the end user what the parameter is used for.
             * @example The emoji_icon to use when posting messages to slack. Defaults to ":unleash:".
             */
            description?: string;
            /**
             * @description The default value for this parameter. This value is used if no other value is provided.
             * @example :unleash:
             */
            placeholder?: string;
            /**
             * @description Whether this parameter is required or not. If a parameter is required, you must give it a value when you create the addon. If it is not required it can be left out. It may receive a default value in those cases.
             * @example false
             */
            required: boolean;
            /**
             * @description Indicates whether this parameter is **sensitive** or not. Unleash will not return sensitive parameters to API requests. It will instead use a number of asterisks to indicate that a value is set, e.g. "******". The number of asterisks does not correlate to the parameter's value.
             * @example false
             */
            sensitive: boolean;
        };
        /** @description An [addon](https://docs.getunleash.io/reference/addons) instance description. Contains data about what kind of provider it uses, whether it's enabled or not, what events it listens for, and more. */
        addonSchema: {
            /**
             * @description The addon's unique identifier.
             * @example 27
             */
            id: number;
            /**
             * @description The addon provider, such as "webhook" or "slack".
             * @example webhook
             */
            provider: string;
            /**
             * @description A description of the addon. `null` if no description exists.
             * @example This addon posts updates to our internal feature tracking system whenever a feature is created or updated.
             */
            description: string | null;
            /** @description Whether the addon is enabled or not. */
            enabled: boolean;
            /**
             * @description Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose.
             * @example {
             *       "url": "http://localhost:4242/webhook"
             *     }
             */
            parameters: {
                [key: string]: unknown;
            };
            /**
             * @description The event types that trigger this specific addon.
             * @example [
             *       "feature-created",
             *       "feature-updated"
             *     ]
             */
            events: string[];
            /**
             * @description The projects that this addon listens to events from. An empty list means it listens to events from **all** projects.
             * @example [
             *       "new-landing-project",
             *       "signups-v2"
             *     ]
             */
            projects?: string[];
            /**
             * @description The list of environments that this addon listens to events from. An empty list means it listens to events from **all** environments.
             * @example [
             *       "development",
             *       "production"
             *     ]
             */
            environments?: string[];
        };
        /** @description An addon provider. Defines a specific addon type and what the end user must configure when creating a new addon of that type. */
        addonTypeSchema: {
            /**
             * @description The name of the addon type. When creating new addons, this goes in the payload's `type` field.
             * @example slack
             */
            name: string;
            /**
             * @description The addon type's name as it should be displayed in the admin UI.
             * @example Slack
             */
            displayName: string;
            /**
             * @description A URL to where you can find more information about using this addon type.
             * @example https://docs.getunleash.io/docs/addons/slack
             */
            documentationUrl: string;
            /**
             * @description A description of the addon type.
             * @example Allows Unleash to post updates to Slack.
             */
            description: string;
            /**
             * @description A long description of how to use this addon type. This will be displayed on the top of configuration page. Can contain markdown.
             * @example This is **how you use** this addon type...
             *       - Step 1
             *       - Step 2
             *       - Step 3
             */
            howTo?: string;
            /**
             * @description A list of [Unleash tag types](https://docs.getunleash.io/reference/feature-toggles#tags) that this addon uses. These tags will be added to the Unleash instance when an addon of this type is created.
             * @example [
             *       {
             *         "name": "slack",
             *         "description": "Slack tag used by the slack-addon to specify the slack channel.",
             *         "icon": "S"
             *       }
             *     ]
             */
            tagTypes?: components["schemas"]["tagTypeSchema"][];
            /**
             * @description The addon provider's parameters. Use these to configure an addon of this provider type. Items with `required: true` must be provided.
             * @example [
             *       {
             *         "name": "url",
             *         "displayName": "Slack webhook URL",
             *         "description": "(Required)",
             *         "type": "url",
             *         "required": true,
             *         "sensitive": true
             *       },
             *       {
             *         "name": "username",
             *         "displayName": "Username",
             *         "placeholder": "Unleash",
             *         "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
             *         "type": "text",
             *         "required": false,
             *         "sensitive": false
             *       },
             *       {
             *         "name": "emojiIcon",
             *         "displayName": "Emoji Icon",
             *         "placeholder": ":unleash:",
             *         "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
             *         "type": "text",
             *         "required": false,
             *         "sensitive": false
             *       },
             *       {
             *         "name": "defaultChannel",
             *         "displayName": "Default channel",
             *         "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
             *         "type": "text",
             *         "required": true,
             *         "sensitive": false
             *       }
             *     ]
             */
            parameters?: components["schemas"]["addonParameterSchema"][];
            /**
             * @description All the [event types](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#feature-toggle-events) that are available for this addon provider.
             * @example [
             *       "feature-created",
             *       "feature-updated",
             *       "feature-archived",
             *       "feature-revived",
             *       "feature-stale-on",
             *       "feature-stale-off",
             *       "feature-environment-enabled",
             *       "feature-environment-disabled",
             *       "feature-strategy-remove",
             *       "feature-strategy-update",
             *       "feature-strategy-add",
             *       "feature-metadata-updated",
             *       "feature-variants-updated",
             *       "feature-project-change"
             *     ]
             */
            events?: string[];
            /** @description The installation configuration for this addon type. */
            installation?: {
                /**
                 * @description A URL to where the addon configuration should redirect to install addons of this type.
                 * @example https://app-for-slack.getunleash.io/install
                 */
                url: string;
                /**
                 * @description The title of the installation configuration. This will be displayed to the user when installing addons of this type.
                 * @example App for Slack installation
                 */
                title?: string;
                /**
                 * @description The help text of the installation configuration. This will be displayed to the user when installing addons of this type.
                 * @example Clicking the Install button will send you to Slack to initiate the installation procedure for the Unleash App for Slack for your workspace
                 */
                helpText?: string;
            };
            /** @description A list of alerts to display to the user when installing addons of this type. */
            alerts?: {
                /**
                 * @description The type of alert. This determines the color of the alert.
                 * @example info
                 * @enum {string}
                 */
                type: "success" | "info" | "warning" | "error";
                /**
                 * @description The text of the alert. This is what will be displayed to the user.
                 * @example Please ensure you have the Unleash App for Slack installed in your Slack workspace if you haven't installed it already. If you want the Unleash App for Slack bot to post messages to private channels, you'll need to invite it to those channels.
                 */
                text: string;
            }[];
            /**
             * @description This should be used to inform the user that this addon type is deprecated and should not be used. Deprecated addons will show a badge with this information on the UI.
             * @example This integration is deprecated. Please try the new integration instead.
             */
            deprecated?: string;
        };
        /** @description An object containing two things:
         *     1. A list of all [addons](https://docs.getunleash.io/reference/addons) defined on this Unleash instance
         *     2. A list of all addon providers defined on this instance */
        addonsSchema: {
            /** @description All the addons that exist on this instance of Unleash. */
            addons: components["schemas"]["addonSchema"][];
            /**
             * @description A list of  all available addon providers, along with their parameters and descriptions.
             * @example [
             *       {
             *         "name": "webhook",
             *         "displayName": "Webhook",
             *         "description": "A Webhook is a generic way to post messages from Unleash to third party services.",
             *         "documentationUrl": "https://docs.getunleash.io/docs/addons/webhook",
             *         "parameters": [
             *           {
             *             "name": "url",
             *             "displayName": "Webhook URL",
             *             "description": "(Required) Unleash will perform a HTTP Post to the specified URL (one retry if first attempt fails)",
             *             "type": "url",
             *             "required": true,
             *             "sensitive": true
             *           },
             *           {
             *             "name": "contentType",
             *             "displayName": "Content-Type",
             *             "placeholder": "application/json",
             *             "description": "(Optional) The Content-Type header to use. Defaults to \"application/json\".",
             *             "type": "text",
             *             "required": false,
             *             "sensitive": false
             *           },
             *           {
             *             "name": "authorization",
             *             "displayName": "Authorization",
             *             "placeholder": "",
             *             "description": "(Optional) The Authorization header to use. Not used if left blank.",
             *             "type": "text",
             *             "required": false,
             *             "sensitive": true
             *           },
             *           {
             *             "name": "bodyTemplate",
             *             "displayName": "Body template",
             *             "placeholder": "{\n  \"event\": \"{{event.type}}\",\n  \"createdBy\": \"{{event.createdBy}}\",\n  \"featureToggle\": \"{{event.data.name}}\",\n  \"timestamp\": \"{{event.data.createdAt}}\"\n}",
             *             "description": "(Optional) You may format the body using a mustache template. If you don't specify anything, the format will similar to the events format (https://docs.getunleash.io/reference/api/legacy/unleash/admin/events)",
             *             "type": "textfield",
             *             "required": false,
             *             "sensitive": false
             *           }
             *         ],
             *         "events": [
             *           "feature-created",
             *           "feature-updated",
             *           "feature-archived",
             *           "feature-revived",
             *           "feature-stale-on",
             *           "feature-stale-off",
             *           "feature-environment-enabled",
             *           "feature-environment-disabled",
             *           "feature-strategy-remove",
             *           "feature-strategy-update",
             *           "feature-strategy-add",
             *           "feature-metadata-updated",
             *           "feature-variants-updated",
             *           "feature-project-change",
             *           "feature-tagged",
             *           "feature-untagged",
             *           "change-request-created",
             *           "change-request-discarded",
             *           "change-added",
             *           "change-discarded",
             *           "change-request-approved",
             *           "change-request-approval-added",
             *           "change-request-cancelled",
             *           "change-request-sent-to-review",
             *           "change-request-applied"
             *         ]
             *       },
             *       {
             *         "name": "slack",
             *         "displayName": "Slack",
             *         "description": "Allows Unleash to post updates to Slack.",
             *         "documentationUrl": "https://docs.getunleash.io/docs/addons/slack",
             *         "parameters": [
             *           {
             *             "name": "url",
             *             "displayName": "Slack webhook URL",
             *             "description": "(Required)",
             *             "type": "url",
             *             "required": true,
             *             "sensitive": true
             *           },
             *           {
             *             "name": "username",
             *             "displayName": "Username",
             *             "placeholder": "Unleash",
             *             "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
             *             "type": "text",
             *             "required": false,
             *             "sensitive": false
             *           },
             *           {
             *             "name": "emojiIcon",
             *             "displayName": "Emoji Icon",
             *             "placeholder": ":unleash:",
             *             "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
             *             "type": "text",
             *             "required": false,
             *             "sensitive": false
             *           },
             *           {
             *             "name": "defaultChannel",
             *             "displayName": "Default channel",
             *             "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
             *             "type": "text",
             *             "required": true,
             *             "sensitive": false
             *           }
             *         ],
             *         "events": [
             *           "feature-created",
             *           "feature-updated",
             *           "feature-archived",
             *           "feature-revived",
             *           "feature-stale-on",
             *           "feature-stale-off",
             *           "feature-environment-enabled",
             *           "feature-environment-disabled",
             *           "feature-strategy-remove",
             *           "feature-strategy-update",
             *           "feature-strategy-add",
             *           "feature-metadata-updated",
             *           "feature-variants-updated",
             *           "feature-project-change"
             *         ],
             *         "tagTypes": [
             *           {
             *             "name": "slack",
             *             "description": "Slack tag used by the slack-addon to specify the slack channel.",
             *             "icon": "S"
             *           }
             *         ]
             *       },
             *       {
             *         "name": "teams",
             *         "displayName": "Microsoft Teams",
             *         "description": "Allows Unleash to post updates to Microsoft Teams.",
             *         "documentationUrl": "https://docs.getunleash.io/docs/addons/teams",
             *         "parameters": [
             *           {
             *             "name": "url",
             *             "displayName": "Microsoft Teams webhook URL",
             *             "description": "(Required)",
             *             "type": "url",
             *             "required": true,
             *             "sensitive": true
             *           }
             *         ],
             *         "events": [
             *           "feature-created",
             *           "feature-updated",
             *           "feature-archived",
             *           "feature-revived",
             *           "feature-stale-on",
             *           "feature-stale-off",
             *           "feature-environment-enabled",
             *           "feature-environment-disabled",
             *           "feature-strategy-remove",
             *           "feature-strategy-update",
             *           "feature-strategy-add",
             *           "feature-metadata-updated",
             *           "feature-variants-updated",
             *           "feature-project-change"
             *         ]
             *       },
             *       {
             *         "name": "datadog",
             *         "displayName": "Datadog",
             *         "description": "Allows Unleash to post updates to Datadog.",
             *         "documentationUrl": "https://docs.getunleash.io/docs/addons/datadog",
             *         "parameters": [
             *           {
             *             "name": "url",
             *             "displayName": "Datadog Events URL",
             *             "description": "Default URL: https://api.datadoghq.com/api/v1/events. Needs to be changed if your're not using the US1 site.",
             *             "type": "url",
             *             "required": false,
             *             "sensitive": false
             *           },
             *           {
             *             "name": "apiKey",
             *             "displayName": "Datadog API key",
             *             "placeholder": "j96c23b0f12a6b3434a8d710110bd862",
             *             "description": "(Required) API key to connect to Datadog",
             *             "type": "text",
             *             "required": true,
             *             "sensitive": true
             *           }
             *         ],
             *         "events": [
             *           "feature-created",
             *           "feature-updated",
             *           "feature-archived",
             *           "feature-revived",
             *           "feature-stale-on",
             *           "feature-stale-off",
             *           "feature-environment-enabled",
             *           "feature-environment-disabled",
             *           "feature-strategy-remove",
             *           "feature-strategy-update",
             *           "feature-strategy-add",
             *           "feature-metadata-updated",
             *           "feature-project-change",
             *           "feature-variants-updated"
             *         ],
             *         "tagTypes": [
             *           {
             *             "name": "datadog",
             *             "description": "All Datadog tags added to a specific feature are sent to datadog event stream.",
             *             "icon": "D"
             *           }
             *         ]
             *       }
             *     ]
             */
            providers: components["schemas"]["addonTypeSchema"][];
        };
        /** @description Contains total admin counts for an Unleash instance. */
        adminCountSchema: {
            /** @description Total number of admins that have a password set. */
            password: number;
            /** @description Total number of admins that do not have a password set. May be SSO, but may also be users that did not set a password yet. */
            noPassword: number;
            /** @description Total number of service accounts that have the admin root role. */
            service: number;
        };
        /** @description Query parameters used to modify the list of features returned. */
        adminFeaturesQuerySchema: {
            /**
             * @description Used to filter by tags. For each entry, a TAGTYPE:TAGVALUE is expected
             * @example [
             *       "simple:mytag"
             *     ]
             */
            tag?: string[];
            /**
             * @description A case-insensitive prefix filter for the names of feature flags
             * @example demo.part1
             */
            namePrefix?: string;
        };
        /** @description A description of a [segment](https://docs.getunleash.io/reference/segments) */
        adminSegmentSchema: {
            /**
             * @description The ID of this segment
             * @example 2
             */
            id: number;
            /**
             * @description The name of this segment
             * @example ios-users
             */
            name: string;
            /**
             * @description The description for this segment
             * @example IOS users segment
             */
            description?: string | null;
            /** @description The list of constraints that are used in this segment */
            constraints: components["schemas"]["constraintSchema"][];
            /**
             * @description The number of feature flags that use this segment. The number also includes the any flags with pending change requests that would add this segment.
             * @example 3
             */
            usedInFeatures?: number | null;
            /**
             * @description The number of projects that use this segment. The number includes any projects with pending change requests that would add this segment.
             * @example 2
             */
            usedInProjects?: number | null;
            /**
             * @description The project the segment belongs to. Only present if the segment is a project-specific segment.
             * @example red-vista
             */
            project?: string | null;
            /**
             * @description The creator's email or username
             * @example someone@example.com
             */
            createdBy?: string | null;
            /**
             * Format: date-time
             * @description When the segment was created
             * @example 2023-04-12T11:13:31.960Z
             */
            createdAt: string;
        };
        /** @description A simplified feature flag model intended for the Unleash playground. */
        advancedPlaygroundEnvironmentFeatureSchema: {
            /**
             * @description The feature's name.
             * @example my-feature
             */
            name: string;
            /**
             * @description The feature's environment.
             * @example development
             */
            environment: string;
            /** @description The context to use when evaluating flags */
            context: components["schemas"]["sdkFlatContextSchema"];
            /**
             * @description The ID of the project that contains this feature.
             * @example my-project
             */
            projectId: string;
            /** @description Feature's applicable strategies and cumulative results of the strategies */
            strategies: {
                /** @description The cumulative results of all the feature's strategies. Can be `true`,
                 *                                       `false`, or `unknown`.
                 *                                       This property will only be `unknown`
                 *                                       if one or more of the strategies can't be fully evaluated and the rest of the strategies
                 *                                       all resolve to `false`. */
                result: boolean | "unknown";
                /** @description The strategies that apply to this feature. */
                data: components["schemas"]["playgroundStrategySchema"][];
            };
            /** @description Whether the feature is active and would be evaluated in the provided environment in a normal SDK context. */
            isEnabledInCurrentEnvironment: boolean;
            /**
             * @description Whether this feature is enabled or not in the current environment.
             *                               If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),
             *                               this will be `false` to align with how client SDKs treat unresolved feature states.
             * @example true
             */
            isEnabled: boolean;
            /**
             * @description The feature variant you receive based on the provided context or the _disabled
             *                               variant_. If a feature is disabled or doesn't have any
             *                               variants, you would get the _disabled variant_.
             *                               Otherwise, you'll get one of the feature's defined variants.
             * @example {
             *       "name": "green",
             *       "enabled": true
             *     }
             */
            variant: {
                /**
                 * @description The variant's name. If there is no variant or if the flag is disabled, this will be `disabled`
                 * @example red-variant
                 */
                name: string;
                /** @description Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false` */
                enabled: boolean;
                /** @description An optional payload attached to the variant. */
                payload?: {
                    /** @description The format of the payload. */
                    type: string;
                    /**
                     * @description The payload value stringified.
                     * @example {"property": "value"}
                     */
                    value: string;
                };
                /** @description Whether the feature is enabled or not. If the feature is disabled, this property will be `false` */
                feature_enabled?: boolean;
            } | null;
            /** @description The feature variants. */
            variants: components["schemas"]["variantSchema"][];
        };
        /** @description A simplified feature flag model intended for the Unleash playground. */
        advancedPlaygroundFeatureSchema: {
            /**
             * @description The feature's name.
             * @example my-feature
             */
            name: string;
            /**
             * @description The ID of the project that contains this feature.
             * @example my-project
             */
            projectId: string;
            /** @description The lists of features that have been evaluated grouped by environment. */
            environments: {
                [key: string]: components["schemas"]["advancedPlaygroundEnvironmentFeatureSchema"][];
            };
        };
        /** @description Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection */
        advancedPlaygroundRequestSchema: {
            /**
             * @description The environments to evaluate toggles in.
             * @example [
             *       "development",
             *       "production"
             *     ]
             */
            environments: string[];
            /** @description A list of projects to check for toggles in. */
            projects?: string[] | "*";
            context: components["schemas"]["sdkContextSchema"];
        };
        /** @description The state of all features given the provided input. */
        advancedPlaygroundResponseSchema: {
            /** @description The given input used to evaluate the features. */
            input: components["schemas"]["advancedPlaygroundRequestSchema"];
            /** @description The list of features that have been evaluated. */
            features: components["schemas"]["advancedPlaygroundFeatureSchema"][];
            /** @description Warnings that occurred during evaluation. */
            warnings?: {
                /** @description A list of top-level context properties that were provided as input that are not valid due to being the wrong type. */
                invalidContextProperties?: string[];
            };
        };
        /** @description An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys). */
        apiTokenSchema: {
            /**
             * @description The token used for authentication.
             * @example project:environment.xyzrandomstring
             */
            secret: string;
            /**
             * @description A unique name for this particular token
             * @example some-user
             */
            tokenName: string;
            /**
             * @description The type of API token
             * @example client
             * @enum {string}
             */
            type: "client" | "admin" | "frontend";
            /**
             * @description The environment the token has access to.
             * @default development
             * @example development
             */
            environment: string;
            /**
             * @description The project this token belongs to.
             * @example developerexperience
             */
            project?: string;
            /**
             * @description The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`
             * @example [
             *       "developerexperience",
             *       "enterprisegrowth"
             *     ]
             */
            projects: string[];
            /**
             * Format: date-time
             * @description The token's expiration date. NULL if the token doesn't have an expiration set.
             * @example 2023-04-19T08:15:14.000Z
             */
            expiresAt?: string | null;
            /**
             * Format: date-time
             * @description When the token was created.
             * @example 2023-04-19T08:15:14.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication.
             * @example 2023-04-19T08:15:14.000Z
             */
            seenAt?: string | null;
            /**
             * @description Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.
             * @example randomid-or-some-alias
             */
            alias?: string | null;
        };
        /** @description An object with [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) */
        apiTokensSchema: {
            /** @description A list of Unleash API tokens. */
            tokens: components["schemas"]["apiTokenSchema"][];
        };
        /** @description Data about an application environment instances that are connected to Unleash via an SDK. */
        applicationEnvironmentInstancesSchema: {
            /** @description A list of instances */
            instances: {
                /**
                 * @description A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds
                 * @example b77f3d13-5f48-4a7b-a3f4-a449b97ce43a
                 */
                instanceId: string;
                /**
                 * @description An SDK version identifier. Usually formatted as "unleash-client-<language>:<version>"
                 * @example unleash-client-java:7.0.0
                 */
                sdkVersion?: string | null;
                /**
                 * @description An IP address identifying the instance of the application running the SDK
                 * @example 192.168.0.1
                 */
                clientIp?: string | null;
                /**
                 * Format: date-time
                 * @description The last time the application environment instance was seen
                 * @example 2023-04-19T08:15:14.000Z
                 */
                lastSeen?: string;
            }[];
        };
        /** @description This list of issues that might be wrong with the application */
        applicationEnvironmentIssuesSchema: {
            /**
             * @description The list of features that are missing in Unleash
             * @example [
             *       "feature1",
             *       "feature2"
             *     ]
             */
            missingFeatures: string[];
            /**
             * @description The list of used SDKs that are outdated
             * @example [
             *       "unleash-client-node:5.4.0",
             *       "unleash-client-node:5.3.0"
             *     ]
             */
            outdatedSdks: string[];
        };
        /** @description Data about an application environment */
        applicationOverviewEnvironmentSchema: {
            /**
             * @description Name of the application environment
             * @example production
             */
            name: string;
            /**
             * @description The number of instances of the application environment
             * @example 5
             */
            instanceCount: number;
            /**
             * @description SDKs used in the application environment
             * @example [
             *       "unleash-client-node:5.4.0",
             *       "unleash-client-node:5.3.0"
             *     ]
             */
            sdks: string[];
            /**
             * @description Frontend SDKs used in the application environment
             * @example [
             *       "unleash-client-js:3.7.5"
             *     ]
             */
            frontendSdks: string[];
            /**
             * @description Backend SDKs used in the application environment
             * @example [
             *       "unleash-client-node:5.4.0"
             *     ]
             */
            backendSdks: string[];
            /**
             * Format: date-time
             * @description The last time the application environment was seen
             * @example 2023-04-19T08:15:14.000Z
             */
            lastSeen: string | null;
            /** @description This list of issues that might be wrong with the application */
            issues: components["schemas"]["applicationEnvironmentIssuesSchema"];
        };
        /** @description This list of issues that might be wrong with the application */
        applicationOverviewIssuesSchema: {
            /**
             * @description The list of strategies that are missing from Unleash
             * @example [
             *       "feature1",
             *       "feature2"
             *     ]
             */
            missingStrategies: string[];
        };
        /** @description Data about an application that's connected to Unleash via an SDK. */
        applicationOverviewSchema: {
            /**
             * @description The list of projects the application has been using.
             * @example [
             *       "default",
             *       "payment"
             *     ]
             */
            projects: string[];
            /**
             * @description The number of features the application has been using.
             * @example 5
             */
            featureCount: number;
            /** @description The list of environments the application has been using. */
            environments: components["schemas"]["applicationOverviewEnvironmentSchema"][];
            /** @description This list of issues that might be wrong with the application */
            issues: components["schemas"]["applicationOverviewIssuesSchema"];
        };
        /** @description Data about an application that's connected to Unleash via an SDK. */
        applicationSchema: {
            /**
             * @description Name of the application
             * @example accounting
             */
            appName: string;
            /**
             * @description Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`
             * @example unleash-client-java:8.0.0
             */
            sdkVersion?: string;
            /**
             * @description Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
             * @example [
             *       "standard",
             *       "gradualRollout",
             *       "mySpecialCustomStrategy"
             *     ]
             */
            strategies?: string[];
            /**
             * @description Extra information added about the application reporting the metrics. Only present if added via the Unleash Admin interface
             * @example Application for reporting page visits
             */
            description?: string;
            /**
             * @description A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
             * @example https://github.com/Unleash/unleash-proxy-client-js
             */
            url?: string;
            /**
             * @description The CSS color that is used to color the application's entry in the application list
             * @example red
             */
            color?: string;
            /**
             * @description An URL to an icon file to be used for the applications's entry in the application list
             * @example https://github.com/favicon.ico
             */
            icon?: string;
            /** @description The list of projects the application has been using. */
            usage?: components["schemas"]["applicationUsageSchema"][];
        };
        /** @description Data about an project that have been used by applications. */
        applicationUsageSchema: {
            /**
             * @description Name of the project
             * @example main-project
             */
            project: string;
            /**
             * @description Which environments have been accessed in this project.
             * @example [
             *       "development",
             *       "production"
             *     ]
             */
            environments: string[];
        };
        /** @description An object containing a list of applications that have connected to Unleash via an SDK. */
        applicationsSchema: {
            /**
             * @description The total number of project applications.
             * @example 50
             */
            total: number;
            /** @description The list of applications that have connected to this Unleash instance. */
            applications: components["schemas"]["applicationSchema"][];
        };
        /** @description A list of feature flag names for batch operations */
        batchFeaturesSchema: {
            /**
             * @description List of feature flag names
             * @example [
             *       "my-feature-4",
             *       "my-feature-5",
             *       "my-feature-6"
             *     ]
             */
            features: string[];
        };
        /** @description A list of features to operate on and whether they should be marked as stale or as not stale. */
        batchStaleSchema: {
            /**
             * @description A list of features to mark as (not) stale
             * @example [
             *       "my-feature-1",
             *       "my-feature-2",
             *       "my-feature-3"
             *     ]
             */
            features: string[];
            /**
             * @description Whether the list of features should be marked as stale or not stale. If `true`, the features will be marked as stale. If `false`, the features will be marked as not stale.
             * @example true
             */
            stale: boolean;
        };
        /** @description A batch of metrics accumulated by Edge (or other compatible applications). Includes both application registrations as well usage metrics from clients */
        bulkMetricsSchema: {
            /** @description A list of applications registered by an Unleash SDK */
            applications: components["schemas"]["bulkRegistrationSchema"][];
            /** @description a list of client usage metrics registered by downstream providers. (Typically Unleash Edge) */
            metrics: components["schemas"]["clientMetricsEnvSchema"][];
            /** @description a list of custom impact metrics registered by downstream providers. (Typically Unleash Edge) */
            impactMetrics?: components["schemas"]["impactMetricsSchema"][];
        };
        /** @description An application registration. Defines the format POSTed by our backend SDKs when they're starting up */
        bulkRegistrationSchema: {
            /**
             * @description A list of applications this app registration has been registered through. If connected directly to Unleash, this is an empty list.
             *      This can be used in later visualizations to tell how many levels of proxy or Edge instances our SDKs have connected through
             * @example [
             *       {
             *         "appName": "unleash-edge",
             *         "instanceId": "edge-pod-bghzv5"
             *       }
             *     ]
             */
            connectVia?: {
                appName: string;
                instanceId: string;
            }[];
            /**
             * @description The name of the application that is evaluating toggles
             * @example Ingress load balancer
             */
            appName: string;
            /**
             * @description Which environment the application is running in
             * @example development
             */
            environment: string;
            /**
             * @description A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application
             * @example application-name-dacb1234
             */
            instanceId: string;
            /**
             * @description How often (in seconds) the application refreshes its features
             * @example 10
             */
            interval?: number;
            /**
             * @description The application started at
             * @example 1952-03-11T12:00:00.000Z
             */
            started?: components["schemas"]["dateSchema"];
            /**
             * @description Enabled [strategies](https://docs.getunleash.io/reference/activation-strategies) in the application
             * @example [
             *       "standard",
             *       "gradualRollout"
             *     ]
             */
            strategies?: string[];
            /**
             * @description The list of projects used in the application
             * @example [
             *       "projectA",
             *       "projectB"
             *     ]
             */
            projects?: string[];
            /**
             * @description The version the sdk is running. Typically <client>:<version>
             * @example unleash-client-java:8.0.0
             */
            sdkVersion?: string;
            /**
             * @description The sdk type
             * @example backend
             * @enum {string|null}
             */
            sdkType?: "frontend" | "backend" | null;
        };
        /** @description The feature list used for bulk toggle operations */
        bulkToggleFeaturesSchema: {
            /**
             * @description The features that we want to bulk toggle
             * @example [
             *       "feature-a",
             *       "feature-b"
             *     ]
             */
            features: string[];
        };
        /** @description Change password as long as the token is a valid token */
        changePasswordSchema: {
            /**
             * @description A reset token used to validate that the user is allowed to change the password.
             * @example $2a$15$QzeW/y5/MEppCWVEkoX5euejobYOLSd4We21LQjjKlWH9l2I3wCke
             */
            token: string;
            /**
             * @description The new password for the user
             * @example correct horse battery staple
             */
            password: string;
        };
        /** @description A client application is an instance of one of our SDKs */
        clientApplicationSchema: {
            /**
             * @description An identifier for the app that uses the sdk, should be static across SDK restarts
             * @example example-app
             */
            appName: string;
            /**
             * @description A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds
             * @example b77f3d13-5f48-4a7b-a3f4-a449b97ce43a
             */
            instanceId?: string;
            /**
             * @description An SDK version identifier. Usually formatted as "unleash-client-<language>:<version>"
             * @example unleash-client-java:7.0.0
             */
            sdkVersion?: string;
            /**
             * @deprecated
             * @description The SDK's configured 'environment' property. This property was deprecated in v5. This property  does **not** control which Unleash environment the SDK gets toggles for. To control Unleash environments, use the SDKs API key.
             * @example development
             */
            environment?: string;
            /**
             * @description The platform the application is running on. For languages that compile to binaries, this can be omitted
             * @example .NET Core
             */
            platformName?: string;
            /**
             * @description The version of the platform the application is running on. Languages that compile to binaries, this is expected to be the compiler version used to assemble the binary.
             * @example 3.1
             */
            platformVersion?: string;
            /**
             * @description The semantic version of the Yggdrasil engine used by the client. If the client is using a native engine this can be omitted.
             * @example 1.0.0
             */
            yggdrasilVersion?: string;
            /**
             * @description The version of the Unleash client specification the client supports
             * @example 3.0.0
             */
            specVersion?: string;
            /**
             * @description How often (in seconds) does the client refresh its toggles
             * @example 10
             */
            interval: number;
            /**
             * @description Either an RFC-3339 timestamp or a unix timestamp in seconds
             * @example 2023-06-13T16:35:00.000Z
             */
            started: string | number;
            /**
             * @description Which strategies the SDKs runtime knows about
             * @example [
             *       "default",
             *       "gradualRollout",
             *       "remoteAddress"
             *     ]
             */
            strategies: string[];
        };
        /** @description Feature flag configuration used by SDKs to evaluate state of a flag */
        clientFeatureSchema: {
            /**
             * @description The unique name of a feature flag. Is validated to be URL safe on creation
             * @example new.payment.flow.stripe
             */
            name: string;
            /**
             * @description What kind of feature flag is this. Refer to the documentation on [feature flag types](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types) for more information
             * @example release
             */
            type?: string;
            /**
             * @description A description of the flag
             * @example No variants here
             */
            description?: string | null;
            /**
             * @description Whether the feature flag is enabled for the current API key or not. This is ANDed with the evaluation results of the strategies list, so if this is false, the evaluation result will always be false
             * @example true
             */
            enabled: boolean;
            /**
             * @description If this is true Unleash believes this feature flag has been active longer than Unleash expects a flag of this type to be active
             * @example false
             */
            stale?: boolean;
            /**
             * @description Set to true if SDKs should trigger [impression events](https://docs.getunleash.io/reference/impression-data) when this flag is evaluated
             * @example false
             */
            impressionData?: boolean | null;
            /**
             * @description Which project this feature flag belongs to
             * @example new.payment.flow
             */
            project?: string;
            /** @description Evaluation strategies for this flag. Each entry in this list will be evaluated and ORed together */
            strategies?: components["schemas"]["featureStrategySchema"][];
            /** @description [Variants](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) configured for this flag */
            variants?: components["schemas"]["variantSchema"][] | null;
            /** @description Feature dependencies for this flag */
            dependencies?: components["schemas"]["dependentFeatureSchema"][];
        };
        /** @description Schema for delta updates of feature configurations. */
        clientFeaturesDeltaSchema: {
            /** @description A list of delta events. */
            events: ({
                eventId: number;
                /** @enum {string} */
                type: "feature-updated";
                feature: components["schemas"]["clientFeatureSchema"];
            } | {
                eventId: number;
                /** @enum {string} */
                type: "feature-removed";
                featureName: string;
                project: string;
            } | {
                eventId: number;
                /** @enum {string} */
                type: "segment-updated";
                segment: components["schemas"]["clientSegmentSchema"];
            } | {
                eventId: number;
                /** @enum {string} */
                type: "segment-removed";
                segmentId: number;
            } | {
                eventId: number;
                /** @enum {string} */
                type: "hydration";
                features: components["schemas"]["clientFeatureSchema"][];
                segments: components["schemas"]["clientSegmentSchema"][];
            })[];
        };
        /** @description Query parameters active for a client features request */
        clientFeaturesQuerySchema: {
            /**
             * @description Features tagged with one of these tags are included
             * @example [
             *       [
             *         "simple:payment",
             *         "simple:stripejourney"
             *       ]
             *     ]
             */
            tag?: string[][];
            /**
             * @deprecated
             * @description Features that are part of these projects are included in this response. This is now handled by API tokens and was marked as deprecated in v5
             * @example [
             *       "new.payment.flow"
             *     ]
             */
            project?: string[];
            /**
             * @description Features are filtered to only include features whose name starts with this prefix
             * @example payment
             */
            namePrefix?: string;
            /**
             * @deprecated
             * @description Strategies for the feature flag configured for this environment are included. This is now handled by API tokens and was marked as deprecated in v5
             */
            environment?: string;
            /**
             * @description Set to true if requesting client does not support Unleash-Client-Specification 4.2.2 or newer. Modern SDKs will have this set to false, since they will be able to merge constraints and segments themselves
             * @example true
             */
            inlineSegmentConstraints?: boolean;
        };
        /** @description Configuration data for backend SDKs for evaluating feature flags. */
        clientFeaturesSchema: {
            /**
             * @description A version number for the format used in the response. Most Unleash instances now return version 2, which includes segments as a separate array
             * @example 2
             */
            version: number;
            /** @description A list of feature flags with their configuration */
            features: components["schemas"]["clientFeatureSchema"][];
            /** @description A list of [Segments](https://docs.getunleash.io/reference/segments) configured for this Unleash instance */
            segments?: components["schemas"]["clientSegmentSchema"][];
            /** @description A summary of filters and parameters sent to the endpoint. Used by the server to build the features and segments response */
            query?: components["schemas"]["clientFeaturesQuerySchema"];
        };
        /** @description Used for reporting feature evaluation results from SDKs */
        clientMetricsEnvSchema: {
            /**
             * @description Name of the feature checked by the SDK
             * @example my.special.feature
             */
            featureName: string;
            /**
             * @description The name of the application the SDK is being used in
             * @example accounting
             */
            appName: string;
            /**
             * @description Which environment the SDK is being used in
             * @example development
             */
            environment: string;
            /**
             * @description The start of the time window these metrics are valid for. The window is 1 hour wide
             * @example 1926-05-08T12:00:00.000Z
             */
            timestamp?: components["schemas"]["dateSchema"];
            /**
             * @description How many times the toggle evaluated to true
             * @example 974
             */
            yes?: number;
            /**
             * @description How many times the toggle evaluated to false
             * @example 50
             */
            no?: number;
            /**
             * @description How many times each variant was returned
             * @example {
             *       "variantA": 15,
             *       "variantB": 25,
             *       "variantC": 5
             *     }
             */
            variants?: {
                [key: string]: number;
            };
        };
        /** @description Client usage metrics, accumulated in buckets of hour by hour by default */
        clientMetricsSchema: {
            /**
             * @description The name of the application that is evaluating toggles
             * @example insurance-selector
             */
            appName: string;
            /**
             * @description A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application
             * @example application-name-dacb1234
             */
            instanceId?: string;
            /**
             * @deprecated
             * @description Which environment the application is running in. This property was deprecated in v5. This can be determined by the API key calling this endpoint.
             * @example development
             */
            environment?: string;
            /**
             * @description An SDK version identifier. Usually formatted as "unleash-client-<language>:<version>"
             * @example unleash-client-java:7.0.0
             */
            sdkVersion?: string;
            /**
             * @description The platform the application is running on. For languages that compile to binaries, this can be omitted
             * @example .NET Core
             */
            platformName?: string;
            /**
             * @description The version of the platform the application is running on. Languages that compile to binaries, this is expected to be the compiler version used to assemble the binary.
             * @example 3.1
             */
            platformVersion?: string;
            /**
             * @description The semantic version of the Yggdrasil engine used by the client. If the client is using a native engine this can be omitted.
             * @example 1.0.0
             */
            yggdrasilVersion?: string;
            /**
             * @description The version of the Unleash client specification the client supports
             * @example 3.0.0
             */
            specVersion?: string;
            /** @description Holds all metrics gathered over a window of time. Typically 1 hour wide */
            bucket: {
                /**
                 * @description The start of the time window these metrics are valid for. The window is usually 1 hour wide
                 * @example 1926-05-08T12:00:00.000Z
                 */
                start: components["schemas"]["dateSchema"];
                /**
                 * @description The end of the time window these metrics are valid for. The window is 1 hour wide
                 * @example 1926-05-08T13:00:00.000Z
                 */
                stop: components["schemas"]["dateSchema"];
                /**
                 * @description an object containing feature names with yes/no plus variant usage
                 * @example {
                 *       "myCoolToggle": {
                 *         "yes": 25,
                 *         "no": 42,
                 *         "variants": {
                 *           "blue": 6,
                 *           "green": 15,
                 *           "red": 46
                 *         }
                 *       },
                 *       "myOtherToggle": {
                 *         "yes": 0,
                 *         "no": 100
                 *       }
                 *     }
                 */
                toggles: {
                    [key: string]: {
                        /**
                         * @description How many times the toggle evaluated to true
                         * @example 974
                         */
                        yes?: number;
                        /**
                         * @description How many times the toggle evaluated to false
                         * @example 50
                         */
                        no?: number;
                        /**
                         * @description An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).
                         * @example {
                         *       "variantA": 15,
                         *       "variantB": 25,
                         *       "variantC": 5
                         *     }
                         */
                        variants?: {
                            [key: string]: number;
                        };
                    };
                };
            };
        };
        /** @description Represents a client API segment of users defined by a set of constraints. */
        clientSegmentSchema: {
            /** @description The segment's id. */
            id: number;
            /**
             * @description The name of the segment.
             * @example segment A
             */
            name?: string;
            /** @description List of constraints that determine which users are part of the segment */
            constraints: components["schemas"]["constraintSchema"][];
        };
        /** @description Copy of a feature with a new name */
        cloneFeatureSchema: {
            /**
             * @description The name of the new feature
             * @example new-feature
             */
            name: string;
            /**
             * @description Whether to use the new feature name as its group ID or not. Group ID is used for calculating [stickiness](https://docs.getunleash.io/reference/stickiness#calculation). Defaults to true.
             * @example true
             */
            replaceGroupId?: boolean;
        };
        /** @description A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/activation-strategies#constraints) */
        constraintSchema: {
            /**
             * @description The name of the context field that this constraint should apply to.
             * @example appName
             */
            contextName: string;
            /**
             * @description The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/activation-strategies#constraint-operators).
             * @example IN
             * @enum {string}
             */
            operator: "NOT_IN" | "IN" | "STR_ENDS_WITH" | "STR_STARTS_WITH" | "STR_CONTAINS" | "NUM_EQ" | "NUM_GT" | "NUM_GTE" | "NUM_LT" | "NUM_LTE" | "DATE_AFTER" | "DATE_BEFORE" | "SEMVER_EQ" | "SEMVER_GT" | "SEMVER_LT";
            /**
             * @description Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
             * @default false
             */
            caseInsensitive: boolean;
            /**
             * @description Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
             * @default false
             */
            inverted: boolean;
            /**
             * @description The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
             * @example [
             *       "my-app",
             *       "my-other-app"
             *     ]
             */
            values?: string[];
            /**
             * @description The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
             * @example my-app
             */
            value?: string;
        };
        /** @description A representation of a [context field](https://docs.getunleash.io/reference/unleash-context). */
        contextFieldSchema: {
            /**
             * @description The name of the context field
             * @example userId
             */
            name: string;
            /**
             * @description The description of the context field.
             * @example Used to uniquely identify users
             */
            description?: string | null;
            /**
             * @description Does this context field support being used for [stickiness](https://docs.getunleash.io/reference/stickiness) calculations
             * @example true
             */
            stickiness?: boolean;
            /**
             * @description Used when sorting a list of context fields. Is also used as a tiebreaker if a list of context fields is sorted alphabetically.
             * @example 900
             */
            sortOrder?: number;
            /**
             * Format: date-time
             * @description When this context field was created
             * @example 2023-06-29T10:19:00.000Z
             */
            createdAt?: string | null;
            /**
             * @description Number of projects where this context field is used in
             * @example 3
             */
            usedInFeatures?: number | null;
            /**
             * @description Number of projects where this context field is used in
             * @example 2
             */
            usedInProjects?: number | null;
            /** @description Allowed values for this context field schema. Can be used to narrow down accepted input */
            legalValues?: components["schemas"]["legalValueSchema"][];
        };
        /** @description A wrapper object containing all strategies that use a specific context field */
        contextFieldStrategiesSchema: {
            /** @description List of strategies using the context field */
            strategies: {
                /**
                 * @description The ID of the strategy.
                 * @example 433ae8d9-dd69-4ad0-bc46-414aedbe9c55
                 */
                id: string;
                /**
                 * @description The name of the feature that contains this strategy.
                 * @example best-feature
                 */
                featureName: string;
                /** @description The ID of the project that contains this feature. */
                projectId: string;
                /** @description The ID of the environment where this strategy is in. */
                environment: string;
                /** @description The name of the strategy. */
                strategyName: string;
            }[];
        };
        /** @description A list of context fields */
        contextFieldsSchema: components["schemas"]["contextFieldSchema"][];
        /** @description The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys). */
        createApiTokenSchema: {
            /**
             * Format: date-time
             * @description The time when this token should expire.
             * @example 2023-07-04T11:26:24+02:00
             */
            expiresAt?: string;
            /**
             * @description A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
             * @example frontend
             */
            type: string;
            /**
             * @description The environment that the token should be valid for. Defaults to "default"
             * @example development
             */
            environment?: string;
            /**
             * @description The project that the token should be valid for. Defaults to "*" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
             * @example project-851
             */
            project?: string;
            /**
             * @description A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
             * @example [
             *       "project-851",
             *       "project-852"
             *     ]
             */
            projects?: string[];
            /**
             * @description The name of the token.
             * @example token-64522
             */
            tokenName: string;
        };
        /** @description Reported application information from Unleash SDKs */
        createApplicationSchema: {
            /**
             * @description Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
             * @example [
             *       "standard",
             *       "gradualRollout",
             *       "mySpecialCustomStrategy"
             *     ]
             */
            strategies?: string[];
            /**
             * @description A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
             * @example https://github.com/Unleash/unleash-proxy-client-js
             */
            url?: string;
            /**
             * @description Css color to be used to color the application's entry in the application list
             * @example red
             */
            color?: string;
            /**
             * @description An URL to an icon file to be used for the applications's entry in the application list
             * @example https://github.com/favicon.ico
             */
            icon?: string;
        };
        /** @description Data used to create a context field configuration. */
        createContextFieldSchema: {
            /**
             * @description A description of the context field
             * @example The user's subscription tier
             */
            description?: string;
            /**
             * @description `true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`
             * @example false
             */
            stickiness?: boolean;
            /**
             * @description How this context field should be sorted if no other sort order is selected
             * @example 2
             */
            sortOrder?: number;
            /**
             * @description A list of allowed values for this context field
             * @example [
             *       {
             *         "value": "gold"
             *       },
             *       {
             *         "value": "silver"
             *       },
             *       {
             *         "value": "crystal"
             *       }
             *     ]
             */
            legalValues?: components["schemas"]["legalValueSchema"][];
            /**
             * @description The name of the context field.
             * @example subscriptionTier
             */
            name: string;
        };
        /** @description Feature dependency on a parent feature in write model */
        createDependentFeatureSchema: {
            /**
             * @description The name of the feature we depend on.
             * @example parent_feature
             */
            feature: string;
            /**
             * @description Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.
             * @example false
             */
            enabled?: boolean;
            /**
             * @description The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.
             * @example [
             *       "variantA",
             *       "variantB"
             *     ]
             */
            variants?: string[];
        };
        /** @description Create a feature naming pattern */
        createFeatureNamingPatternSchema: {
            /**
             * @description A JavaScript regular expression pattern, without the start and end delimiters. Optional flags are not allowed.
             * @example ^[A-Za-z]+\.[A-Za-z]+\.[A-Za-z0-9-]+$
             */
            pattern: string | null;
            /**
             * @description An example of a feature name that matches the pattern. Must itself match the pattern supplied.
             * @example dx.feature.1-135
             */
            example?: string | null;
            /**
             * @description A description of the pattern in a human-readable format. Will be shown to users when they create a new feature flag.
             * @example <project>.<featureName>.<ticket>
             *
             *     The flag name should contain the project name, the feature name, and the ticket number, each separated by a dot.
             */
            description?: string | null;
        };
        /** @description Data used to create a new feature flag. */
        createFeatureSchema: {
            /**
             * @description Unique feature name
             * @example disable-comments
             */
            name: string;
            /**
             * @description The feature flag's [type](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types). One of experiment, kill-switch, release, operational, or permission
             * @example release
             * @enum {unknown}
             */
            type?: "experiment" | "kill-switch" | "release" | "operational" | "permission";
            /**
             * @description Detailed description of the feature
             * @example Controls disabling of the comments section in case of an incident
             */
            description?: string | null;
            /**
             * @description `true` if the impression data collection is enabled for the feature, otherwise `false`.
             * @example false
             */
            impressionData?: boolean;
            /** @description Tags to add to the feature. */
            tags?: components["schemas"]["tagSchema"][];
        };
        /** @description Create a strategy configuration in a feature */
        createFeatureStrategySchema: {
            /**
             * @description The name of the strategy type
             * @example flexibleRollout
             */
            name: string;
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs
             * @example false
             */
            disabled?: boolean | null;
            /**
             * @description The order of the strategy in the list
             * @example 9999
             */
            sortOrder?: number;
            /**
             * @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints
             * @example [
             *       {
             *         "values": [
             *           "1",
             *           "2"
             *         ],
             *         "inverted": false,
             *         "operator": "IN",
             *         "contextName": "appName",
             *         "caseInsensitive": false
             *       }
             *     ]
             */
            constraints?: components["schemas"]["constraintSchema"][];
            /** @description Strategy level variants */
            variants?: components["schemas"]["createStrategyVariantSchema"][];
            /**
             * @description An object containing the parameters for the strategy
             * @example {
             *       "groupId": "some_new",
             *       "rollout": "25",
             *       "stickiness": "sessionId"
             *     }
             */
            parameters?: components["schemas"]["parametersSchema"];
            /**
             * @description Ids of segments to use for this strategy
             * @example [
             *       1,
             *       2
             *     ]
             */
            segments?: number[];
        };
        /** @description A detailed information about a user group */
        createGroupSchema: {
            /**
             * @description The name of the group
             * @example DX team
             */
            name: string;
            /**
             * @description A custom description of the group
             * @example Current members of the DX squad
             */
            description?: string | null;
            /**
             * @description A list of SSO groups that should map to this Unleash group
             * @example [
             *       "SSOGroup1",
             *       "SSOGroup2"
             *     ]
             */
            mappingsSSO?: string[];
            /**
             * @description A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
             * @example 1
             */
            rootRole?: number | null;
            /** @description A list of users belonging to this group */
            users?: {
                /** @description A minimal user object */
                user: {
                    /**
                     * @description The user id
                     * @example 123
                     */
                    id: number;
                };
            }[];
        };
        /** @description Data used to create a user that has been invited to Unleash. */
        createInvitedUserSchema: {
            /**
             * @description The user's username. Must be unique if provided.
             * @example Hunter
             */
            username?: string;
            /**
             * @description The invited user's email address
             * @example hunter@example.com
             */
            email: string;
            /**
             * @description The user's name
             * @example Hunter Burgan
             */
            name: string;
            /**
             * @description The user's password
             * @example hunter2
             */
            password: string;
        };
        /** @description Describes the properties required to create a [personal access token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user. */
        createPatSchema: {
            /**
             * @description The PAT's description.
             * @example user:xyzrandomstring
             */
            description: string;
            /**
             * Format: date-time
             * @description The PAT's expiration date.
             * @example 2023-04-19T08:15:14.000Z
             */
            expiresAt: string;
        };
        /** @description The schema for creating a project API token. This schema is used to create a new project API token. */
        createProjectApiTokenSchema: {
            /**
             * @description A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
             * @example frontend
             */
            type: string;
            /**
             * @description The environment that the token should be valid for. Defaults to "default".
             * @default default
             * @example development
             */
            environment: string;
            /**
             * Format: date-time
             * @description The date and time when the token should expire. The date should be in ISO 8601 format.
             * @example 2023-10-01T00:00:00Z
             */
            expiresAt?: string;
            /**
             * @description A unique name for this particular token
             * @example some-user
             */
            tokenName: string;
        };
        /** @description The data required to create a strategy type. Refer to the docs on [custom strategy types](https://docs.getunleash.io/reference/custom-activation-strategies) for more information. */
        createStrategySchema: {
            /**
             * @description The name of the strategy type. Must be unique.
             * @example my-custom-strategy
             */
            name: string;
            /**
             * @description The title of the strategy
             * @example My awesome strategy
             */
            title?: string;
            /**
             * @description A description of the strategy type.
             * @example Enable the feature for users who have not logged in before.
             */
            description?: string;
            /**
             * @description Whether the strategy type is editable or not. Defaults to `true`.
             * @example false
             */
            editable?: boolean;
            /**
             * @description Whether the strategy type is deprecated or not. Defaults to `false`.
             * @example true
             */
            deprecated?: boolean;
            /** @description The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation. */
            parameters: {
                /**
                 * @description The name of the parameter
                 * @example Rollout percentage
                 */
                name: string;
                /**
                 * @description The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
                 * @example percentage
                 * @enum {string}
                 */
                type: "string" | "percentage" | "list" | "number" | "boolean";
                /**
                 * @description A description of this strategy parameter. Use this to indicate to the users what the parameter does.
                 * @example How many percent of users should see this feature?
                 */
                description?: string;
                /**
                 * @description Whether this parameter must be configured when using the strategy. Defaults to `false`
                 * @example false
                 */
                required?: boolean;
            }[];
        };
        /** @description This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants. */
        createStrategyVariantSchema: {
            /**
             * @description The variant name. Must be unique for this feature flag
             * @example blue_group
             */
            name: string;
            /** @description The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information */
            weight: number;
            /**
             * @description Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
             * @example fix
             * @enum {string}
             */
            weightType: "variable" | "fix";
            /**
             * @description The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
             * @example custom.context.field
             */
            stickiness: string;
            /**
             * @description Extra data configured for this variant
             * @example {
             *       "type": "json",
             *       "value": "{\"color\": \"red\"}"
             *     }
             */
            payload?: {
                /**
                 * @description The type of the value. Commonly used types are string, number, json and csv.
                 * @enum {string}
                 */
                type: "json" | "csv" | "string" | "number";
                /** @description The actual value of payload */
                value: string;
            };
        };
        /** @description Data used to create a new [tag](https://docs.getunleash.io/reference/feature-toggles#tags) */
        createTagSchema: {
            /**
             * @description The value of the tag. The value must be between 2 and 50 characters long. Leading and trailing whitespace is ignored and will be trimmed before saving the tag value.
             * @example a-tag-value
             */
            value: string;
            /**
             * @description The [type](https://docs.getunleash.io/reference/feature-toggles#tags) of the tag
             * @example simple
             */
            type: string;
            /**
             * @description The hexadecimal color code for the tag type.
             * @example #FFFFFF
             */
            color?: string | null;
        };
        /** @description An Unleash user after creation */
        createUserResponseSchema: {
            /**
             * @description The user id
             * @example 123
             */
            id: number;
            /**
             * @description Name of the user
             * @example User
             */
            name?: string | null;
            /**
             * @description Email of the user
             * @example user@example.com
             */
            email?: string;
            /**
             * @description A unique username for the user
             * @example hunter
             */
            username?: string | null;
            /**
             * @description URL used for the user profile image
             * @example https://example.com/242x200.png
             */
            imageUrl?: string;
            /**
             * @description If the user is actively inviting other users, this is the link that can be shared with other users
             * @example http://localhost:4242/invite-link/some-secret
             */
            inviteLink?: string;
            /**
             * @description How many unsuccessful attempts at logging in has the user made
             * @example 3
             */
            loginAttempts?: number;
            /**
             * @description Is the welcome email sent to the user or not
             * @example false
             */
            emailSent?: boolean;
            /** @description Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role. */
            rootRole?: number | ("Admin" | "Editor" | "Viewer" | "Owner" | "Member");
            /**
             * Format: date-time
             * @description The last time this user logged in
             * @example 2023-06-30T11:42:00.345Z
             */
            seenAt?: string | null;
            /**
             * Format: date-time
             * @description The user was created at this time
             * @example 2023-06-30T11:41:00.123Z
             */
            createdAt?: string;
            /**
             * @description A user is either an actual User or a Service Account
             * @example User
             * @enum {string}
             */
            accountType?: "User" | "Service Account";
            /** @description Deprecated */
            permissions?: string[];
            /**
             * @description The SCIM ID of the user, only present if managed by SCIM
             * @example 01HTMEXAMPLESCIMID7SWWGHN6
             */
            scimId?: string | null;
            /**
             * @description Count of active browser sessions for this user
             * @example 2
             */
            activeSessions?: number | null;
            /**
             * @description Experimental. The number of deleted browser sessions after last login
             * @example 1
             */
            deletedSessions?: number;
        };
        /** @description The payload must contain at least one of the name and email properties, though which one is up to you. For the user to be able to log in to the system, the user must have an email. */
        createUserSchema: {
            /**
             * @description The user's username. Must be provided if email is not provided.
             * @example hunter
             */
            username?: string;
            /**
             * @description The user's email address. Must be provided if username is not provided.
             * @example user@example.com
             */
            email?: string;
            /**
             * @description The user's name (not the user's username).
             * @example Sam Seawright
             */
            name?: string;
            /**
             * @description Password for the user
             * @example k!5As3HquUrQ
             */
            password?: string;
            /** @description The role to assign to the user. Can be either the role's ID or its unique name. */
            rootRole: number | ("Admin" | "Editor" | "Viewer" | "Owner" | "Member");
            /**
             * @description Whether to send a welcome email with a login link to the user or not. Defaults to `true`.
             * @example false
             */
            sendEmail?: boolean;
        };
        /** @description A custom metric with name, value and optional labels */
        customMetricSchema: {
            /**
             * @description Name of the custom metric
             * @example http_responses_total
             */
            name: string;
            /**
             * @description Value of the custom metric
             * @example 1
             */
            value: number;
            /**
             * @description Labels to categorize the metric
             * @example {
             *       "status": "200",
             *       "method": "GET"
             *     }
             */
            labels?: {
                [key: string]: string;
            };
        };
        /** @description A collection of custom metrics */
        customMetricsSchema: {
            /** @description Array of custom metrics */
            metrics: components["schemas"]["customMetricSchema"][];
        };
        /** @description A representation of a date. Either as a date-time string or as a UNIX timestamp. */
        dateSchema: string | number;
        /** @description `true` when any dependencies exist, `false` when no dependencies exist. */
        dependenciesExistSchema: boolean;
        /** @description Feature dependency on a parent feature in read model */
        dependentFeatureSchema: {
            /**
             * @description The name of the feature we depend on.
             * @example parent_feature
             */
            feature: string;
            /**
             * @description Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.
             * @example false
             */
            enabled?: boolean;
            /**
             * @description The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.
             * @example [
             *       "variantA",
             *       "variantB"
             *     ]
             */
            variants?: string[];
        };
        /** @description The representation of a dora time to production feature metric */
        doraFeaturesSchema: {
            /** @description The name of a feature flag */
            name: string;
            /** @description The average number of days it takes a feature flag to get into production */
            timeToProduction: number;
        };
        /** @description A representation of a client token, limiting access to [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#backend-tokens) (used by serverside SDKs) or [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#frontend-tokens) (used by proxy SDKs) */
        edgeTokenSchema: {
            /**
             * @description The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as [`*`]
             * @example [
             *       "developerexperience",
             *       "enterprisegrowth"
             *     ]
             */
            projects: string[];
            /**
             * @description The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#backend-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#frontend-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with
             * @example client
             * @enum {string}
             */
            type: "client" | "admin" | "frontend";
            /**
             * @description The actual token value. [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) are comprised of three parts. <project(s)>:<environment>.randomcharacters
             * @example *:development.5c806b5320c88cf27e81f3e9b97dab298a77d5879316e3c2d806206b
             */
            token: string;
        };
        /** @description Represents the email of a user. Used to send email communication (reset password, welcome mail etc) */
        emailSchema: {
            /**
             * @description The email address
             * @example test@example.com
             */
            email: string;
        };
        /** @description Describes a project's configuration in a given environment. */
        environmentProjectSchema: {
            /**
             * @description The name of the environment
             * @example development
             */
            name: string;
            /**
             * @description The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).
             * @example production
             */
            type: string;
            /**
             * @description `true` if the environment is enabled for the project, otherwise `false`
             * @example true
             */
            enabled: boolean;
            /**
             * @description `true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted.
             * @example false
             */
            protected: boolean;
            /**
             * @description Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear
             * @example 1
             */
            sortOrder: number;
            /**
             * @description The number of client and front-end API tokens that have access to this project
             * @example 5
             */
            projectApiTokenCount?: number;
            /**
             * @description The number of features enabled in this environment for this project
             * @example 7
             */
            projectEnabledToggleCount?: number;
            /** @description The strategy configuration to add when enabling a feature environment by default */
            defaultStrategy?: components["schemas"]["featureStrategySchema"];
            /**
             * @description Indicates whether the environment can be enabled for feature flags in the project
             * @example true
             */
            visible?: boolean;
            /**
             * @description Experimental field. The number of approvals required before a change request can be applied in this environment.
             * @example 3
             */
            requiredApprovals?: number | null;
        };
        /** @description A definition of the project environment */
        environmentSchema: {
            /**
             * @description The name of the environment
             * @example my-dev-env
             */
            name: string;
            /**
             * @description The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).
             * @example development
             */
            type: string;
            /**
             * @description `true` if the environment is enabled for the project, otherwise `false`.
             * @example true
             */
            enabled: boolean;
            /**
             * @description `true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted.
             * @example true
             */
            protected: boolean;
            /**
             * @description Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear. Needs to be an integer
             * @example 3
             */
            sortOrder: number;
            /**
             * @description The number of projects with this environment
             * @example 10
             */
            projectCount?: number | null;
            /**
             * @description The number of API tokens for the project environment
             * @example 6
             */
            apiTokenCount?: number | null;
            /**
             * @description The number of enabled toggles for the project environment
             * @example 10
             */
            enabledToggleCount?: number | null;
            /**
             * @description Experimental field. The number of approvals required before a change request can be applied in this environment.
             * @example 3
             */
            requiredApprovals?: number | null;
        };
        /** @description Environments defined for a given project */
        environmentsProjectSchema: {
            /**
             * @description Version of the environments schema
             * @example 1
             */
            version: number;
            /** @description List of environments */
            environments: components["schemas"]["environmentProjectSchema"][];
        };
        /** @description A versioned list of environments */
        environmentsSchema: {
            /**
             * @description Version of the environments schema
             * @example 1
             */
            version: number;
            /** @description List of environments */
            environments: components["schemas"]["environmentSchema"][];
        };
        /** @description A list of event creators */
        eventCreatorsSchema: {
            /**
             * @description The user id.
             * @example 50
             */
            id: number;
            /**
             * @description Name of the user. If the user has no set name, the API falls back to using the user's username (if they have one) or email (if neither name or username is set).
             * @example User
             */
            name: string;
        }[];
        /** @description An event describing something happening in the system */
        eventSchema: {
            /** @description The ID of the event. An increasing natural number. */
            id: number;
            /**
             * Format: date-time
             * @description The time the event happened as a RFC 3339-conformant timestamp.
             * @example 2023-07-05T12:56:00.000Z
             */
            createdAt: string;
            /**
             * @description What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is
             * @example feature-created
             * @enum {string}
             */
            type: "application-created" | "feature-created" | "feature-deleted" | "feature-updated" | "feature-metadata-updated" | "feature-variants-updated" | "feature-environment-variants-updated" | "feature-project-change" | "feature-archived" | "feature-revived" | "feature-import" | "feature-tagged" | "feature-tag-import" | "feature-strategy-update" | "feature-strategy-add" | "feature-strategy-remove" | "feature-type-updated" | "feature-completed" | "feature-uncompleted" | "feature-link-added" | "feature-link-removed" | "feature-link-updated" | "strategy-order-changed" | "drop-feature-tags" | "feature-untagged" | "feature-stale-on" | "feature-stale-off" | "drop-features" | "feature-environment-enabled" | "feature-environment-disabled" | "strategy-created" | "strategy-deleted" | "strategy-deprecated" | "strategy-reactivated" | "strategy-updated" | "strategy-import" | "drop-strategies" | "context-field-created" | "context-field-updated" | "context-field-deleted" | "project-access-added" | "project-access-user-roles-updated" | "project-access-group-roles-updated" | "project-access-user-roles-deleted" | "project-access-group-roles-deleted" | "project-access-updated" | "project-created" | "project-updated" | "project-deleted" | "project-archived" | "project-revived" | "project-import" | "project-user-added" | "project-user-removed" | "project-user-role-changed" | "project-group-added" | "role-created" | "role-updated" | "role-deleted" | "drop-projects" | "tag-created" | "tag-deleted" | "tag-import" | "drop-tags" | "tag-type-created" | "tag-type-deleted" | "tag-type-updated" | "tag-type-import" | "drop-tag-types" | "addon-config-created" | "addon-config-updated" | "addon-config-deleted" | "db-pool-update" | "user-created" | "user-updated" | "user-deleted" | "drop-environments" | "environment-import" | "environment-created" | "environment-updated" | "environment-deleted" | "segment-created" | "segment-updated" | "segment-deleted" | "group-created" | "group-updated" | "group-deleted" | "group-user-added" | "group-user-removed" | "setting-created" | "setting-updated" | "setting-deleted" | "client-metrics" | "client-register" | "pat-created" | "pat-deleted" | "public-signup-token-created" | "public-signup-token-user-added" | "public-signup-token-updated" | "change-request-created" | "change-request-discarded" | "change-added" | "change-discarded" | "change-edited" | "change-request-rejected" | "change-request-approved" | "change-request-approval-added" | "change-request-cancelled" | "change-request-sent-to-review" | "change-request-schedule-suspended" | "change-request-applied" | "change-request-scheduled" | "change-request-scheduled-application-success" | "change-request-scheduled-application-failure" | "change-request-configuration-updated" | "api-token-created" | "api-token-updated" | "api-token-deleted" | "feature-favorited" | "feature-unfavorited" | "project-favorited" | "project-unfavorited" | "features-exported" | "features-imported" | "service-account-created" | "service-account-deleted" | "service-account-updated" | "feature-potentially-stale-on" | "feature-dependency-added" | "feature-dependency-removed" | "feature-dependencies-removed" | "banner-created" | "banner-updated" | "banner-deleted" | "project-environment-added" | "project-environment-removed" | "default-strategy-updated" | "segment-import" | "signal-endpoint-created" | "signal-endpoint-updated" | "signal-endpoint-deleted" | "signal-endpoint-token-created" | "signal-endpoint-token-updated" | "signal-endpoint-token-deleted" | "actions-created" | "actions-updated" | "actions-deleted" | "release-plan-template-created" | "release-plan-template-updated" | "release-plan-template-deleted" | "release-plan-template-archived" | "release-plan-added" | "release-plan-removed" | "release-plan-milestone-started" | "user-preference-updated" | "scim-users-deleted" | "scim-groups-deleted" | "cdn-token-created" | "change-request-requested-approvers-updated";
            /**
             * @description Which user created this event
             * @example johndoe
             */
            createdBy: string;
            /**
             * @description The is of the user that created this event
             * @example 1337
             */
            createdByUserId?: number | null;
            /**
             * @description The feature flag environment the event relates to, if applicable.
             * @example development
             */
            environment?: string | null;
            /**
             * @description The project the event relates to, if applicable.
             * @example default
             */
            project?: string | null;
            /**
             * @description The name of the feature flag the event relates to, if applicable.
             * @example my.first.feature
             */
            featureName?: string | null;
            /**
             * @description Extra associated data related to the event, such as feature flag state, segment configuration, etc., if applicable.
             * @example {
             *       "name": "new-feature",
             *       "description": "Flag description",
             *       "type": "release",
             *       "project": "my-project",
             *       "stale": false,
             *       "variants": [],
             *       "createdAt": "2022-05-31T13:32:20.547Z",
             *       "lastSeenAt": null,
             *       "impressionData": true
             *     }
             */
            data?: Record<string, never> | null;
            /**
             * @description Data relating to the previous state of the event's subject.
             * @example {
             *       "name": "new-feature",
             *       "description": "Flag description",
             *       "type": "release",
             *       "project": "my-project",
             *       "stale": false,
             *       "variants": [],
             *       "createdAt": "2022-05-31T13:32:20.547Z",
             *       "lastSeenAt": null,
             *       "impressionData": true
             *     }
             */
            preData?: Record<string, never> | null;
            /** @description Any tags related to the event, if applicable. */
            tags?: components["schemas"]["tagSchema"][] | null;
            /** @description The concise, human-readable name of the event. */
            label?: string | null;
            /** @description A markdown-formatted summary of the event. */
            summary?: string | null;
            /**
             * @description The IP address of the user that created the event. Only available in Enterprise.
             * @example 192.168.1.1
             */
            ip?: string | null;
            /**
             * @description The type of transaction group this event belongs to, if applicable.
             * @example change-request
             */
            groupType?: string;
            /**
             * @description The unique identifier for the transaction group this event belongs to, if applicable.
             * @example 01HQVX5K8P9EXAMPLE123456
             */
            groupId?: string;
        };
        /** @description A list of events that have been registered by the system */
        eventSearchResponseSchema: {
            /** @description The list of events */
            events: components["schemas"]["eventSchema"][];
            /**
             * @description The total count of events
             * @example 842
             */
            total: number;
        };
        /** @description A list of events that has happened in the system */
        eventsSchema: {
            /**
             * @description The api version of this response. A natural increasing number. Only increases if format changes
             * @example 1
             * @enum {integer}
             */
            version: 1;
            /** @description The list of events */
            events: components["schemas"]["eventSchema"][];
            /**
             * @description The total count of events
             * @example 842
             */
            totalEvents?: number;
        };
        /** @description Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality. */
        exportQuerySchema: {
            /**
             * @description The environment to export from
             * @example development
             */
            environment: string;
            /**
             * @description Whether to return a downloadable file
             * @example true
             */
            downloadFile?: boolean;
            /**
             * @description Selects features to export by name. If the list is empty all features are returned.
             * @example [
             *       "MyAwesomeFeature"
             *     ]
             */
            features: string[];
        } | {
            /**
             * @description The environment to export from
             * @example development
             */
            environment: string;
            /**
             * @description Whether to return a downloadable file
             * @example true
             */
            downloadFile?: boolean;
            /**
             * @description Selects features to export by tag.
             * @example release
             */
            tag: string;
        } | {
            /**
             * @description The environment to export from
             * @example development
             */
            environment: string;
            /**
             * @description Whether to return a downloadable file
             * @example true
             */
            downloadFile?: boolean;
            /**
             * @description Selects project to export the features from. Used when no tags or features are provided.
             * @example my-project
             */
            project: string;
        };
        /** @description The result of the export operation, providing you with the feature flag definitions, strategy definitions and the rest of the elements relevant to the features (tags, environments etc.) */
        exportResultSchema: {
            /**
             * @description All the exported features.
             * @example [
             *       {
             *         "name": "my-feature",
             *         "description": "best feature ever",
             *         "type": "release",
             *         "project": "default",
             *         "stale": false,
             *         "impressionData": false,
             *         "archived": false
             *       }
             *     ]
             */
            features: components["schemas"]["featureSchema"][];
            /**
             * @description All strategy instances that are used by the exported features in the `features` list.
             * @example [
             *       {
             *         "name": "flexibleRollout",
             *         "id": "924974d7-8003-43ee-87eb-c5f887c06fd1",
             *         "featureName": "my-feature",
             *         "title": "Rollout 50%",
             *         "parameters": {
             *           "groupId": "default",
             *           "rollout": "50",
             *           "stickiness": "random"
             *         },
             *         "constraints": [],
             *         "disabled": false,
             *         "segments": [
             *           1
             *         ]
             *       }
             *     ]
             */
            featureStrategies: components["schemas"]["featureStrategySchema"][];
            /**
             * @description Environment-specific configuration for all the features in the `features` list. Includes data such as whether the feature is enabled in the selected export environment, whether there are any variants assigned, etc.
             * @example [
             *       {
             *         "enabled": true,
             *         "featureName": "my-feature",
             *         "environment": "development",
             *         "variants": [
             *           {
             *             "name": "a",
             *             "weight": 500,
             *             "overrides": [],
             *             "stickiness": "random",
             *             "weightType": "variable"
             *           },
             *           {
             *             "name": "b",
             *             "weight": 500,
             *             "overrides": [],
             *             "stickiness": "random",
             *             "weightType": "variable"
             *           }
             *         ],
             *         "name": "variant-testing"
             *       }
             *     ]
             */
            featureEnvironments?: components["schemas"]["featureEnvironmentSchema"][];
            /**
             * @description A list of all the context fields that are in use by any of the strategies in the `featureStrategies` list.
             * @example [
             *       {
             *         "name": "appName",
             *         "description": "Allows you to constrain on application name",
             *         "stickiness": false,
             *         "sortOrder": 2,
             *         "legalValues": []
             *       }
             *     ]
             */
            contextFields?: components["schemas"]["contextFieldSchema"][];
            /**
             * @description A list of all the tags that have been applied to any of the features in the `features` list.
             * @example [
             *       {
             *         "featureName": "my-feature",
             *         "tagType": "simple",
             *         "tagValue": "user-facing"
             *       }
             *     ]
             */
            featureTags?: components["schemas"]["featureTagSchema"][];
            /**
             * @description A list of all the segments that are used by the strategies in the `featureStrategies` list.
             * @example [
             *       {
             *         "id": 1,
             *         "name": "new-segment-name"
             *       }
             *     ]
             */
            segments?: {
                id: number;
                name: string;
            }[];
            /**
             * @description A list of all of the tag types that are used in the `featureTags` list.
             * @example [
             *       {
             *         "name": "simple",
             *         "description": "Used to simplify filtering of features",
             *         "icon": "#"
             *       }
             *     ]
             */
            tagTypes: components["schemas"]["tagTypeSchema"][];
            /** @description A list of all the dependencies for features in `features` list. */
            dependencies?: components["schemas"]["featureDependenciesSchema"][];
            /** @description A list of links for features in `features` list. */
            links?: components["schemas"]["featureLinksSchema"][];
        };
        /** @description Feature dependency connection between a child feature and its dependencies */
        featureDependenciesSchema: {
            /**
             * @description The name of the child feature.
             * @example child_feature
             */
            feature: string;
            /** @description List of parent features for the child feature */
            dependencies: components["schemas"]["dependentFeatureSchema"][];
        };
        /** @description How many times `feautreName` was evaluated to `true` (yes) and `false` (no) for `appName` in `environmnet` */
        featureEnvironmentMetricsSchema: {
            /**
             * @description The name of the feature
             * @example my.special.feature
             */
            featureName?: string;
            /**
             * @description The name of the application the SDK is being used in
             * @example accounting
             */
            appName?: string;
            /**
             * @description Which environment the SDK is being used in
             * @example development
             */
            environment: string;
            /**
             * @description The start of the time window these metrics are valid for. The window is usually 1 hour wide
             * @example 1926-05-08T12:00:00.000Z
             */
            timestamp: components["schemas"]["dateSchema"];
            /**
             * @description How many times the toggle evaluated to true
             * @example 974
             */
            yes: number;
            /**
             * @description How many times the toggle evaluated to false
             * @example 50
             */
            no: number;
            /**
             * @description How many times each variant was returned
             * @example {
             *       "variantA": 15,
             *       "variantB": 25,
             *       "variantC": 5
             *     }
             */
            variants?: {
                [key: string]: number;
            };
        };
        /** @description A detailed description of the feature environment */
        featureEnvironmentSchema: {
            /**
             * @description The name of the environment
             * @example my-dev-env
             */
            name: string;
            /**
             * @description The name of the feature
             * @example disable-comments
             */
            featureName?: string;
            /**
             * @description The name of the environment
             * @example development
             */
            environment?: string;
            /**
             * @description The type of the environment
             * @example development
             */
            type?: string;
            /**
             * @description `true` if the feature is enabled for the environment, otherwise `false`.
             * @example true
             */
            enabled: boolean;
            /**
             * @description The sort order of the feature environment in the feature environments list
             * @example 3
             */
            sortOrder?: number;
            /** @description The number of defined variants */
            variantCount?: number;
            /** @description A list of activation strategies for the feature environment */
            strategies?: components["schemas"]["featureStrategySchema"][];
            /** @description A list of variants for the feature environment */
            variants?: components["schemas"]["variantSchema"][];
            /** @description Experimental. A list of change request identifiers for actionable change requests that are not Cancelled, Rejected or Approved. */
            changeRequestIds?: number[];
            /**
             * @description Experimental: The name of the currently active release plan milestone
             * @example Phase One
             */
            milestoneName?: string;
            /**
             * @description Experimental: The zero-indexed order of currently active milestone in the list of all release plan milestones
             * @example 0
             */
            milestoneOrder?: number;
            /**
             * @description Experimental: The total number of milestones in the feature environment release plan
             * @example 0
             */
            totalMilestones?: number;
            /**
             * Format: date-time
             * @description The date when metrics where last collected for the feature environment
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt?: string | null;
            /** @description Whether the feature has any strategies defined. */
            hasStrategies?: boolean;
            /** @description Whether the feature has any enabled strategies defined. */
            hasEnabledStrategies?: boolean;
        };
        /** @description One or more events happening to a specific feature flag */
        featureEventsSchema: {
            /**
             * @description An API versioning number
             * @example 1
             * @enum {integer}
             */
            version?: 1;
            /**
             * @description The name of the feature flag these events relate to
             * @example my.first.feature.flag
             */
            toggleName?: string;
            /** @description The list of events */
            events: components["schemas"]["eventSchema"][];
            /**
             * @description How many events are there for this feature flag
             * @example 13
             */
            totalEvents?: number;
        };
        /** @description A feature that has been marked as completed */
        featureLifecycleCompletedSchema: {
            /**
             * @description The status of the feature after it has been marked as completed
             * @example kept
             * @enum {string}
             */
            status: "kept" | "discarded";
            /**
             * @description The metadata value passed in together with status
             * @example variant1
             */
            statusValue?: string;
        };
        /** @description A number features in each of the lifecycle stages */
        featureLifecycleCountSchema: {
            /**
             * @description Number of features in the initial stage
             * @example 1
             */
            initial: number;
            /**
             * @description Number of features in the pre-live stage
             * @example 1
             */
            preLive: number;
            /**
             * @description Number of features in the live stage
             * @example 1
             */
            live: number;
            /**
             * @description Number of features in the completed stage
             * @example 1
             */
            completed: number;
            /**
             * @description Number of features in the archived stage
             * @example 1
             */
            archived: number;
        };
        /** @description A list of lifecycle stages for a given feature */
        featureLifecycleSchema: {
            /**
             * @description The name of the lifecycle stage that got recorded for a given feature
             * @example initial
             * @enum {string}
             */
            stage: "initial" | "pre-live" | "live" | "completed" | "archived";
            /**
             * @description The name of the detailed status of a given stage. E.g. completed stage can be kept or discarded.
             * @example kept
             */
            status?: string;
            /**
             * Format: date-time
             * @description The date when the feature entered a given stage
             * @example 2023-01-28T16:21:39.975Z
             */
            enteredStageAt: string;
        }[];
        /** @description The link to any URL related to the feature */
        featureLinkSchema: {
            /**
             * @description The URL the feature is linked to
             * @example https://github.com/search?q=cleanupReminder&type=code
             */
            url: string;
            /**
             * @description The description of the link
             * @example Github cleanup
             */
            title?: string | null;
        };
        /** @description A list of links for a feature */
        featureLinksSchema: {
            /**
             * @description The name of the child feature.
             * @example child_feature
             */
            feature: string;
            /** @description List of feature links */
            links: components["schemas"]["featureLinkSchema"][];
        };
        /** @description A batch of feature metrics */
        featureMetricsSchema: {
            /** @description The version of this schema */
            version: number;
            /**
             * @description The maturity level of this API (alpha, beta, stable, deprecated)
             * @example stable
             */
            maturity: string;
            /** @description Metrics gathered per environment */
            data: components["schemas"]["featureEnvironmentMetricsSchema"][];
        };
        /** @description A feature flag definition */
        featureSchema: {
            /**
             * @description Unique feature name
             * @example disable-comments
             */
            name: string;
            /**
             * @description Type of the flag e.g. experiment, kill-switch, release, operational, permission
             * @example kill-switch
             */
            type?: string;
            /**
             * @description Detailed description of the feature
             * @example Controls disabling of the comments section in case of an incident
             */
            description?: string | null;
            /**
             * @description `true` if the feature is archived
             * @example true
             */
            archived?: boolean;
            /**
             * @description Name of the project the feature belongs to
             * @example dx-squad
             */
            project?: string;
            /**
             * @description `true` if the feature is enabled, otherwise `false`.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description `true` if the feature is stale based on the age and feature type, otherwise `false`.
             * @example false
             */
            stale?: boolean;
            /**
             * @description `true` if the feature was favorited, otherwise `false`.
             * @example true
             */
            favorite?: boolean;
            /**
             * @description `true` if the impression data collection is enabled for the feature, otherwise `false`.
             * @example false
             */
            impressionData?: boolean;
            /**
             * Format: date-time
             * @description The date the feature was created
             * @example 2023-01-28T15:21:39.975Z
             */
            createdAt?: string | null;
            /** @description User who created the feature flag */
            createdBy?: {
                /**
                 * @description The user id
                 * @example 123
                 */
                id: number;
                /**
                 * @description Name of the user
                 * @example User
                 */
                name: string;
                /**
                 * @description URL used for the user profile image
                 * @example https://example.com/242x200.png
                 */
                imageUrl: string;
            };
            /**
             * Format: date-time
             * @description The date the feature was archived
             * @example 2023-01-29T15:21:39.975Z
             */
            archivedAt?: string | null;
            /**
             * Format: date-time
             * @deprecated
             * @description The date when metrics where last collected for the feature. This field was deprecated in v5, use the one in featureEnvironmentSchema
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt?: string | null;
            /** @description The list of environments where the feature can be used */
            environments?: components["schemas"]["featureEnvironmentSchema"][];
            /**
             * @deprecated
             * @description The list of feature variants
             */
            variants?: components["schemas"]["variantSchema"][];
            /**
             * @deprecated
             * @description This was deprecated in v5 and will be removed in a future major version
             */
            strategies?: Record<string, never>[];
            /** @description The list of feature tags */
            tags?: components["schemas"]["tagSchema"][] | null;
            /** @description The list of child feature names. This is an experimental field and may change. */
            children?: string[];
            /** @description Current lifecycle stage of the feature */
            lifecycle?: {
                /**
                 * @description The name of the current lifecycle stage
                 * @example initial
                 * @enum {string}
                 */
                stage: "initial" | "pre-live" | "live" | "completed" | "archived";
                /**
                 * Format: date-time
                 * @description When the feature entered this stage
                 * @example 2023-01-28T15:21:39.975Z
                 */
                enteredStageAt: string;
            };
            /** @description The list of parent dependencies. This is an experimental field and may change. */
            dependencies?: {
                /**
                 * @description The name of the parent feature
                 * @example some-feature
                 */
                feature: string;
                /**
                 * @description Whether the parent feature is enabled or not
                 * @example true
                 */
                enabled?: boolean;
                /** @description The list of variants the parent feature should resolve to. Only valid when feature is enabled. */
                variants?: string[];
            }[];
            /** @description Information related to users who have made changes to this feature flage. */
            collaborators?: {
                /** @description Users who have made any changes to this feature flags. The list is sorted in reverse chronological order (most recent changes first) */
                users: {
                    /**
                     * @description The user's id
                     * @example 123
                     */
                    id: number;
                    /**
                     * @description The user's name, username, or email (prioritized in that order). If none of those are present, this property will be set to the string `unknown`
                     * @example User
                     */
                    name: string;
                    /**
                     * @description The URL to the user's profile image
                     * @example https://example.com/242x200.png
                     */
                    imageUrl: string;
                }[];
            };
            /** @description The list of links. This is an experimental field and may change. */
            links?: {
                /**
                 * @description The id of the link
                 * @example 01JTJNCJ5XVP2KPJFA03YRBZCA
                 */
                id: string;
                /**
                 * @description The URL the feature is linked to
                 * @example https://github.com/search?q=cleanupReminder&type=code
                 */
                url: string;
                /**
                 * @description The description of the link
                 * @example Github cleanup
                 */
                title?: string | null;
            }[];
        };
        /** @description A detailed description of the feature environment */
        featureSearchEnvironmentSchema: {
            /**
             * @description The name of the environment
             * @example my-dev-env
             */
            name: string;
            /**
             * @description The name of the feature
             * @example disable-comments
             */
            featureName?: string;
            /**
             * @description The name of the environment
             * @example development
             */
            environment?: string;
            /**
             * @description The type of the environment
             * @example development
             */
            type: string;
            /**
             * @description `true` if the feature is enabled for the environment, otherwise `false`.
             * @example true
             */
            enabled: boolean;
            /**
             * @description The sort order of the feature environment in the feature environments list
             * @example 3
             */
            sortOrder?: number;
            /** @description The number of defined variants */
            variantCount?: number;
            /** @description A list of activation strategies for the feature environment */
            strategies?: components["schemas"]["featureStrategySchema"][];
            /** @description A list of variants for the feature environment */
            variants?: components["schemas"]["variantSchema"][];
            /** @description Experimental. A list of change request identifiers for actionable change requests that are not Cancelled, Rejected or Approved. */
            changeRequestIds?: number[];
            /**
             * @description Experimental: The name of the currently active release plan milestone
             * @example Phase One
             */
            milestoneName?: string;
            /**
             * @description Experimental: The zero-indexed order of currently active milestone in the list of all release plan milestones
             * @example 0
             */
            milestoneOrder?: number;
            /**
             * @description Experimental: The total number of milestones in the feature environment release plan
             * @example 0
             */
            totalMilestones?: number;
            /**
             * Format: date-time
             * @description The date when metrics where last collected for the feature environment
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt?: string | null;
            /** @description Whether the feature has any strategies defined. */
            hasStrategies?: boolean;
            /** @description Whether the feature has any enabled strategies defined. */
            hasEnabledStrategies?: boolean;
            /**
             * @description How many times the toggle evaluated to true in last hour bucket
             * @example 974
             */
            yes?: number;
            /**
             * @description How many times the toggle evaluated to false in last hour bucket
             * @example 50
             */
            no?: number;
        };
        /** @description A feature flag definition */
        featureSearchResponseSchema: {
            /**
             * @description Unique feature name
             * @example disable-comments
             */
            name: string;
            /**
             * @description Type of the flag e.g. experiment, kill-switch, release, operational, permission
             * @example kill-switch
             */
            type: string;
            /**
             * @description Detailed description of the feature
             * @example Controls disabling of the comments section in case of an incident
             */
            description: string | null;
            /**
             * @description The type of dependency. 'parent' means that the feature is a parent feature, 'child' means that the feature is a child feature.
             * @example parent
             * @enum {string|null}
             */
            dependencyType: "parent" | "child" | null;
            /**
             * @description Name of the project the feature belongs to
             * @example dx-squad
             */
            project: string;
            /**
             * @description `true` if the feature is stale based on the age and feature type, otherwise `false`.
             * @example false
             */
            stale: boolean;
            /**
             * @description `true` if the feature was favorited, otherwise `false`.
             * @example true
             */
            favorite: boolean;
            /**
             * @description `true` if the impression data collection is enabled for the feature, otherwise `false`.
             * @example false
             */
            impressionData: boolean;
            /**
             * Format: date-time
             * @description The date the feature was created
             * @example 2023-01-28T15:21:39.975Z
             */
            createdAt: string | null;
            /**
             * Format: date-time
             * @description The date the feature was archived
             * @example 2023-01-29T15:21:39.975Z
             */
            archivedAt: string | null;
            /**
             * Format: date-time
             * @deprecated
             * @description The date when metrics where last collected for the feature. This field was deprecated in v5 and will be removed in a future release, use the one in featureEnvironmentSchema
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt?: string | null;
            /** @description The list of environments where the feature can be used */
            environments: components["schemas"]["featureSearchEnvironmentSchema"][];
            /**
             * @description The list of segments the feature is enabled for.
             * @example [
             *       "pro-users",
             *       "main-segment"
             *     ]
             */
            segments: string[];
            /**
             * @deprecated
             * @description The list of feature variants. This field was deprecated in v5
             */
            variants?: components["schemas"]["variantSchema"][];
            /**
             * @deprecated
             * @description This is a legacy field that was deprecated in v5
             */
            strategies?: Record<string, never>[];
            /** @description The list of feature tags */
            tags?: components["schemas"]["tagSchema"][] | null;
            /** @description Current lifecycle stage of the feature */
            lifecycle?: {
                /**
                 * @description The name of the current lifecycle stage
                 * @example initial
                 * @enum {string}
                 */
                stage: "initial" | "pre-live" | "live" | "completed" | "archived";
                /**
                 * @description The name of the detailed status of a given stage. E.g. completed stage can be kept or discarded.
                 * @example kept
                 */
                status?: string | null;
                /**
                 * Format: date-time
                 * @description When the feature entered this stage
                 * @example 2023-01-28T15:21:39.975Z
                 */
                enteredStageAt: string;
            };
            /** @description User who created the feature flag */
            createdBy: {
                /**
                 * @description The user id
                 * @example 123
                 */
                id: number;
                /**
                 * @description Name of the user
                 * @example User
                 */
                name: string;
                /**
                 * @description URL used for the user profile image
                 * @example https://example.com/242x200.png
                 */
                imageUrl: string;
            };
        };
        /** @description A single activation strategy configuration schema for a feature */
        featureStrategySchema: {
            /**
             * @description A uuid for the feature strategy
             * @example 6b5157cb-343a-41e7-bfa3-7b4ec3044840
             */
            id?: string;
            /**
             * @description The name or type of strategy
             * @example flexibleRollout
             */
            name: string;
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs
             * @example false
             */
            disabled?: boolean | null;
            /**
             * @description The name or feature the strategy is attached to
             * @example myAwesomeFeature
             */
            featureName?: string;
            /**
             * @description The order of the strategy in the list
             * @example 9999
             */
            sortOrder?: number;
            /**
             * @description A list of segment ids attached to the strategy
             * @example [
             *       1,
             *       2
             *     ]
             */
            segments?: number[];
            /** @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints */
            constraints?: components["schemas"]["constraintSchema"][];
            /** @description Strategy level variants */
            variants?: components["schemas"]["strategyVariantSchema"][];
            parameters?: components["schemas"]["parametersSchema"];
        };
        /** @description An object containing a segment identifier and a strategy identifier. */
        featureStrategySegmentSchema: {
            /**
             * @description The ID of the segment
             * @example 2
             */
            segmentId: number;
            /**
             * @description The ID of the strategy
             * @example e2caa08f-30c4-4aa3-b955-54ca9e93dc13
             */
            featureStrategyId: string;
        };
        /** @description Describes a tag applied to a feature */
        featureTagSchema: {
            /**
             * @description The name of the feature this tag is applied to
             * @example my-feature
             */
            featureName: string;
            /**
             * @description The [type](https://docs.getunleash.io/reference/feature-toggles#tags tag types) of the tag
             * @example simple
             */
            tagType?: string;
            /**
             * @description The value of the tag
             * @example my-tag
             */
            tagValue: string;
            /**
             * @deprecated
             * @description The [type](https://docs.getunleash.io/reference/feature-toggles#tags tag types) of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagType` property.
             */
            type?: string;
            /**
             * @deprecated
             * @description The value of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagValue` property.
             */
            value?: string;
            /**
             * @description The id of the user who created this tag
             * @example 1
             */
            createdByUserId?: number | null;
        };
        /** @description A count of feature flags of a specific type */
        featureTypeCountSchema: {
            /**
             * @description Type of the flag e.g. experiment, kill-switch, release, operational, permission
             * @example kill-switch
             */
            type: string;
            /**
             * @description Number of feature flags of this type
             * @example 1
             */
            count: number;
        };
        /** @description A [feature flag type](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types). */
        featureTypeSchema: {
            /**
             * @description The identifier of this feature flag type.
             * @example kill-switch
             */
            id: string;
            /**
             * @description The display name of this feature flag type.
             * @example Kill switch
             */
            name: string;
            /**
             * @description A description of what this feature flag type is intended to be used for.
             * @example Kill switch feature flags are used to quickly turn on or off critical functionality in your system.
             */
            description: string;
            /**
             * @description How many days it takes before a feature flag of this typed is flagged as [potentially stale](https://docs.getunleash.io/reference/technical-debt#stale-and-potentially-stale-toggles) by Unleash. If this value is `null`, Unleash will never mark it as potentially stale.
             * @example 40
             */
            lifetimeDays: number | null;
        };
        /** @description A list of [feature flag types](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types) and the schema version used to represent those feature types. */
        featureTypesSchema: {
            /**
             * @description The schema version used to describe the feature flag types listed in the `types` property.
             * @example 1
             * @enum {integer}
             */
            version: 1;
            /**
             * @description The list of feature flag types.
             * @example [
             *       {
             *         "id": "release",
             *         "name": "Release",
             *         "description": "Release feature flags are used to release new features.",
             *         "lifetimeDays": 40
             *       },
             *       {
             *         "id": "experiment",
             *         "name": "Experiment",
             *         "description": "Experiment feature flags are used to test and verify multiple different versions of a feature.",
             *         "lifetimeDays": 40
             *       },
             *       {
             *         "id": "operational",
             *         "name": "Operational",
             *         "description": "Operational feature flags are used to control aspects of a rollout.",
             *         "lifetimeDays": 7
             *       },
             *       {
             *         "id": "kill-switch",
             *         "name": "Kill switch",
             *         "description": "Kill switch feature flags are used to quickly turn on or off critical functionality in your system.",
             *         "lifetimeDays": null
             *       },
             *       {
             *         "id": "permission",
             *         "name": "Permission",
             *         "description": "Permission feature flags are used to control permissions in your system.",
             *         "lifetimeDays": null
             *       }
             *     ]
             */
            types: components["schemas"]["featureTypeSchema"][];
        };
        /** @description How many applications have seen this feature flag, as well as how this feature was evaluated the last hour */
        featureUsageSchema: {
            /** @description The version of this schema */
            version: number;
            /**
             * @description The maturity level of this API (alpha, beta, stable, deprecated)
             * @example stable
             */
            maturity: string;
            /**
             * @description The name of the feature
             * @example my.special.feature
             */
            featureName: string;
            /** @description Last hour statistics. Accumulated per feature per environment. Contains counts for evaluations to true (yes) and to false (no) */
            lastHourUsage: components["schemas"]["featureEnvironmentMetricsSchema"][];
            /**
             * @description A list of applications seen using this feature
             * @example [
             *       "accounting",
             *       "billing",
             *       "booking"
             *     ]
             */
            seenApplications: string[];
        };
        /** @description A versioned collection of feature flag variants. */
        featureVariantsSchema: {
            /**
             * @description The version of the feature variants schema.
             * @example 1
             */
            version: number;
            /** @description All variants defined for a specific feature flag. */
            variants: components["schemas"]["variantSchema"][];
        };
        /** @description User feedback information to be created. */
        feedbackCreateSchema: {
            /**
             * @description `true` if the user has asked never to see this feedback questionnaire again. Defaults to `false`.
             * @example false
             */
            neverShow?: boolean;
            /**
             * @description The name of the feedback session
             * @example pnps
             */
            feedbackId: string;
        };
        /** @description User feedback information about a particular feedback item. */
        feedbackResponseSchema: {
            /**
             * @description The ID of the user that gave the feedback.
             * @example 2
             */
            userId?: number;
            /**
             * @description `true` if the user has asked never to see this feedback questionnaire again.
             * @example false
             */
            neverShow?: boolean;
            /**
             * Format: date-time
             * @description When this feedback was given
             * @example 2023-07-06T08:29:21.282Z
             */
            given?: string | null;
            /**
             * @description The name of the feedback session
             * @example pnps
             */
            feedbackId?: string;
        };
        /** @description User feedback information to be updated. */
        feedbackUpdateSchema: {
            /**
             * @description The ID of the user that gave the feedback.
             * @example 2
             */
            userId?: number;
            /**
             * @description `true` if the user has asked never to see this feedback questionnaire again.
             * @example false
             */
            neverShow?: boolean;
            /**
             * Format: date-time
             * @description When this feedback was given
             * @example 2023-07-06T08:29:21.282Z
             */
            given?: string | null;
        };
        /** @description Frontend SDK client registration information */
        frontendApiClientSchema: {
            /** @description Name of the application using Unleash */
            appName: string;
            /** @description Instance id for this application (typically hostname, podId or similar) */
            instanceId?: string;
            /** @description Optional field that describes the sdk version (name:version) */
            sdkVersion?: string;
            /**
             * @deprecated
             * @description deprecated
             * @example development
             */
            environment?: string;
            /** @description At which interval, in milliseconds, will this client be expected to send metrics */
            interval: number;
            /** @description When this client started. Should be reported as ISO8601 time. */
            started: string | number;
            /** @description List of strategies implemented by this application */
            strategies: string[];
        };
        /** @description Frontend API feature */
        frontendApiFeatureSchema: {
            /**
             * @description Unique feature name.
             * @example disable-comments
             */
            name: string;
            /**
             * @description Always set to `true`.
             * @example true
             */
            enabled: boolean;
            /**
             * @description `true` if the impression data collection is enabled for the feature, otherwise `false`.
             * @example false
             */
            impressionData: boolean;
            /** @description Variant details */
            variant?: {
                /**
                 * @description The variants name. Is unique for this feature flag
                 * @example blue_group
                 */
                name: string;
                /**
                 * @description Whether the variant is enabled or not.
                 * @example true
                 */
                enabled: boolean;
                /**
                 * @description Extra data configured for this variant
                 * @example {
                 *       "type": "json",
                 *       "value": "{\"color\": \"red\"}"
                 *     }
                 */
                payload?: {
                    /**
                     * @description The format of the payload.
                     * @enum {string}
                     */
                    type: "json" | "csv" | "string" | "number";
                    /** @description The payload value stringified. */
                    value: string;
                };
                /**
                 * @description Whether the feature is enabled or not.
                 * @example true
                 */
                feature_enabled?: boolean;
                /**
                 * @deprecated
                 * @description Use `feature_enabled` instead.
                 * @example true
                 */
                featureEnabled?: boolean;
            };
        };
        /** @description The Unleash frontend API POST request body. */
        frontendApiFeaturesPostSchema: {
            /** @description The Unleash context. */
            context?: {
                /**
                 * @description The name of the application.
                 * @example My cool application.
                 */
                appName?: string;
                /**
                 * Format: date-time
                 * @description A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
                 * @example 2022-07-05T12:56:41+02:00
                 */
                currentTime?: string;
                /**
                 * @deprecated
                 * @description The environment the app is running in.
                 */
                environment?: string;
                /**
                 * @description Additional Unleash context properties
                 * @example {
                 *       "customContextField": "this is one!",
                 *       "otherCustomField": "3"
                 *     }
                 */
                properties?: {
                    [key: string]: string;
                };
                /**
                 * @description The app's IP address
                 * @example 192.168.1.1
                 */
                remoteAddress?: string;
                /**
                 * @description An identifier for the current session
                 * @example b65e7b23-fec0-4814-a129-0e9861ef18fc
                 */
                sessionId?: string;
                /**
                 * @description An identifier for the current user
                 * @example username@provider.com
                 */
                userId?: string;
            } & {
                [key: string]: unknown;
            };
        } & {
            [key: string]: unknown;
        };
        /** @description Frontend SDK features list */
        frontendApiFeaturesSchema: {
            /** @description The actual features returned to the Frontend SDK */
            toggles: components["schemas"]["frontendApiFeatureSchema"][];
        };
        /** @description A detailed information about a user group */
        groupSchema: {
            /**
             * @description The group id
             * @example 1
             */
            id?: number;
            /**
             * @description The name of the group
             * @example DX team
             */
            name: string;
            /**
             * @description A custom description of the group
             * @example Current members of the DX squad
             */
            description?: string | null;
            /**
             * @description A list of SSO groups that should map to this Unleash group
             * @example [
             *       "SSOGroup1",
             *       "SSOGroup2"
             *     ]
             */
            mappingsSSO?: string[];
            /**
             * @description A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
             * @example 1
             */
            rootRole?: number | null;
            /**
             * @description A user who created this group
             * @example admin
             */
            createdBy?: string | null;
            /**
             * Format: date-time
             * @description When was this group created
             * @example 2023-06-30T11:41:00.123Z
             */
            createdAt?: string | null;
            /** @description A list of users belonging to this group */
            users?: components["schemas"]["groupUserModelSchema"][];
            /**
             * @description A list of projects where this group is used
             * @example [
             *       "default",
             *       "my-project"
             *     ]
             */
            projects?: string[];
            /**
             * @description The number of users that belong to this group
             * @example 1
             */
            userCount?: number;
            /**
             * @description The SCIM ID of the group, only present if managed by SCIM
             * @example 01HTMEXAMPLESCIMID7SWWGHN7
             */
            scimId?: string | null;
        };
        /** @description Details for a single user belonging to a group */
        groupUserModelSchema: {
            /**
             * Format: date-time
             * @description The date when the user joined the group
             * @example 2023-06-30T11:41:00.123Z
             */
            joinedAt?: string;
            /**
             * @description The username of the user who added this user to this group
             * @example admin
             */
            createdBy?: string | null;
            user: components["schemas"]["userSchema"];
        };
        /** @description A list of [user groups](https://docs.getunleash.io/reference/rbac#user-groups) */
        groupsSchema: {
            /** @description A list of groups */
            groups?: components["schemas"]["groupSchema"][];
        };
        /** @description Used by service orchestrators to decide whether this Unleash instance should be marked as healthy or unhealthy */
        healthCheckSchema: {
            /**
             * @description The state this Unleash instance is in. GOOD if the server is up and running. It never returns BAD, if the server is unhealthy you will get an unsuccessful http response.
             * @example GOOD
             * @enum {string}
             */
            health: "GOOD" | "BAD";
        };
        /** @description An overview of a project's stats and its health as described in the documentation on [technical debt](https://docs.getunleash.io/reference/technical-debt) */
        healthOverviewSchema: {
            /**
             * @description The project overview version.
             * @example 1
             */
            version: number;
            /**
             * @description The project's name
             * @example enterprisegrowth
             */
            name: string;
            /**
             * @description The project's description
             * @example The project for all things enterprisegrowth
             */
            description?: string | null;
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness: string;
            /**
             * @description The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
             * @example open
             * @enum {string}
             */
            mode: "open" | "protected" | "private";
            /**
             * @description A limit on the number of features allowed in the project. Null if no limit.
             * @example 100
             */
            featureLimit?: number | null;
            /**
             * @description The number of users/members in the project.
             * @example 5
             */
            members: number;
            /**
             * @deprecated
             * @description Use `technicalDebt` instead.
             * @example 95
             */
            health: number;
            /**
             * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
             * @example 25
             */
            technicalDebt: number;
            /** @description An array containing the names of all the environments configured for the project. */
            environments: components["schemas"]["projectEnvironmentSchema"][];
            /** @description An array containing an overview of all the features of the project and their individual status */
            features: components["schemas"]["featureSchema"][];
            /**
             * Format: date-time
             * @description When the project was last updated.
             * @example 2023-04-19T08:15:14.000Z
             */
            updatedAt?: string | null;
            /**
             * Format: date-time
             * @description When the project was last updated.
             * @example 2023-04-19T08:15:14.000Z
             */
            createdAt?: string | null;
            /**
             * @description Indicates if the project has been marked as a favorite by the current user requesting the project health overview.
             * @example true
             */
            favorite?: boolean;
            /** @description Project statistics */
            stats?: components["schemas"]["projectStatsSchema"];
            featureNaming?: components["schemas"]["createFeatureNamingPatternSchema"];
        };
        /** @description A report of the current health of the requested project, with datapoints like counters of currently active, stale, and potentially stale feature flags. */
        healthReportSchema: {
            /**
             * @description The project overview version.
             * @example 1
             */
            version: number;
            /**
             * @description The project's name
             * @example enterprisegrowth
             */
            name: string;
            /**
             * @description The project's description
             * @example The project for all things enterprisegrowth
             */
            description?: string | null;
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness: string;
            /**
             * @description The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
             * @example open
             * @enum {string}
             */
            mode: "open" | "protected" | "private";
            /**
             * @description A limit on the number of features allowed in the project. Null if no limit.
             * @example 100
             */
            featureLimit?: number | null;
            /**
             * @description The number of users/members in the project.
             * @example 5
             */
            members: number;
            /**
             * @deprecated
             * @description Use `technicalDebt` instead.
             * @example 95
             */
            health: number;
            /**
             * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
             * @example 25
             */
            technicalDebt: number;
            /** @description An array containing the names of all the environments configured for the project. */
            environments: components["schemas"]["projectEnvironmentSchema"][];
            /** @description An array containing an overview of all the features of the project and their individual status */
            features: components["schemas"]["featureSchema"][];
            /**
             * Format: date-time
             * @description When the project was last updated.
             * @example 2023-04-19T08:15:14.000Z
             */
            updatedAt?: string | null;
            /**
             * Format: date-time
             * @description When the project was last updated.
             * @example 2023-04-19T08:15:14.000Z
             */
            createdAt?: string | null;
            /**
             * @description Indicates if the project has been marked as a favorite by the current user requesting the project health overview.
             * @example true
             */
            favorite?: boolean;
            /** @description Project statistics */
            stats?: components["schemas"]["projectStatsSchema"];
            featureNaming?: components["schemas"]["createFeatureNamingPatternSchema"];
            /**
             * @description The number of potentially stale feature flags.
             * @example 5
             */
            potentiallyStaleCount: number;
            /**
             * @description The number of active feature flags.
             * @example 2
             */
            activeCount: number;
            /**
             * @description The number of stale feature flags.
             * @example 10
             */
            staleCount: number;
        };
        /** @description Email id used for password reset */
        idSchema: {
            /**
             * @description User email
             * @example user@example.com
             */
            id: string;
        };
        /** @description Used for bulk deleting multiple ids */
        idsSchema: {
            /**
             * @description Ids, for instance userid
             * @example [
             *       12,
             *       212
             *     ]
             */
            ids: number[];
        };
        /** @description Used for reporting impact metrics from SDKs */
        impactMetricsSchema: {
            /**
             * @description Name of the impact metric
             * @example my-counter
             */
            name: string;
            /**
             * @description Human-readable description of what the metric measures
             * @example Counts the number of operations
             */
            help: string;
            /**
             * @description Type of the metric
             * @example counter
             * @enum {string}
             */
            type: "counter" | "gauge";
            /** @description Samples of the metric */
            samples: {
                /**
                 * @description The value of the metric sample
                 * @example 10
                 */
                value: number;
                /**
                 * @description Optional labels for the metric sample
                 * @example {
                 *       "application": "my-app",
                 *       "environment": "production"
                 *     }
                 */
                labels?: {
                    [key: string]: string;
                };
            }[];
        };
        /** @description The result of the export operation for a project and environment, used at import */
        importTogglesSchema: {
            /**
             * @description The exported [project](https://docs.getunleash.io/reference/projects)
             * @example My awesome project
             */
            project: string;
            /**
             * @description The exported [environment](https://docs.getunleash.io/reference/environments)
             * @example development
             */
            environment: string;
            data: components["schemas"]["exportResultSchema"];
        };
        /** @description A description of an error or warning pertaining to a feature flag import job. */
        importTogglesValidateItemSchema: {
            /**
             * @description The validation error message
             * @example You cannot import a feature that already exist in other projects. You already have the following features defined outside of project default:
             */
            message: string;
            /**
             * @description The items affected by this error message
             * @example [
             *       "some-feature-a",
             *       "some-feature-b"
             *     ]
             */
            affectedItems: string[];
        };
        /** @description An object containing [feature import](https://docs.getunleash.io/reference/deploy/environment-import-export) validation results. */
        importTogglesValidateSchema: {
            /**
             * @description A list of errors that prevent the provided data from being successfully imported.
             * @example [
             *       {
             *         "message": "You cannot import a feature that already exist in other projects. You already have the following features defined outside of project default:",
             *         "affectedItems": [
             *           "my-feature (in project project-854)"
             *         ]
             *       }
             *     ]
             */
            errors: components["schemas"]["importTogglesValidateItemSchema"][];
            /**
             * @description A list of warnings related to the provided data.
             * @example [
             *       {
             *         "message": "The following strategy types will be used in import. Please make sure the strategy type parameters are configured as in source environment:",
             *         "affectedItems": [
             *           "custom-strategy-7"
             *         ]
             *       }
             *     ]
             */
            warnings: components["schemas"]["importTogglesValidateItemSchema"][];
            /**
             * @description Any additional permissions required to import the data. If the list is empty, you require no additional permissions beyond what your user already has.
             * @example []
             */
            permissions?: components["schemas"]["importTogglesValidateItemSchema"][];
        };
        /** @description A Unleash user that has been flagged as inactive */
        inactiveUserSchema: {
            /**
             * @description The user id
             * @example 123
             */
            id: number;
            /**
             * @description Name of the user
             * @example Ned Ryerson
             */
            name?: string | null;
            /**
             * @description Email of the user
             * @example user@example.com
             */
            email?: string;
            /**
             * @description A unique username for the user
             * @example nedryerson
             */
            username?: string | null;
            /**
             * Format: date-time
             * @description The last time this user logged in
             * @example 2024-01-25T11:42:00.345Z
             */
            seenAt?: string | null;
            /**
             * Format: date-time
             * @description The user was created at this time
             * @example 2023-12-31T23:59:59.999Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last time this user's PAT token (if any) was used
             * @example 2024-01-01T23:59:59.999Z
             */
            patSeenAt?: string | null;
        };
        /** @description A list of users that has been flagged as inactive */
        inactiveUsersSchema: {
            /**
             * @description The version of this schema. Used to keep track of compatibility
             * @example 1
             */
            version: number;
            /** @description The list of users that are flagged as inactive */
            inactiveUsers: components["schemas"]["inactiveUserSchema"][];
        };
        /** @description Information about an instance and statistics about usage of various features of Unleash */
        instanceAdminStatsSchema: {
            /**
             * @description A unique identifier for this instance. Generated by the database migration scripts at first run. Typically a UUID.
             * @example ed3861ae-78f9-4e8c-8e57-b57efc15f82b
             */
            instanceId: string;
            /**
             * Format: date-time
             * @description When these statistics were produced
             * @example 2023-06-12T12:25:06Z
             */
            timestamp?: string | null;
            /**
             * @description The version of Unleash OSS that is bundled in this instance
             * @example 5.1.7
             */
            versionOSS?: string;
            /**
             * @description The version of Unleash Enterprise that is bundled in this instance
             * @example 5.1.7
             */
            versionEnterprise?: string;
            /**
             * @description The number of users this instance has
             * @example 8
             */
            users?: number;
            /** @description The number client metrics buckets records recorded in the previous day. # features * # apps * # envs * # hours with metrics */
            previousDayMetricsBucketsCount?: {
                /**
                 * @description The number of enabled/disabled metrics buckets recorded in the previous day
                 * @example 10
                 */
                enabledCount?: number;
                /**
                 * @description The number of variant metrics buckets recorded in the previous day
                 * @example 10
                 */
                variantCount?: number;
            };
            /** @description The number of active users in the last 7, 30 and 90 days */
            activeUsers?: {
                /**
                 * @description The number of active users in the last 7 days
                 * @example 5
                 */
                last7?: number;
                /**
                 * @description The number of active users in the last 30 days
                 * @example 10
                 */
                last30?: number;
                /**
                 * @description The number of active users in the last 60 days
                 * @example 12
                 */
                last60?: number;
                /**
                 * @description The number of active users in the last 90 days
                 * @example 15
                 */
                last90?: number;
            };
            /**
             * @description The number of users who had access to Unleash within the last 30 days, including those who may have been deleted during this period.
             * @example 10
             */
            licensedUsers?: number;
            /** @description The number of changes to the production environment in the last 30, 60 and 90 days */
            productionChanges?: {
                /**
                 * @description The number of changes in production in the last 30 days
                 * @example 10
                 */
                last30?: number;
                /**
                 * @description The number of changes in production in the last 60 days
                 * @example 12
                 */
                last60?: number;
                /**
                 * @description The number of changes in production in the last 90 days
                 * @example 15
                 */
                last90?: number;
            };
            /**
             * @description The number of feature-toggles this instance has
             * @example 47
             */
            featureToggles?: number;
            /**
             * @description The number of projects defined in this instance.
             * @example 3
             */
            projects?: number;
            /**
             * @description The number of context fields defined in this instance.
             * @example 7
             */
            contextFields?: number;
            /**
             * @description The number of roles defined in this instance
             * @example 5
             */
            roles?: number;
            /**
             * @description The number of groups defined in this instance
             * @example 12
             */
            groups?: number;
            /**
             * @description The number of environments defined in this instance
             * @example 3
             */
            environments?: number;
            /**
             * @description The number of segments defined in this instance
             * @example 19
             */
            segments?: number;
            /**
             * @description The number of strategies defined in this instance
             * @example 8
             */
            strategies?: number;
            /**
             * @description Whether or not SAML authentication is enabled for this instance
             * @example false
             */
            SAMLenabled?: boolean;
            /**
             * @description Whether or not OIDC authentication is enabled for this instance
             * @example true
             */
            OIDCenabled?: boolean;
            /** @description A count of connected applications in the last week, last month and all time since last restart */
            clientApps?: {
                /**
                 * @description A description of a time range
                 * @example 30d
                 * @enum {string}
                 */
                range?: "allTime" | "30d" | "7d";
                /**
                 * @description The number of client applications that have been observed in this period
                 * @example 1
                 */
                count?: number;
            }[];
            /**
             * @description The number of export operations on this instance
             * @example 0
             */
            featureExports?: number;
            /**
             * @description The number of import operations on this instance
             * @example 0
             */
            featureImports?: number;
            /** @description The number of API tokens in Unleash, split by type */
            apiTokens?: {
                /**
                 * @description The number of admin tokens.
                 * @example 5
                 */
                admin?: number;
                /**
                 * @description The number of client tokens.
                 * @example 5
                 */
                client?: number;
                /**
                 * @description The number of frontend tokens.
                 * @example 5
                 */
                frontend?: number;
            };
            /**
             * @description The highest number of strategies used on a single feature flag in a single environment.
             * @example 3
             */
            maxEnvironmentStrategies?: number;
            /**
             * @description The highest number of constraints used on a single strategy.
             * @example 4
             */
            maxConstraints?: number;
            /**
             * @description The highest number of constraint values used on a single constraint.
             * @example 17
             */
            maxConstraintValues?: number;
            /**
             * @description A SHA-256 checksum of the instance statistics to be used to verify that the data in this object has not been tampered with
             * @example b023323477abb1eb145bebf3cdb30a1c2063e3edc1f7ae474ed8ed6c80de9a3b
             */
            sum?: string;
        };
        /** @description An object describing an integration event. */
        integrationEventSchema: {
            /**
             * @description The integration event's ID. Integration event IDs are incrementing integers. In other words, a more recently created integration event will always have a higher ID than an older one. This ID is represented as a string since it is a BigInt.
             * @example 7
             */
            id: string;
            /**
             * @description The ID of the integration that the integration event belongs to.
             * @example 42
             */
            integrationId: number;
            /**
             * Format: date-time
             * @description The date and time of when the integration event was created. In other words, the date and time of when the integration handled the event.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The state of the integration event. Can be one of `success`, `failed` or `successWithErrors`.
             * @example failed
             * @enum {string}
             */
            state: "success" | "failed" | "successWithErrors";
            /**
             * @description Details about the state of the integration event.
             * @example Status code: 429 - Rate limit reached.
             */
            stateDetails: string;
            /** @description The event that triggered this integration event. */
            event: components["schemas"]["eventSchema"];
            /**
             * @description Detailed information about the integration event. The contents vary depending on the type of integration and the specific details.
             * @example {
             *       "message": "*user@yourcompany.com* created a new *slack-app* integration configuration",
             *       "channels": [
             *         "engineering",
             *         "unleash-updates"
             *       ]
             *     }
             */
            details: Record<string, never>;
        };
        /** @description A response model with a list of integration events. */
        integrationEventsSchema: {
            /** @description A list of integration events. */
            integrationEvents: components["schemas"]["integrationEventSchema"][];
        };
        /** @description Describes a legal value. Typically used to limit possible values for contextFields or strategy properties */
        legalValueSchema: {
            /**
             * @description The valid value
             * @example #c154c1
             */
            value: string;
            /**
             * @description Describes this specific legal value
             * @example Deep fuchsia
             */
            description?: string;
        };
        /** @description A username/password login request */
        loginSchema: {
            /**
             * @description The username trying to log in
             * @example user
             */
            username: string;
            /**
             * @description The password of the user trying to log in
             * @example hunter2
             */
            password: string;
        };
        /** @description The current state of Unleash's maintenance mode feature. */
        maintenanceSchema: {
            /**
             * @description Whether maintenance mode is enabled or not.
             * @example true
             */
            enabled: boolean;
        };
        /** @description Detailed user information */
        meSchema: {
            user: components["schemas"]["userSchema"];
            /** @description User permissions for projects and environments */
            permissions: components["schemas"]["permissionSchema"][];
            /** @description User feedback information */
            feedback: components["schemas"]["feedbackResponseSchema"][];
            /** @description Splash screen configuration */
            splash: {
                [key: string]: boolean;
            };
        };
        /** @description An object with a name */
        nameSchema: {
            /**
             * @description The name of the represented object.
             * @example betaUser
             */
            name: string;
        };
        /** @description Data about outdated SDKs that should be upgraded. */
        outdatedSdksSchema: {
            /** @description A list of SDKs */
            sdks: {
                /**
                 * @description An outdated SDK version identifier. Usually formatted as "unleash-client-<language>:<version>"
                 * @example unleash-client-java:7.0.0
                 */
                sdkVersion: string;
                /** @description A list of applications using the SDK version */
                applications: string[];
            }[];
        };
        /** @description An override for deciding which variant should be assigned to a user based on the context name */
        overrideSchema: {
            /**
             * @description The name of the context field used to determine overrides
             * @example userId
             */
            contextName: string;
            /**
             * @description Which values that should be overriden
             * @example [
             *       "red",
             *       "blue"
             *     ]
             */
            values: string[];
        };
        /** @description A list of parameters for a strategy */
        parametersSchema: {
            [key: string]: string;
        };
        /** @description A list of parent feature names available for a given child feature. Features that have their own parents are excluded. */
        parentFeatureOptionsSchema: string[];
        /** @description A list of parent variant names available for a given parent feature. This list includes strategy variants and feature environment variants. */
        parentVariantOptionsSchema: string[];
        /** @description Fields used to create new password or update old password */
        passwordSchema: {
            /**
             * @description The new password to change or validate.
             * @example k!5As3HquUrQ
             */
            password: string;
            /**
             * @description The old password the user is changing. This field is for the non-admin users changing their own password.
             * @example Oldk!5As3HquUrQ
             */
            oldPassword?: string;
            /**
             * @description The confirmation of the new password. This field is for the non-admin users changing their own password.
             * @example k!5As3HquUrQ
             */
            confirmPassword?: string;
        };
        /** @description Describes a [personal access token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user. */
        patSchema: {
            /**
             * @description The PAT's ID. PAT IDs are incrementing integers. In other words, a more recently created PAT will always have a higher ID than an older one.
             * @example 1
             */
            id: number;
            /**
             * @description The token used for authentication. It is automatically generated by Unleash when the PAT is created and that is the only time this property is returned.
             * @example user:xyzrandomstring
             */
            secret?: string;
            /**
             * Format: date-time
             * @description The date and time of when the PAT was created.
             * @example 2023-04-19T08:15:14.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the PAT was last seen/used to authenticate with. `null` if it has not been used yet.
             * @example 2023-04-19T08:15:14.000Z
             */
            seenAt?: string | null;
            /**
             * @description The ID of the user this PAT belongs to.
             * @example 1337
             */
            userId?: number;
            /**
             * @description The PAT's description.
             * @example user:xyzrandomstring
             */
            description: string;
            /**
             * Format: date-time
             * @description The PAT's expiration date.
             * @example 2023-04-19T08:15:14.000Z
             */
            expiresAt: string;
        };
        /** @description A [JSON patch](https://www.rfc-editor.org/rfc/rfc6902) operation description */
        patchSchema: {
            /**
             * @description The path to the property to operate on
             * @example /type
             */
            path: string;
            /**
             * @description The kind of operation to perform
             * @example replace
             * @enum {string}
             */
            op: "add" | "remove" | "replace" | "copy" | "move";
            /**
             * @description The target to move or copy from, if performing one of those operations
             * @example /type
             */
            from?: string;
            /**
             * @description The value to add or replace, if performing one of those operations
             * @example kill-switch
             */
            value?: unknown;
        };
        /** @description A list of patches */
        patchesSchema: components["schemas"]["patchSchema"][];
        /** @description Contains a collection of [personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens), or PATs. PATs are automatically scoped to the authenticated user. */
        patsSchema: {
            /** @description A collection of PATs. */
            pats?: components["schemas"]["patSchema"][];
        };
        /** @description Project and environment permissions */
        permissionSchema: {
            /**
             * @description [Project](https://docs.getunleash.io/reference/rbac#project-permissions) or [environment](https://docs.getunleash.io/reference/rbac#environment-permissions) permission name
             * @example UPDATE_FEATURE_STRATEGY
             */
            permission: string;
            /**
             * @description The project this permission applies to
             * @example my-project
             */
            project?: string;
            /**
             * @description The environment this permission applies to
             * @example development
             */
            environment?: string;
        };
        /** @description Project details in personal dashboard */
        personalDashboardProjectDetailsSchema: {
            /** @description Insights for the project, including flag data and project health information. */
            insights: {
                /**
                 * @description The project's average health score over the last 4 weeks
                 * @example 80
                 */
                avgHealthCurrentWindow: number | null;
                /**
                 * @description The project's average health score over the previous 4-week window
                 * @example 70
                 */
                avgHealthPastWindow: number | null;
                /**
                 * @description The current number of non-archived flags
                 * @example 100
                 */
                totalFlags: number;
                /**
                 * @description The number of active flags that are not stale or potentially stale
                 * @example 98
                 */
                activeFlags: number;
                /**
                 * @description The current number of flags that have been manually marked as stale
                 * @example 0
                 */
                staleFlags: number;
                /**
                 * @description The number of potentially stale flags as calculated by Unleash
                 * @example 2
                 */
                potentiallyStaleFlags: number;
                /**
                 * @deprecated
                 * @description Use `technicalDebt` instead.
                 * @example 80
                 */
                health: number;
                /**
                 * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
                 * @example 25
                 */
                technicalDebt: number;
            };
            /** @description The current onboarding status of the project. */
            onboardingStatus: {
                /**
                 * @example onboarding-started
                 * @enum {string}
                 */
                status: "onboarding-started" | "onboarded";
            } | {
                /**
                 * @example first-flag-created
                 * @enum {string}
                 */
                status: "first-flag-created";
                /**
                 * @description The name of the feature flag
                 * @example my-feature-flag
                 */
                feature: string;
            };
            /** @description The latest events for the project. */
            latestEvents: {
                /** @description The ID of the event. */
                id: number;
                /** @description **[Experimental]** A markdown-formatted summary of the event. */
                summary: string | null;
                /**
                 * @description Which user created this event
                 * @example johndoe
                 */
                createdBy: string;
                /**
                 * @description URL used for the user profile image of the event author
                 * @example https://example.com/242x200.png
                 */
                createdByImageUrl: string;
                /**
                 * Format: date-time
                 * @description When the event was recorded
                 * @example 2021-09-01T12:00:00Z
                 */
                createdAt: string;
            }[];
            /** @description The users and/or groups that have the "owner" role in this project. If no such users or groups exist, the list will contain the "system" owner instead. */
            owners: ({
                /** @enum {string} */
                ownerType: "user";
                /** @example User Name */
                name: string;
                /** @example https://example.com/image.jpg */
                imageUrl?: string | null;
                /** @example user@example.com */
                email?: string | null;
            } | {
                /** @enum {string} */
                ownerType: "group";
                /** @example Group Name */
                name: string;
            })[] | {
                /** @enum {string} */
                ownerType: "system";
            }[];
            /** @description The list of roles that the user has in this project. */
            roles: {
                /**
                 * @description The name of the role
                 * @example Owner
                 */
                name: string;
                /**
                 * @description The id of the role
                 * @example 4
                 */
                id: number;
                /**
                 * @description The type of the role
                 * @example project
                 * @enum {string}
                 */
                type: "custom" | "project";
            }[];
        };
        /** @description Project and flags relevant to the user */
        personalDashboardSchema: {
            /** @description Users with the admin role in Unleash. */
            admins: {
                /**
                 * @description The user ID.
                 * @example 1
                 */
                id: number;
                /**
                 * @description The user's name.
                 * @example Ash Ketchum
                 */
                name?: string;
                /**
                 * @description The user's username.
                 * @example pokémaster13
                 */
                username?: string;
                /** @example https://example.com/peek-at-you.jpg */
                imageUrl?: string;
                /** @example user@example.com */
                email?: string;
            }[];
            /** @description Users with the project owner role in Unleash. Only contains owners of projects that are visible to the user. */
            projectOwners: {
                /**
                 * @description The type of the owner; will always be `user`.
                 * @enum {string}
                 */
                ownerType: "user";
                /**
                 * @description The name displayed for the user. Can be the user's name, username, or email, depending on what they have provided.
                 * @example User Name
                 */
                name: string;
                /**
                 * @description The URL of the user's profile image.
                 * @example https://example.com/image.jpg
                 */
                imageUrl?: string | null;
                /**
                 * @description The user's email address.
                 * @example user@example.com
                 */
                email?: string | null;
            }[];
            /** @description A list of projects that a user participates in with any role e.g. member or owner or any custom role */
            projects: {
                /**
                 * @description The id of the project
                 * @example my-project-id
                 */
                id: string;
                /**
                 * @description The name of the project
                 * @example My Project
                 */
                name: string;
                /**
                 * @deprecated
                 * @description Use `technicalDebt` instead.
                 * @example 50
                 */
                health: number;
                /**
                 * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
                 * @example 25
                 */
                technicalDebt: number;
                /**
                 * @description The number of members this project has
                 * @example 4
                 */
                memberCount: number;
                /**
                 * @description The number of features this project has
                 * @example 10
                 */
                featureCount: number;
            }[];
            /** @description A list of flags a user created or favorited */
            flags: {
                /**
                 * @description The name of the flag
                 * @example my-flag
                 */
                name: string;
                /**
                 * @description The id of the feature project
                 * @example my-project-id
                 */
                project: string;
                /**
                 * @description The type of the feature flag
                 * @example release
                 */
                type: string;
            }[];
        };
        /** @description A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/activation-strategies#constraints) */
        playgroundConstraintSchema: {
            /**
             * @description The name of the context field that this constraint should apply to.
             * @example appName
             */
            contextName: string;
            /**
             * @description The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/activation-strategies#constraint-operators).
             * @example IN
             * @enum {string}
             */
            operator: "NOT_IN" | "IN" | "STR_ENDS_WITH" | "STR_STARTS_WITH" | "STR_CONTAINS" | "NUM_EQ" | "NUM_GT" | "NUM_GTE" | "NUM_LT" | "NUM_LTE" | "DATE_AFTER" | "DATE_BEFORE" | "SEMVER_EQ" | "SEMVER_GT" | "SEMVER_LT";
            /**
             * @description Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
             * @default false
             */
            caseInsensitive: boolean;
            /**
             * @description Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
             * @default false
             */
            inverted: boolean;
            /**
             * @description The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
             * @example [
             *       "my-app",
             *       "my-other-app"
             *     ]
             */
            values?: string[];
            /**
             * @description The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
             * @example my-app
             */
            value?: string;
            /** @description Whether this was evaluated as true or false. */
            result: boolean;
        };
        /** @description A simplified feature flag model intended for the Unleash playground. */
        playgroundFeatureSchema: {
            /**
             * @description The feature's name.
             * @example my-feature
             */
            name: string;
            /**
             * @description The ID of the project that contains this feature.
             * @example my-project
             */
            projectId: string;
            /** @description The feature's applicable strategies and cumulative results of the strategies */
            strategies: {
                /** @description The cumulative results of all the feature's strategies. Can be `true`,
                 *                                       `false`, or `unknown`.
                 *                                       This property will only be `unknown`
                 *                                       if one or more of the strategies can't be fully evaluated and the rest of the strategies
                 *                                       all resolve to `false`. */
                result: boolean | "unknown";
                /** @description The strategies that apply to this feature. */
                data: components["schemas"]["playgroundStrategySchema"][];
            };
            /** @description Whether the feature has a parent dependency that is not satisfied */
            hasUnsatisfiedDependency?: boolean;
            /** @description Whether the feature is active and would be evaluated in the provided environment in a normal SDK context. */
            isEnabledInCurrentEnvironment: boolean;
            /**
             * @description Whether this feature is enabled or not in the current environment.
             *                               If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),
             *                               this will be `false` to align with how client SDKs treat unresolved feature states.
             * @example true
             */
            isEnabled: boolean;
            /**
             * @description The feature variant you receive based on the provided context or the _disabled
             *                               variant_. If a feature is disabled or doesn't have any
             *                               variants, you would get the _disabled variant_.
             *                               Otherwise, you'll get one of thefeature's defined variants.
             * @example {
             *       "name": "green",
             *       "enabled": true
             *     }
             */
            variant: {
                /**
                 * @description The variant's name. If there is no variant or if the flag is disabled, this will be `disabled`
                 * @example red-variant
                 */
                name: string;
                /** @description Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false` */
                enabled: boolean;
                /** @description An optional payload attached to the variant. */
                payload?: {
                    /** @description The format of the payload. */
                    type: string;
                    /**
                     * @description The payload value stringified.
                     * @example {"property": "value"}
                     */
                    value: string;
                };
                /**
                 * @description Use `featureEnabled` instead.
                 * @example true
                 */
                feature_enabled?: boolean;
                /**
                 * @deprecated
                 * @description Whether the feature is enabled or not.
                 * @example true
                 */
                featureEnabled?: boolean;
            } | null;
            /** @description The feature variants. */
            variants: components["schemas"]["variantSchema"][];
        };
        /** @description Data for the playground API to evaluate feature flags */
        playgroundRequestSchema: {
            /**
             * @description The environment to evaluate feature flags in.
             * @example development
             */
            environment: string;
            /** @description A list of projects to check for feature flags in. */
            projects?: string[] | "*";
            context: components["schemas"]["sdkContextSchema"];
        };
        /** @description The state of all features given the provided input. */
        playgroundResponseSchema: {
            /** @description The given input used to evaluate the features. */
            input: components["schemas"]["playgroundRequestSchema"];
            /** @description The list of features that have been evaluated. */
            features: components["schemas"]["playgroundFeatureSchema"][];
        };
        /** @description The evaluated result of a segment as used by the Playground. */
        playgroundSegmentSchema: {
            /** @description The segment's id. */
            id: number;
            /**
             * @description The name of the segment.
             * @example segment A
             */
            name: string;
            /** @description Whether this was evaluated as true or false. */
            result: boolean;
            /** @description The list of constraints in this segment. */
            constraints: components["schemas"]["playgroundConstraintSchema"][];
        };
        /** @description An evaluated feature flag strategy as used by the Playground */
        playgroundStrategySchema: {
            /** @description The strategy's name. */
            name: string;
            /**
             * @description Description of the feature's purpose.
             * @example Beta rollout
             */
            title?: string;
            /**
             * @description The strategy's id.
             * @example 3AECCF7E-FF82-4174-8287-8EBE06079A50
             */
            id: string;
            /** @description The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false` */
            result: {
                /**
                 * @description Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about. The `unevaluated` result is also returned if the strategy is disabled.
                 * @enum {string}
                 */
                evaluationStatus: "incomplete" | "unevaluated";
                /** @description Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`. */
                enabled: false | "unknown";
            } | {
                /**
                 * @description Signals that this strategy was evaluated successfully.
                 * @enum {string}
                 */
                evaluationStatus: "complete";
                /** @description Whether this strategy evaluates to true or not. */
                enabled: boolean;
                /**
                 * @description The feature variant you receive based on the provided context or the _disabled
                 *                               variant_. If a feature is disabled or doesn't have any
                 *                               variants, you would get the _disabled variant_.
                 *                               Otherwise, you'll get one of the feature's defined variants.
                 * @example {
                 *       "name": "green",
                 *       "enabled": true
                 *     }
                 */
                variant?: {
                    /**
                     * @description The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
                     * @example red-variant
                     */
                    name: string;
                    /** @description Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false` */
                    enabled: boolean;
                    /** @description An optional payload attached to the variant. */
                    payload?: {
                        /**
                         * @description The format of the payload.
                         * @enum {string}
                         */
                        type: "json" | "csv" | "string" | "number";
                        /**
                         * @description The payload value stringified.
                         * @example {"property": "value"}
                         */
                        value: string;
                    };
                } | null;
                /** @description The feature variants. */
                variants?: components["schemas"]["variantSchema"][];
            };
            /**
             * @description The strategy's status. Disabled strategies are not evaluated
             * @example false
             */
            disabled: boolean | null;
            /** @description The strategy's segments and their evaluation results. */
            segments: components["schemas"]["playgroundSegmentSchema"][];
            /** @description The strategy's constraints and their evaluation results. */
            constraints: components["schemas"]["playgroundConstraintSchema"][];
            /**
             * @description The strategy's constraints and their evaluation results.
             * @example {
             *       "myParam1": "param value"
             *     }
             */
            parameters: components["schemas"]["parametersSchema"];
            /** @description A set of links to actions you can perform on this strategy */
            links: {
                /** @example /projects/some-project/features/some-feature/strategies/edit?environmentId=some-env&strategyId= 3AECCF7E-FF82-4174-8287-8EBE06079A50 */
                edit: string;
            };
        };
        /** @description User profile overview */
        profileSchema: {
            rootRole: components["schemas"]["roleSchema"];
            /**
             * @description Which projects this user is a member of
             * @example [
             *       "my-projectA",
             *       "my-projectB"
             *     ]
             */
            projects: string[];
            /**
             * @description Which email subscriptions this user is subscribed to
             * @example [
             *       "productivity-report"
             *     ]
             */
            subscriptions: string[];
            /**
             * @description Deprecated, always returns empty array
             * @example []
             */
            features: components["schemas"]["featureSchema"][];
        };
        /** @description An array of project activity information. Each item contains a date and the total number of activities for that date. */
        projectActivitySchema: {
            /**
             * @description Activity date
             * @example 2022-12-14
             */
            date: string;
            /** @description Activity count */
            count: number;
        }[];
        /** @description A project application instance. */
        projectApplicationSchema: {
            /** @description Name of the application that is using the SDK. This is the same as the appName in the SDK configuration. */
            name: string;
            /**
             * @description The environments that the application is using. This is the same as the environment in the SDK configuration.
             * @example [
             *       "development",
             *       "production"
             *     ]
             */
            environments: string[];
            /**
             * @description The instances of the application that are using the SDK.
             * @example [
             *       "prod-b4ca",
             *       "prod-ac8a"
             *     ]
             */
            instances: string[];
            /** @description The SDKs that the application is using. */
            sdks: components["schemas"]["projectApplicationSdkSchema"][];
        };
        /** @description A project application instance SDK. */
        projectApplicationSdkSchema: {
            /**
             * @description Name of the SDK package that the application is using.
             * @example unleash-client-node
             */
            name: string;
            /**
             * @description The versions of the SDK that the application is using.
             * @example [
             *       "4.1.1"
             *     ]
             */
            versions: string[];
        };
        /** @description A list of project applications */
        projectApplicationsSchema: {
            /**
             * @description The total number of project applications.
             * @example 50
             */
            total: number;
            /** @description All applications defined for a specific project. */
            applications: components["schemas"]["projectApplicationSchema"][];
        };
        /** @description A projects dora metrics */
        projectDoraMetricsSchema: {
            /** @description The average time it takes a feature flag to be enabled in production. The measurement unit is days. */
            projectAverage?: number;
            /** @description An array of objects containing feature flag name and timeToProduction values. The measurement unit of timeToProduction is days. */
            features: components["schemas"]["doraFeaturesSchema"][];
        };
        /** @description Add an environment to a project, optionally also sets if change requests are enabled for this environment on the project */
        projectEnvironmentSchema: {
            /**
             * @description The environment to add to the project
             * @example development
             */
            environment: string;
            /**
             * @description Whether change requests should be enabled or for this environment on the project or not
             * @example true
             */
            changeRequestsEnabled?: boolean;
            /** @description A default strategy to create for this environment on the project. */
            defaultStrategy?: components["schemas"]["createFeatureStrategySchema"];
        };
        /** @description A detailed description of the feature environment */
        projectFeatureEnvironmentSchema: {
            /**
             * @description The name of the environment
             * @example my-dev-env
             */
            name: string;
            /**
             * @description The type of the environment
             * @example development
             */
            type: string;
            /**
             * @description `true` if the feature is enabled for the environment, otherwise `false`.
             * @example true
             */
            enabled: boolean;
            /**
             * @description The sort order of the feature environment in the feature environments list
             * @example 3
             */
            sortOrder: number;
            /** @description The number of defined variants */
            variantCount: number;
            /**
             * Format: date-time
             * @description The date when metrics where last collected for the feature environment
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt: string | null;
            /** @description Whether the feature has any strategies defined. */
            hasStrategies?: boolean;
            /** @description Whether the feature has any enabled strategies defined. */
            hasEnabledStrategies?: boolean;
        };
        /** @description A project feature flag definition */
        projectFeatureSchema: {
            /**
             * @description Unique feature name
             * @example disable-comments
             */
            name: string;
            /**
             * @description Type of the flag e.g. experiment, kill-switch, release, operational, permission
             * @example kill-switch
             */
            type: string;
            /**
             * @description Detailed description of the feature
             * @example Controls disabling of the comments section in case of an incident
             */
            description: string | null;
            /**
             * @description `true` if the feature is stale based on the age and feature type, otherwise `false`.
             * @example false
             */
            stale: boolean;
            /**
             * @description `true` if the feature was favorited, otherwise `false`.
             * @example true
             */
            favorite: boolean;
            /**
             * @description `true` if the impression data collection is enabled for the feature, otherwise `false`.
             * @example false
             */
            impressionData: boolean;
            /**
             * Format: date-time
             * @description The date the feature was created
             * @example 2023-01-28T15:21:39.975Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @deprecated
             * @description The date and time when metrics where last collected for this flag in any environment. This field was deprecated in v5. You should instead use the `lastSeenAt` property on the individual environments listed under the `environments` property.
             * @example 2023-01-28T16:21:39.975Z
             */
            lastSeenAt: string | null;
            /** @description The list of environments where the feature can be used */
            environments: components["schemas"]["projectFeatureEnvironmentSchema"][];
            /** @description The list of feature tags */
            tags?: components["schemas"]["tagSchema"][] | null;
        };
        /**
         * @deprecated
         * @description A list of features in a project
         */
        projectFeaturesSchema: {
            /** @description The version of the feature's schema */
            version: number;
            /** @description A list of features */
            features: components["schemas"]["projectFeatureSchema"][];
        };
        /** @description A list of project flag creators */
        projectFlagCreatorsSchema: {
            /**
             * @description The user id.
             * @example 50
             */
            id: number;
            /**
             * @description Name of the user. If the user has no set name, the API falls back to using the user's username (if they have one) or email (if neither name or username is set).
             * @example User
             */
            name: string;
        }[];
        /** @description A high-level overview of a project insights. It contains information such as project statistics, overall health, types of flags, members overview, change requests overview. */
        projectInsightsSchema: {
            /** @description Project statistics */
            stats: components["schemas"]["projectStatsSchema"];
            /**
             * @deprecated
             * @description Use `technicalDebt` instead. Summary of the project health
             */
            health: {
                /**
                 * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
                 * @example 95
                 */
                rating: number;
                /**
                 * @description The number of active feature flags.
                 * @example 12
                 */
                activeCount: number;
                /**
                 * @description The number of potentially stale feature flags.
                 * @example 5
                 */
                potentiallyStaleCount: number;
                /**
                 * @description The number of stale feature flags.
                 * @example 10
                 */
                staleCount: number;
            };
            /** @description Summary of the projects technical debt */
            technicalDebt: {
                /**
                 * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
                 * @example 25
                 */
                rating: number;
                /**
                 * @description The number of active feature flags.
                 * @example 12
                 */
                activeCount: number;
                /**
                 * @description The number of potentially stale feature flags.
                 * @example 5
                 */
                potentiallyStaleCount: number;
                /**
                 * @description The number of stale feature flags.
                 * @example 10
                 */
                staleCount: number;
            };
            /** @description Lead time (DORA) metrics */
            leadTime: components["schemas"]["projectDoraMetricsSchema"];
            /** @description The number of features of each type */
            featureTypeCounts: components["schemas"]["featureTypeCountSchema"][];
            /** @description Active/inactive users summary */
            members: {
                /**
                 * @description The number of total project members
                 * @example 10
                 */
                currentMembers: number;
                /**
                 * @description The change in the number of project members compared to the previous month
                 * @example 10
                 */
                change: number;
            };
        };
        /** @description A template for a link that can be automatically added to new feature flags. */
        projectLinkTemplateSchema: {
            /**
             * @description The title of the link.
             * @example Code search
             */
            title?: string | null;
            /**
             * @description The URL to use as a template. Can contain {{project}} or {{feature}} as placeholders.
             * @example https://github.com/search?type=code&q=repo%3AUnleash%2F{{project}}+{{feature}}
             */
            urlTemplate: string;
        };
        /** @description A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc. */
        projectOverviewSchema: {
            /** @description Project statistics */
            stats?: components["schemas"]["projectStatsSchema"];
            /**
             * @description The schema version used to describe the project overview
             * @example 1
             */
            version: number;
            /**
             * @description The name of this project
             * @example dx-squad
             */
            name: string;
            /**
             * @description Additional information about the project
             * @example DX squad feature release
             */
            description?: string | null;
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness?: string;
            /**
             * @description The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
             * @example open
             * @enum {string}
             */
            mode?: "open" | "protected" | "private";
            /**
             * @description A limit on the number of features allowed in the project. Null if no limit.
             * @example 100
             */
            featureLimit?: number | null;
            featureNaming?: components["schemas"]["createFeatureNamingPatternSchema"];
            /** @description A list of templates for links that will be automatically added to new feature flags. */
            linkTemplates?: components["schemas"]["projectLinkTemplateSchema"][];
            /**
             * @description The number of members this project has
             * @example 4
             */
            members?: number;
            /**
             * @deprecated
             * @description Use `technicalDebt` instead.
             * @example 50
             */
            health?: number;
            /**
             * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
             * @example 25
             */
            technicalDebt?: number;
            /**
             * @description The environments that are enabled for this project
             * @example [
             *       {
             *         "environment": "development"
             *       },
             *       {
             *         "environment": "production",
             *         "defaultStrategy": {
             *           "name": "flexibleRollout",
             *           "constraints": [],
             *           "parameters": {
             *             "rollout": "50",
             *             "stickiness": "customAppName",
             *             "groupId": "stickyFlag"
             *           }
             *         }
             *       }
             *     ]
             */
            environments?: components["schemas"]["projectEnvironmentSchema"][];
            /** @description The number of features of each type that are in this project */
            featureTypeCounts?: components["schemas"]["featureTypeCountSchema"][];
            /**
             * Format: date-time
             * @description When the project was last updated.
             * @example 2023-02-10T08:36:35.262Z
             */
            updatedAt?: string | null;
            /**
             * Format: date-time
             * @description When the project was archived.
             * @example 2023-02-10T08:36:35.262Z
             */
            archivedAt?: string | null;
            /**
             * Format: date-time
             * @description When the project was created.
             * @example 2023-02-10T08:36:35.262Z
             */
            createdAt?: string | null;
            /**
             * @description `true` if the project was favorited, otherwise `false`.
             * @example true
             */
            favorite?: boolean;
            /** @description The current onboarding status of the project. */
            onboardingStatus: {
                /**
                 * @example onboarding-started
                 * @enum {string}
                 */
                status: "onboarding-started" | "onboarded";
            } | {
                /**
                 * @example first-flag-created
                 * @enum {string}
                 */
                status: "first-flag-created";
                /**
                 * @description The name of the feature flag
                 * @example my-feature-flag
                 */
                feature: string;
            };
        };
        /** @description A definition of the project used for projects listing purposes */
        projectSchema: {
            /**
             * @description The id of this project
             * @example dx-squad
             */
            id: string;
            /**
             * @description The name of this project
             * @example DX-Squad
             */
            name: string;
            /**
             * @deprecated
             * @description Additional information about the project
             * @example DX squad feature release
             */
            description?: string | null;
            /**
             * @deprecated
             * @description Use `technicalDebt` instead.
             * @example 50
             */
            health?: number;
            /**
             * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
             * @example 25
             */
            technicalDebt?: number;
            /**
             * @description The number of features this project has
             * @example 10
             */
            featureCount?: number;
            /**
             * @deprecated
             * @description The number of stale features this project has
             * @example 10
             */
            staleFeatureCount?: number;
            /**
             * @deprecated
             * @description The number of potentially stale features this project has
             * @example 10
             */
            potentiallyStaleFeatureCount?: number;
            /**
             * @description The number of members this project has
             * @example 4
             */
            memberCount?: number;
            /**
             * Format: date-time
             * @description When this project was created.
             * @example 2023-07-27T12:12:28Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @deprecated
             * @description When this project was last updated.
             * @example 2023-07-28T12:12:28Z
             */
            updatedAt?: string | null;
            /**
             * Format: date-time
             * @description When this project was last updated.
             * @example 2023-07-28T12:12:28Z
             */
            lastUpdatedAt?: string | null;
            /**
             * Format: date-time
             * @description When this project was archived.
             * @example 2023-07-28T12:12:28Z
             */
            archivedAt?: string | null;
            /**
             * @description `true` if the project was favorited, otherwise `false`.
             * @example true
             */
            favorite?: boolean;
            /**
             * @description The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
             * @example open
             * @enum {string}
             */
            mode?: "open" | "protected" | "private";
            /**
             * @deprecated
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness?: string;
            /**
             * @deprecated
             * @description The average time from when a feature was created to when it was enabled in the "production" environment during the current window
             * @example 10
             */
            avgTimeToProduction?: number;
            /**
             * Format: date-time
             * @description Across all flags in your project this is the last time usage metrics where reported from connected applications.
             * @example 2023-07-28T12:12:28Z
             */
            lastReportedFlagUsage?: string | null;
            /** @description The users and/or groups that have the "owner" role in this project. If no such users or groups exist, the list will contain the "system" owner instead. */
            owners?: ({
                /** @enum {string} */
                ownerType: "user";
                /** @example User Name */
                name: string;
                /** @example https://example.com/image.jpg */
                imageUrl?: string | null;
                /** @example user@example.com */
                email?: string | null;
            } | {
                /** @enum {string} */
                ownerType: "group";
                /** @example Group Name */
                name: string;
            })[] | {
                /** @enum {string} */
                ownerType: "system";
            }[];
        };
        /** @description Statistics for a project, including the average time to production, number of features created, the project activity and more.
         *
         *     Stats are divided into current and previous **windows**.
         *     - The **current window** is the past 30 days.
         *     - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago) */
        projectStatsSchema: {
            /**
             * @description The average time from when a feature was created to when it was enabled in the "production" environment during the current window
             * @example 10
             */
            avgTimeToProdCurrentWindow: number;
            /**
             * @description The number of feature flags created during the current window
             * @example 15
             */
            createdCurrentWindow: number;
            /**
             * @description The number of feature flags created during the previous window
             * @example 15
             */
            createdPastWindow: number;
            /**
             * @description The number of feature flags that were archived during the current window
             * @example 5
             */
            archivedCurrentWindow: number;
            /**
             * @description The number of feature flags that were archived during the previous window
             * @example 5
             */
            archivedPastWindow: number;
            /**
             * @description The number of project events that occurred during the current window
             * @example 100
             */
            projectActivityCurrentWindow: number;
            /**
             * @description The number of project events that occurred during the previous window
             * @example 100
             */
            projectActivityPastWindow: number;
            /**
             * @description The number of members that were added to the project during the current window
             * @example 1
             */
            projectMembersAddedCurrentWindow: number;
        };
        /** @description Schema representing the overall status of a project, including an array of activity records. Each record in the activity array contains a date and a count, providing a snapshot of the project’s activity level over time. */
        projectStatusSchema: {
            /** @description Array of activity records with date and count, representing the project’s daily activity statistics. */
            activityCountByDate: components["schemas"]["projectActivitySchema"];
            /** @description Information about the project's health rating */
            health: {
                /**
                 * @description The project's current health score, based on the ratio of healthy flags to stale and potentially stale flags.
                 * @example 100
                 */
                current: number;
            };
            /** @description Information about the project's health rating */
            technicalDebt: {
                /**
                 * @description The project's current health score, based on the ratio of healthy flags to stale and potentially stale flags.
                 * @example 100
                 */
                current: number;
            };
            /** @description Key resources within the project */
            resources: {
                /** @description The number of API tokens created specifically for this project. */
                apiTokens: number;
                /** @description The number of users who have been granted roles in this project. Does not include users who have access via groups. */
                members: number;
                /** @description The number of segments that are scoped to this project. */
                segments: number;
            };
            /** @description Information on stale and potentially stale flags in this project. */
            staleFlags: {
                /** @description The total number of flags in this project that are stale or potentially stale. */
                total: number;
            };
            /** @description Feature flag lifecycle statistics for this project. */
            lifecycleSummary: {
                /** @description Statistics on feature flags in a given stage in this project. */
                initial: {
                    /**
                     * @description The average number of days a feature flag remains in a stage in this project. Will be null if Unleash doesn't have any data for this stage yet.
                     * @example 5
                     */
                    averageDays: number | null;
                    /**
                     * @description The number of feature flags currently in a stage in this project.
                     * @example 10
                     */
                    currentFlags: number;
                };
                /** @description Statistics on feature flags in a given stage in this project. */
                preLive: {
                    /**
                     * @description The average number of days a feature flag remains in a stage in this project. Will be null if Unleash doesn't have any data for this stage yet.
                     * @example 5
                     */
                    averageDays: number | null;
                    /**
                     * @description The number of feature flags currently in a stage in this project.
                     * @example 10
                     */
                    currentFlags: number;
                };
                /** @description Statistics on feature flags in a given stage in this project. */
                live: {
                    /**
                     * @description The average number of days a feature flag remains in a stage in this project. Will be null if Unleash doesn't have any data for this stage yet.
                     * @example 5
                     */
                    averageDays: number | null;
                    /**
                     * @description The number of feature flags currently in a stage in this project.
                     * @example 10
                     */
                    currentFlags: number;
                };
                /** @description Statistics on feature flags in a given stage in this project. */
                completed: {
                    /**
                     * @description The average number of days a feature flag remains in a stage in this project. Will be null if Unleash doesn't have any data for this stage yet.
                     * @example 5
                     */
                    averageDays: number | null;
                    /**
                     * @description The number of feature flags currently in a stage in this project.
                     * @example 10
                     */
                    currentFlags: number;
                };
                /** @description Information on archived flags in this project. */
                archived: {
                    /**
                     * @description The number of archived feature flags in this project. If a flag is deleted permanently, it will no longer be counted as part of this statistic.
                     * @example 10
                     */
                    currentFlags: number;
                    /**
                     * @description The number of flags in this project that have been changed over the last 30 days.
                     * @example 5
                     */
                    last30Days: number;
                };
            };
        };
        /** @description An overview of all the projects in the Unleash instance */
        projectsSchema: {
            /**
             * @description The schema version used to represent the project data.
             * @example 1
             */
            version: number;
            /** @description A list of projects in the Unleash instance */
            projects: components["schemas"]["projectSchema"][];
        };
        /** @description Used for creating a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens) */
        publicSignupTokenCreateSchema: {
            /** @description The token's name. */
            name: string;
            /**
             * Format: date-time
             * @description The token's expiration date.
             */
            expiresAt: string;
        };
        /** @description Used for transporting a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens) */
        publicSignupTokenSchema: {
            /**
             * @description The actual value of the token. This is the part that is used by Unleash to create an invite link
             * @example a3c84b25409ea8ca1782ef17f94a42fc
             */
            secret: string;
            /**
             * @description The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.
             * @example https://sandbox.getunleash.io/enterprise/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc
             */
            url: string | null;
            /**
             * @description The token's name. Only for displaying in the UI
             * @example Invite public viewers
             */
            name: string;
            /**
             * @description Whether the token is active. This property will always be `false` for a token that has expired.
             * @example true
             */
            enabled: boolean;
            /**
             * Format: date-time
             * @description The time when the token will expire.
             * @example 2023-04-12T11:13:31.960Z
             */
            expiresAt: string;
            /**
             * Format: date-time
             * @description When the token was created.
             * @example 2023-04-12T11:13:31.960Z
             */
            createdAt: string;
            /**
             * @description The creator's email or username
             * @example someone@example.com
             */
            createdBy: string | null;
            /** @description Array of users that have signed up using the token. */
            users?: components["schemas"]["userSchema"][] | null;
            /** @description Users who sign up using this token will be given this role. */
            role: components["schemas"]["roleSchema"];
        };
        /** @description Used by Unleash for updating a token's expiration date or, when deleting the invite link, it's status */
        publicSignupTokenUpdateSchema: {
            /**
             * Format: date-time
             * @description The token's expiration date.
             * @example 2023-04-11T15:46:56Z
             */
            expiresAt?: string;
            /**
             * @description Whether the token is active or not.
             * @example true
             */
            enabled?: boolean;
        };
        /** @description A wrapper object containing all the public signup tokens */
        publicSignupTokensSchema: {
            /**
             * @description An array of all the public signup tokens
             * @example [
             *       {
             *         "secret": "a3c84b25409ea8ca1782ef17f94a42fc",
             *         "url": "https://my_unleash_instance/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc",
             *         "name": "Invite public viewers",
             *         "enabled": false,
             *         "expiresAt": "2023-04-12T11:13:31.960Z",
             *         "createdAt": "2023-04-12T11:13:31.960Z",
             *         "createdBy": "someone",
             *         "users": null,
             *         "role": {
             *           "id": 3,
             *           "type": "root",
             *           "name": "Viewer"
             *         }
             *       }
             *     ]
             */
            tokens: components["schemas"]["publicSignupTokenSchema"][];
        };
        /** @description Data used when copying variants into a new environment. */
        pushVariantsSchema: {
            /** @description The variants to write to the provided environments */
            variants?: components["schemas"]["variantSchema"][];
            /** @description The enviromnents to write the provided variants to */
            environments?: string[];
        };
        /** @description An object representing an error from the UI */
        recordUiErrorSchema: {
            /** @description The error message */
            errorMessage: string;
            /** @description The stack trace of the error */
            errorStack?: string;
        };
        /** @description Statistics for usage of Unleash, formatted so it can easily be used in a graph */
        requestsPerSecondSchema: {
            /**
             * @description Whether the query against prometheus succeeded or failed
             * @example success
             * @enum {string}
             */
            status?: "success" | "failure";
            /** @description The query result from prometheus */
            data?: {
                /**
                 * @description Prometheus compatible result type.
                 * @example vector
                 * @enum {string}
                 */
                resultType?: "matrix" | "vector" | "scalar" | "string";
                /** @description An array of values per metric. Each one represents a line in the graph labeled by its metric name */
                result?: {
                    /** @description A key value set representing the metric */
                    metric?: {
                        /**
                         * @description Name of the application this metric relates to
                         * @example mySdk
                         */
                        appName?: string;
                        /**
                         * @description Which endpoint has been accessed
                         * @example /api/frontend
                         */
                        endpoint?: string;
                    };
                    /** @description An array of arrays. Each element of the array is an array of size 2 consisting of the 2 axis for the graph: in position zero the x axis represented as a number and position one the y axis represented as string */
                    values?: (string | number)[][];
                }[];
            };
        };
        /** @description Get usage metrics separated by client and admin paths */
        requestsPerSecondSegmentedSchema: {
            clientMetrics?: components["schemas"]["requestsPerSecondSchema"];
            adminMetrics?: components["schemas"]["requestsPerSecondSchema"];
        };
        /** @description Data used to provide users a way to reset their passwords. */
        resetPasswordSchema: {
            /**
             * Format: uri
             * @description A URL pointing to a location where the user can reset their password
             * @example https://unleash.reset.com
             */
            resetPasswordUrl: string;
        };
        /** @description A map of resource names and their limits. */
        resourceLimitsSchema: {
            /**
             * @description The maximum number of values per segment allowed.
             * @example 10
             */
            segmentValues: number;
            /**
             * @description The maximum number of strategy segments allowed.
             * @example 10
             */
            strategySegments: number;
            /**
             * @description The maximum number of actions per action set allowed.
             * @example 10
             */
            actionSetActions: number;
            /**
             * @description The maximum number of action set definitions per project allowed.
             * @example 10
             */
            actionSetsPerProject: number;
            /**
             * @description The maximum number of filters per action set allowed.
             * @example 10
             */
            actionSetFilters: number;
            /**
             * @description The maximum number of filter values inside an action set allowed.
             * @example 10
             */
            actionSetFilterValues: number;
            /**
             * @description The maximum number of signal endpoints allowed.
             * @example 10
             */
            signalEndpoints: number;
            /**
             * @description The maximum number of signal tokens per endpoint allowed.
             * @example 10
             */
            signalTokensPerEndpoint: number;
            /**
             * @description The maximum number of feature environment strategies allowed.
             * @example 30
             */
            featureEnvironmentStrategies: number;
            /**
             * @description The maximum number of values for a single constraint.
             * @example 250
             */
            constraintValues: number;
            /**
             * @description The maximum number of constraints in a single strategy.
             * @example 30
             */
            constraints: number;
            /**
             * @description The maximum number of environments allowed.
             * @example 50
             */
            environments: number;
            /**
             * @description The maximum number of SDK and admin API tokens you can have at the same time. This limit applies only to backend and frontend SDK tokens and to admin tokens. Personal access tokens are not subject to this limit. The limit applies to the total number of tokens across all projects in your organization.
             * @example 2000
             */
            apiTokens: number;
            /**
             * @description The maximum number of projects allowed.
             * @example 500
             */
            projects: number;
            /**
             * @description The maximum number of segments allowed.
             * @example 300
             */
            segments: number;
            /**
             * @description The maximum number of feature flags you can have at the same time. Archived flags do not count towards this limit.
             * @example 5000
             */
            featureFlags: number;
        };
        /** @description A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform */
        roleSchema: {
            /**
             * @description The role id
             * @example 9
             */
            id: number;
            /**
             * @description A role can either be a global root role (applies to all projects) or a project role
             * @example root
             */
            type: string;
            /**
             * @description The name of the role
             * @example Editor
             */
            name: string;
            /**
             * @description A more detailed description of the role and what use it's intended for
             * @example Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default.
             */
            description?: string;
            /**
             * @description What project the role belongs to
             * @example default
             */
            project?: string | null;
        };
        /** @description A list of roles */
        rolesSchema: {
            /**
             * @description The version of the role schema used
             * @example 1
             */
            version: number;
            /** @description A list of roles */
            roles: components["schemas"]["roleSchema"][];
        };
        /** @description The Unleash context as modeled in client SDKs */
        sdkContextSchema: {
            /**
             * @description The name of the application.
             * @example My cool application.
             */
            appName: string;
            /**
             * Format: date-time
             * @description A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
             * @example 2022-07-05T12:56:41+02:00
             */
            currentTime?: string;
            /**
             * @deprecated
             * @description The environment the app is running in.
             */
            environment?: string;
            /**
             * @description Additional Unleash context properties
             * @example {
             *       "customContextField": "this is one!",
             *       "otherCustomField": "3"
             *     }
             */
            properties?: {
                [key: string]: string;
            };
            /**
             * @description The app's IP address
             * @example 192.168.1.1
             */
            remoteAddress?: string;
            /**
             * @description An identifier for the current session
             * @example b65e7b23-fec0-4814-a129-0e9861ef18fc
             */
            sessionId?: string;
            /**
             * @description An identifier for the current user
             * @example username@provider.com
             */
            userId?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description The Unleash context with flattened properties */
        sdkFlatContextSchema: {
            /**
             * @description The name of the application.
             * @example My cool application.
             */
            appName: string;
            /**
             * Format: date-time
             * @description A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
             * @example 2022-07-05T12:56:41+02:00
             */
            currentTime?: string;
            /**
             * @deprecated
             * @description The environment the app is running in.
             */
            environment?: string;
            /**
             * @description The app's IP address
             * @example 192.168.1.1
             */
            remoteAddress?: string;
            /**
             * @description An identifier for the current session
             * @example b65e7b23-fec0-4814-a129-0e9861ef18fc
             */
            sessionId?: string;
            /**
             * @description An identifier for the current user
             * @example username@provider.com
             */
            userId?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description A list of features matching search and filter criteria. */
        searchFeaturesSchema: {
            /** @description The full list of features in this project matching search and filter criteria. */
            features: components["schemas"]["featureSearchResponseSchema"][];
            /**
             * @description Total count of the features matching search and filter criteria
             * @example 10
             */
            total?: number;
        };
        /** @description Represents a segment of users defined by a set of constraints. */
        segmentSchema: {
            /** @description The segment's id. */
            id: number;
            /**
             * @description The name of the segment.
             * @example segment A
             */
            name?: string;
            /** @description List of constraints that determine which users are part of the segment */
            constraints: components["schemas"]["constraintSchema"][];
            /**
             * @description The description of the segment.
             * @example Segment A description
             */
            description?: string | null;
            /**
             * Format: date-time
             * @description The time the segment was created as a RFC 3339-conformant timestamp.
             * @example 2023-07-05T12:56:00.000Z
             */
            createdAt?: string;
            /**
             * @description Which user created this segment
             * @example johndoe
             */
            createdBy?: string;
            /**
             * @description The project the segment relates to, if applicable.
             * @example default
             */
            project?: string | null;
        };
        /** @description A collection of strategies belonging to a specified segment. */
        segmentStrategiesSchema: {
            /** @description The list of strategies */
            strategies: {
                /**
                 * @description The ID of the strategy
                 * @example e465c813-cffb-4232-b184-82b1d6fe9d3d
                 */
                id: string;
                /**
                 * @description The name of the feature flag that this strategy belongs to.
                 * @example new-signup-flow
                 */
                featureName: string;
                /**
                 * @description The ID of the project that the strategy belongs to.
                 * @example red-vista
                 */
                projectId: string;
                /**
                 * @description The ID of the environment that the strategy belongs to.
                 * @example development
                 */
                environment: string;
                /**
                 * @description The name of the strategy's type.
                 * @example flexibleRollout
                 */
                strategyName: string;
            }[];
            /** @description A list of strategies that use this segment in active change requests. */
            changeRequestStrategies?: {
                /**
                 * @description The ID of the strategy. Not present on new strategies that haven't been added to the feature flag yet.
                 * @example e465c813-cffb-4232-b184-82b1d6fe9d3d
                 */
                id?: string;
                /**
                 * @description The name of the feature flag that this strategy belongs to.
                 * @example new-signup-flow
                 */
                featureName: string;
                /**
                 * @description The ID of the project that the strategy belongs to.
                 * @example red-vista
                 */
                projectId: string;
                /**
                 * @description The ID of the environment that the strategy belongs to.
                 * @example development
                 */
                environment: string;
                /**
                 * @description The name of the strategy's type.
                 * @example flexibleRollout
                 */
                strategyName: string;
            }[];
        };
        /** @description Data containing a list of [segments](https://docs.getunleash.io/reference/segments) */
        segmentsSchema: {
            /** @description A list of segments */
            segments?: components["schemas"]["adminSegmentSchema"][];
        };
        /** @description Unleash CORS configuration. */
        setCorsSchema: {
            /**
             * @description The list of origins that the front-end API should accept requests from.
             * @example [
             *       "*"
             *     ]
             */
            frontendApiOrigins?: string[];
        };
        /** @description An array of strategies with their new sort order */
        setStrategySortOrderSchema: {
            /**
             * @description The ID of the strategy
             * @example 9c40958a-daac-400e-98fb-3bb438567008
             */
            id: string;
            /**
             * @description The new sort order of the strategy
             * @example 1
             */
            sortOrder: number;
        }[];
        /** @description A map of object IDs and their corresponding sort orders. */
        sortOrderSchema: {
            [key: string]: number;
        };
        /** @description Data related to a user having seen a splash screen. */
        splashRequestSchema: {
            /**
             * @description The ID of the user that was shown the splash screen.
             * @example 1
             */
            userId: number;
            /**
             * @description The ID of the splash screen that was shown.
             * @example new-splash-screen
             */
            splashId: string;
        };
        /** @description Data related to a user having seen a splash screen. */
        splashResponseSchema: {
            /**
             * @description The ID of the user that was shown the splash screen.
             * @example 1
             */
            userId: number;
            /**
             * @description The ID of the splash screen that was shown.
             * @example new-splash-screen
             */
            splashId: string;
            /**
             * @description Indicates whether the user has seen the splash screen or not.
             * @example true
             */
            seen: boolean;
        };
        /** @description List of strategies */
        strategiesSchema: {
            /**
             * @description Version of the strategies schema
             * @example 1
             * @enum {integer}
             */
            version: 1;
            /** @description List of strategies */
            strategies: components["schemas"]["strategySchema"][];
        };
        /** @description The [activation strategy](https://docs.getunleash.io/reference/activation-strategies) schema */
        strategySchema: {
            /**
             * @description An optional title for the strategy
             * @example GradualRollout - Prod25
             */
            title?: string | null;
            /**
             * @description The name (type) of the strategy
             * @example flexibleRollout
             */
            name: string;
            /**
             * @description A human friendly name for the strategy
             * @example Gradual Rollout
             */
            displayName: string | null;
            /**
             * @description A short description of the strategy
             * @example Gradual rollout to logged in users
             */
            description: string | null;
            /**
             * @description Whether the strategy can be edited or not. Strategies bundled with Unleash cannot be edited.
             * @example true
             */
            editable: boolean;
            /** @example true */
            deprecated: boolean;
            /** @description A list of relevant parameters for each strategy */
            parameters: {
                /** @example percentage */
                name?: string;
                /** @example percentage */
                type?: string;
                /** @example Gradual rollout to logged in users */
                description?: string;
                /** @example true */
                required?: boolean;
            }[];
        };
        /** @description This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants. */
        strategyVariantSchema: {
            /**
             * @description The variant name. Must be unique for this feature flag
             * @example blue_group
             */
            name: string;
            /** @description The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information */
            weight: number;
            /**
             * @description Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
             * @example fix
             * @enum {string}
             */
            weightType: "variable" | "fix";
            /**
             * @description The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
             * @example custom.context.field
             */
            stickiness: string;
            /**
             * @description Extra data configured for this variant
             * @example {
             *       "type": "json",
             *       "value": "{\"color\": \"red\"}"
             *     }
             */
            payload?: {
                /**
                 * @description The type of the value. Commonly used types are string, number, json and csv.
                 * @enum {string}
                 */
                type: "json" | "csv" | "string" | "number";
                /** @description The actual value of payload */
                value: string;
            };
        };
        /** @description Representation of a [tag](https://docs.getunleash.io/reference/feature-toggles#tags) */
        tagSchema: {
            /**
             * @description The value of the tag.
             * @example a-tag-value
             */
            value: string;
            /**
             * @description The [type](https://docs.getunleash.io/reference/feature-toggles#tags) of the tag
             * @example simple
             */
            type: string;
            /**
             * @description The hexadecimal color code for the tag type.
             * @example #FFFFFF
             */
            color?: string | null;
        };
        /** @description A tag type. */
        tagTypeSchema: {
            /**
             * @description The name of the tag type.
             * @example color
             */
            name: string;
            /**
             * @description The description of the tag type.
             * @example A tag type for describing the color of a tag.
             */
            description?: string;
            /**
             * @description The icon of the tag type.
             * @example not-really-used
             */
            icon?: string | null;
            /**
             * @description The hexadecimal color code for the tag type.
             * @example #FFFFFF
             */
            color?: string | null;
        };
        /** @description A list of tag types with a version number representing the schema used to model the tag types. */
        tagTypesSchema: {
            /**
             * @description The version of the schema used to model the tag types.
             * @example 1
             */
            version: number;
            /** @description The list of tag types. */
            tagTypes: components["schemas"]["tagTypeSchema"][];
        };
        /** @description A tag with a version number representing the schema used to model the tag. */
        tagWithVersionSchema: {
            /**
             * @description The version of the schema used to model the tag.
             * @example 1
             */
            version: number;
            tag: components["schemas"]["tagSchema"];
        };
        /** @description Represents tag changes to be applied to a list of features. */
        tagsBulkAddSchema: {
            /** @description The list of features that will be affected by the tag changes. */
            features: string[];
            /** @description The tag changes to be applied to the features. */
            tags: components["schemas"]["updateTagsSchema"];
        };
        /** @description A list of tags with a version number */
        tagsSchema: {
            /** @description The version of the schema used to model the tags. */
            version: number;
            /** @description A list of tags. */
            tags: components["schemas"]["tagSchema"][];
        };
        /** @description Contains information about which settings are configured for version info collection and feature usage collection. */
        telemetrySettingsSchema: {
            /**
             * @description Whether collection of version info is enabled/active.
             * @example true
             */
            versionInfoCollectionEnabled: boolean;
            /**
             * @description Whether collection of feature usage metrics is enabled/active.
             * @example true
             */
            featureInfoCollectionEnabled: boolean;
        };
        /** @description Data used when to activate or deactivate maintenance mode for Unleash. */
        toggleMaintenanceSchema: {
            /**
             * @description `true` if you want to activate maintenance mode, `false` if you want to deactivate it.
             * @example true
             */
            enabled: boolean;
        };
        /** @description A list of unleash tokens to validate against known tokens */
        tokenStringListSchema: {
            /**
             * @description Tokens that we want to get access information about
             * @example [
             *       "aproject:development.randomstring",
             *       "[]:production.randomstring"
             *     ]
             */
            tokens: string[];
        };
        /** @description A user identified by a token */
        tokenUserSchema: {
            /**
             * @description The user id
             * @example 7
             */
            id: number;
            /**
             * @description The name of the user
             * @example Test McTest
             */
            name?: string;
            /**
             * @description The email of the user
             * @example test@example.com
             */
            email: string;
            /**
             * @description A token uniquely identifying a user
             * @example user:xyzrandomstring
             */
            token: string;
            /**
             * @description A username or email identifying which user created this token
             * @example admin@example.com
             */
            createdBy: string | null;
            role: components["schemas"]["roleSchema"];
        };
        /** @description A collection of properties used to configure the Unleash Admin UI. */
        uiConfigSchema: {
            /**
             * @description The slogan to display in the UI footer.
             * @example The enterprise-ready feature flag service.
             */
            slogan?: string;
            /**
             * @description The name of this Unleash instance. Used to build the text in the footer.
             * @example Unleash enterprise
             */
            name?: string;
            /**
             * @description The current version of Unleash
             * @example 5.3.0-main
             */
            version: string;
            /**
             * @description What kind of Unleash instance it is: Enterprise, Pro, or Open source
             * @example Enterprise
             */
            environment?: string;
            /**
             * @description The billing model in use for this Unleash instance.
             * @example subscription
             * @enum {string}
             */
            billing?: "subscription" | "pay-as-you-go";
            /**
             * @description The URL of the Unleash instance.
             * @example https://unleash.mycompany.com/enterprise
             */
            unleashUrl: string;
            /**
             * @description The base URI path at which this Unleash instance is listening.
             * @example /enterprise
             */
            baseUriPath: string;
            /**
             * @description The URI path at which the feedback endpoint is listening.
             * @example /feedback
             */
            feedbackUriPath?: string;
            /**
             * @description Whether password authentication should be disabled or not.
             * @example false
             */
            disablePasswordAuth?: boolean;
            /**
             * @description Whether this instance can send out emails or not.
             * @example true
             */
            emailEnabled?: boolean;
            /**
             * @description Whether maintenance mode is currently active or not.
             * @example false
             */
            maintenanceMode?: boolean;
            /**
             * @description A map of resource names and their limits.
             * @example {
             *       "segmentValues": 10,
             *       "strategySegments": 10,
             *       "actionSetActions": 10,
             *       "actionSetsPerProject": 10,
             *       "actionSetFilters": 10,
             *       "actionSetFilterValues": 10,
             *       "signalEndpoints": 10,
             *       "signalTokensPerEndpoint": 10,
             *       "featureEnvironmentStrategies": 30,
             *       "constraintValues": 250,
             *       "constraints": 30,
             *       "environments": 50,
             *       "apiTokens": 2000,
             *       "projects": 500,
             *       "segments": 300,
             *       "featureFlags": 5000
             *     }
             */
            resourceLimits?: components["schemas"]["resourceLimitsSchema"];
            /**
             * @description Whether a Prometheus API is available.
             * @example true
             */
            prometheusAPIAvailable?: boolean;
            /**
             * @description The list of origins that the front-end API should accept requests from.
             * @example [
             *       "*"
             *     ]
             */
            frontendApiOrigins?: string[];
            /**
             * @description Additional (largely experimental) features that are enabled in this Unleash instance.
             * @example {
             *       "messageBanner": {
             *         "name": "disabled",
             *         "enabled": false
             *       },
             *       "featuresExportImport": true
             *     }
             */
            flags?: {
                [key: string]: boolean | components["schemas"]["variantFlagSchema"];
            };
            /**
             * @description Relevant links to use in the UI.
             * @example [
             *       {
             *         "value": "Documentation",
             *         "icon": "library_books",
             *         "href": "https://docs.getunleash.io/docs",
             *         "title": "User documentation"
             *       },
             *       {
             *         "value": "GitHub",
             *         "icon": "c_github",
             *         "href": "https://github.com/Unleash/unleash",
             *         "title": "Source code on GitHub"
             *       }
             *     ]
             */
            links?: Record<string, never>[];
            /**
             * @description The type of authentication enabled for this Unleash instance
             * @example enterprise
             * @enum {string}
             */
            authenticationType?: "open-source" | "demo" | "enterprise" | "hosted" | "custom" | "none";
            versionInfo: components["schemas"]["versionSchema"];
            /**
             * @description Whether the OIDC configuration is set through environment variables or not.
             * @example false
             */
            oidcConfiguredThroughEnv?: boolean;
            /**
             * @description Whether the SAML configuration is set through environment variables or not.
             * @example false
             */
            samlConfiguredThroughEnv?: boolean;
            /**
             * @description The maximum number of sessions that a user has.
             * @example 10
             */
            maxSessionsCount?: number;
            /** @description The context object used to configure the Unleash instance. */
            unleashContext?: Record<string, never>;
        };
        /** @description An unknown flag that has been reported by the system */
        unknownFlagSchema: {
            /**
             * @description The name of the unknown flag.
             * @example my-unknown-flag
             */
            name: string;
            /**
             * @description The name of the application that reported the unknown flag.
             * @example my-app
             */
            appName: string;
            /**
             * Format: date-time
             * @description The date and time when the unknown flag was reported.
             * @example 2023-10-01T12:00:00Z
             */
            seenAt: string;
            /**
             * @description The environment in which the unknown flag was reported.
             * @example production
             */
            environment: string;
        };
        /** @description A list of unknown flags that have been reported by the system */
        unknownFlagsResponseSchema: {
            /** @description The list of recently reported unknown flags. */
            unknownFlags: components["schemas"]["unknownFlagSchema"][];
        };
        /** @description An object with fields to updated for a given API token. */
        updateApiTokenSchema: {
            /**
             * Format: date-time
             * @description The new time when this token should expire.
             * @example 2023-09-04T11:26:24+02:00
             */
            expiresAt: string;
        };
        /** @description Data to update an existing context field configuration. */
        updateContextFieldSchema: {
            /**
             * @description A description of the context field
             * @example The user's subscription tier
             */
            description?: string;
            /**
             * @description `true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`
             * @example false
             */
            stickiness?: boolean;
            /**
             * @description How this context field should be sorted if no other sort order is selected
             * @example 2
             */
            sortOrder?: number;
            /**
             * @description A list of allowed values for this context field
             * @example [
             *       {
             *         "value": "gold"
             *       },
             *       {
             *         "value": "silver"
             *       },
             *       {
             *         "value": "crystal"
             *       }
             *     ]
             */
            legalValues?: components["schemas"]["legalValueSchema"][];
        };
        /** @description Data used for updating a feature flag */
        updateFeatureSchema: {
            /**
             * @description Detailed description of the feature
             * @example Controls disabling of the comments section in case of an incident
             */
            description?: string;
            /**
             * @description Type of the flag e.g. experiment, kill-switch, release, operational, permission
             * @example kill-switch
             * @enum {unknown}
             */
            type?: "experiment" | "kill-switch" | "release" | "operational" | "permission";
            /**
             * @description `true` if the feature is archived
             * @example true
             */
            stale?: boolean;
            /**
             * @description If `true` the feature flag will be moved to the [archive](https://docs.getunleash.io/reference/feature-toggles#archive-a-feature-flag) with a property `archivedAt` set to current time
             * @example true
             */
            archived?: boolean;
            /**
             * @description `true` if the impression data collection is enabled for the feature
             * @example false
             */
            impressionData?: boolean;
        };
        /** @description Update a strategy configuration in a feature */
        updateFeatureStrategySchema: {
            /** @description The name of the strategy type */
            name?: string;
            /** @description The order of the strategy in the list in feature environment configuration */
            sortOrder?: number;
            /** @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints */
            constraints?: components["schemas"]["constraintSchema"][];
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description A toggle to disable the strategy. defaults to true. Disabled strategies are not evaluated or returned to the SDKs
             * @example false
             */
            disabled?: boolean | null;
            parameters?: components["schemas"]["parametersSchema"];
        };
        /** @description Data required to update segments for a strategy. */
        updateFeatureStrategySegmentsSchema: {
            /**
             * @description The ID of the project that the strategy belongs to.
             * @example red-vista
             */
            projectId: string;
            /**
             * @description The ID of the strategy to update segments for.
             * @example 15d1e20b-6310-4e17-a0c2-9fb84de3053a
             */
            strategyId: string;
            /**
             * @description The ID of the strategy environment.
             * @example development
             */
            environmentId: string;
            /**
             * @description The new list of segments (IDs) to use for this strategy. Any segments not in this list will be removed from the strategy.
             * @example [
             *       1,
             *       5,
             *       6
             *     ]
             */
            segmentIds: number[];
        };
        /** @description Data used when updating the lifetime of a [feature flag type](https://docs.getunleash.io/reference/feature-toggles#feature-flag-types). */
        updateFeatureTypeLifetimeSchema: {
            /**
             * @description The new lifetime (in days) that you want to assign to the feature flag type. If the value is `null` or `0`, then the feature flags of that type will never be marked as potentially stale. Otherwise, they will be considered potentially stale after the number of days indicated by this property.
             * @example 7
             */
            lifetimeDays: number | null;
        };
        /** @description The data required to update a strategy type. */
        updateStrategySchema: {
            /**
             * @description A description of the strategy type.
             * @example Enable the feature for users who have not logged in before.
             */
            description?: string;
            /** @description The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation. */
            parameters: {
                /**
                 * @description The name of the parameter
                 * @example Rollout percentage
                 */
                name: string;
                /**
                 * @description The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
                 * @example percentage
                 * @enum {string}
                 */
                type: "string" | "percentage" | "list" | "number" | "boolean";
                /**
                 * @description A description of this strategy parameter. Use this to indicate to the users what the parameter does.
                 * @example How many percent of users should see this feature?
                 */
                description?: string;
                /**
                 * @description Whether this parameter must be configured when using the strategy. Defaults to `false`
                 * @example false
                 */
                required?: boolean;
            }[];
        };
        /** @description The request body for updating a tag type. */
        updateTagTypeSchema: {
            /**
             * @description The description of the tag type.
             * @example A tag type for describing the color of a tag.
             */
            description?: string;
            /**
             * @description The icon of the tag type.
             * @example not-really-used
             */
            icon?: string;
            /**
             * @description The hexadecimal color code for the tag type.
             * @example #FFFFFF
             */
            color?: string;
        };
        /**
         * @description Represents a set of changes to a feature's tags, such as adding or removing tags.
         * @example {
         *       "addedTags": [
         *         {
         *           "value": "tag-to-add",
         *           "type": "simple"
         *         }
         *       ],
         *       "removedTags": [
         *         {
         *           "value": "tag-to-remove",
         *           "type": "simple"
         *         }
         *       ]
         *     }
         */
        updateTagsSchema: {
            /** @description Tags to add to the feature. */
            addedTags: components["schemas"]["tagSchema"][];
            /** @description Tags to remove from the feature. */
            removedTags: components["schemas"]["tagSchema"][];
        };
        /** @description All fields that can be directly changed for the user */
        updateUserSchema: {
            /**
             * @description The user's email address. Must be provided if username is not provided.
             * @example user@example.com
             */
            email?: string;
            /**
             * @description The user's name (not the user's username).
             * @example Sam Seawright
             */
            name?: string;
            /** @description The role to assign to the user. Can be either the role's ID or its unique name. */
            rootRole?: number | ("Admin" | "Editor" | "Viewer" | "Owner" | "Member");
        };
        /** @description Data used to create or update a segment */
        upsertSegmentSchema: {
            /**
             * @description The name of the segment
             * @example beta-users
             */
            name: string;
            /**
             * @description A description of what the segment is for
             * @example Users willing to help us test and build new features.
             */
            description?: string | null;
            /**
             * @description The project the segment belongs to if any.
             * @example red-vista
             */
            project?: string | null;
            /** @description The list of constraints that make up this segment */
            constraints: components["schemas"]["constraintSchema"][];
        };
        /** @description Describes the access overview (list of permissions and metadata) for a user. */
        userAccessOverviewSchema: {
            /** @description The access overview (list of permissions) for the user */
            overview: {
                /** @description The list of root permissions */
                root: {
                    /**
                     * @description The ID of the permission
                     * @example 1
                     */
                    id: number;
                    /**
                     * @description The name of the permission
                     * @example CREATE_FEATURE_STRATEGY
                     */
                    name: string;
                    /**
                     * @description The display name of the permission
                     * @example Create activation strategies
                     */
                    displayName: string;
                    /**
                     * @description The type of the permission
                     * @example environment
                     */
                    type: string;
                    /**
                     * @description The environment that the permission applies to
                     * @example dev
                     */
                    environment?: string | null;
                    /**
                     * @description Whether the user has this permission
                     * @example true
                     */
                    hasPermission: boolean;
                }[];
                /** @description The list of project permissions */
                project: {
                    /**
                     * @description The ID of the permission
                     * @example 1
                     */
                    id: number;
                    /**
                     * @description The name of the permission
                     * @example CREATE_FEATURE_STRATEGY
                     */
                    name: string;
                    /**
                     * @description The display name of the permission
                     * @example Create activation strategies
                     */
                    displayName: string;
                    /**
                     * @description The type of the permission
                     * @example environment
                     */
                    type: string;
                    /**
                     * @description The environment that the permission applies to
                     * @example dev
                     */
                    environment?: string | null;
                    /**
                     * @description Whether the user has this permission
                     * @example true
                     */
                    hasPermission: boolean;
                }[];
                /** @description The list of environment permissions */
                environment: {
                    /**
                     * @description The ID of the permission
                     * @example 1
                     */
                    id: number;
                    /**
                     * @description The name of the permission
                     * @example CREATE_FEATURE_STRATEGY
                     */
                    name: string;
                    /**
                     * @description The display name of the permission
                     * @example Create activation strategies
                     */
                    displayName: string;
                    /**
                     * @description The type of the permission
                     * @example environment
                     */
                    type: string;
                    /**
                     * @description The environment that the permission applies to
                     * @example dev
                     */
                    environment?: string | null;
                    /**
                     * @description Whether the user has this permission
                     * @example true
                     */
                    hasPermission: boolean;
                }[];
            };
            /** @description The user that this access overview is for */
            user: components["schemas"]["userSchema"];
            /** @description The name of the root role that this user has */
            rootRole: components["schemas"]["roleSchema"];
            /** @description The list of project roles that this user has in the selected project */
            projectRoles: {
                /**
                 * @description The role id
                 * @example 9
                 */
                id: number;
                /**
                 * @description A role can either be a global root role (applies to all projects) or a project role
                 * @example root
                 */
                type: string;
                /**
                 * @description The name of the role
                 * @example Editor
                 */
                name: string;
                /**
                 * @description A more detailed description of the role and what use it's intended for
                 * @example Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default.
                 */
                description?: string;
                /**
                 * @description What project the role belongs to
                 * @example default
                 */
                project?: string | null;
                /** @description The permissions that this role has */
                permissions: {
                    /**
                     * @description The ID of the permission
                     * @example 1
                     */
                    id: number;
                    /**
                     * @description The name of the permission
                     * @example CREATE_FEATURE_STRATEGY
                     */
                    name: string;
                    /**
                     * @description The display name of the permission
                     * @example Create activation strategies
                     */
                    displayName: string;
                    /**
                     * @description The type of the permission
                     * @example environment
                     */
                    type: string;
                    /**
                     * @description The environment that the permission applies to
                     * @example dev
                     */
                    environment?: string | null;
                }[];
            }[];
        };
        /** @description An Unleash user */
        userSchema: {
            /**
             * @description The user id
             * @example 123
             */
            id: number;
            /**
             * @description Name of the user
             * @example User
             */
            name?: string | null;
            /**
             * @description Email of the user
             * @example user@example.com
             */
            email?: string;
            /**
             * @description A unique username for the user
             * @example hunter
             */
            username?: string | null;
            /**
             * @description URL used for the user profile image
             * @example https://example.com/242x200.png
             */
            imageUrl?: string;
            /**
             * @description If the user is actively inviting other users, this is the link that can be shared with other users
             * @example http://localhost:4242/invite-link/some-secret
             */
            inviteLink?: string;
            /**
             * @description How many unsuccessful attempts at logging in has the user made
             * @example 3
             */
            loginAttempts?: number;
            /**
             * @description Is the welcome email sent to the user or not
             * @example false
             */
            emailSent?: boolean;
            /**
             * @description Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned
             * @example 1
             */
            rootRole?: number;
            /**
             * Format: date-time
             * @description The last time this user logged in
             * @example 2023-06-30T11:42:00.345Z
             */
            seenAt?: string | null;
            /**
             * Format: date-time
             * @description The user was created at this time
             * @example 2023-06-30T11:41:00.123Z
             */
            createdAt?: string;
            /**
             * @description A user is either an actual User or a Service Account
             * @example User
             * @enum {string}
             */
            accountType?: "User" | "Service Account";
            /** @description Deprecated */
            permissions?: string[];
            /**
             * @description The SCIM ID of the user, only present if managed by SCIM
             * @example 01HTMEXAMPLESCIMID7SWWGHN6
             */
            scimId?: string | null;
            /**
             * @description Count of active browser sessions for this user
             * @example 2
             */
            activeSessions?: number | null;
            /**
             * @description Experimental. The number of deleted browser sessions after last login
             * @example 1
             */
            deletedSessions?: number;
        };
        /** @description An overview of user groups and users. */
        usersGroupsBaseSchema: {
            /**
             * @description A list of user groups and their configuration.
             * @example [
             *       {
             *         "id": 1,
             *         "name": "unleash-e2e-7095756699593281",
             *         "userCount": 1,
             *         "rootRole": null
             *       }
             *     ]
             */
            groups?: components["schemas"]["groupSchema"][];
            /**
             * @description A list of users.
             * @example [
             *       {
             *         "id": 4,
             *         "name": "unleash-e2e-user2-7095756699593281",
             *         "email": "unleash-e2e-user2-7095756699593281@test.com",
             *         "accountType": "User"
             *       },
             *       {
             *         "id": 1,
             *         "username": "admin",
             *         "accountType": "User"
             *       }
             *     ]
             */
            users?: components["schemas"]["userSchema"][];
        };
        /** @description Users and root roles */
        usersSchema: {
            /** @description A list of users in the Unleash instance. */
            users: components["schemas"]["userSchema"][];
            /** @description A list of [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles) in the Unleash instance. */
            rootRoles?: components["schemas"]["roleSchema"][];
        };
        /** @description A list of users */
        usersSearchSchema: components["schemas"]["userSchema"][];
        /** @description Validation details for features archive operation */
        validateArchiveFeaturesSchema: {
            /**
             * @description List of parent features that would orphan child features that are not part of the archive operation
             * @example [
             *       "my-feature-4",
             *       "my-feature-5",
             *       "my-feature-6"
             *     ]
             */
            parentsWithChildFeatures: string[];
            /**
             * @description Whether any dependencies will be deleted as part of archive
             * @example true
             */
            hasDeletedDependencies: boolean;
        };
        /** @description Data used to validate a feature flag's name. */
        validateFeatureSchema: {
            /**
             * @description The feature name to validate.
             * @example my-feature-3
             */
            name: string;
            /**
             * @description The id of the project that the feature flag will belong to. If the target project has a feature naming pattern defined, the name will be validated against that pattern.
             * @example project-y
             */
            projectId?: string | null;
        };
        /** @description Used to validate passwords obeying [Unleash password guidelines](https://docs.getunleash.io/using-unleash/deploy/configuring-unleash#securing-unleash) */
        validatePasswordSchema: {
            /**
             * @description The password to validate
             * @example hunter2
             */
            password: string;
        };
        /** @description The result of validating a tag type. */
        validateTagTypeSchema: {
            /**
             * @description Whether or not the tag type is valid.
             * @example true
             */
            valid: boolean;
            tagType: components["schemas"]["tagTypeSchema"];
        };
        /** @description A object containing a list of valid Unleash tokens. */
        validatedEdgeTokensSchema: {
            /** @description The list of Unleash token objects. Each object contains the token itself and some additional metadata. */
            tokens: components["schemas"]["edgeTokenSchema"][];
        };
        /** @description A representation of an evaluated Unleash feature variant. */
        variantFlagSchema: {
            /**
             * @description The name of the variant. Will always be disabled if `enabled` is false.
             * @example blue
             */
            name?: string;
            /**
             * @description Whether the variant is enabled or not.
             * @example true
             */
            enabled?: boolean;
            /** @description Additional data associated with this variant. */
            payload?: {
                /**
                 * @description The type of data contained.
                 * @example json
                 * @enum {string}
                 */
                type?: "string" | "json" | "csv" | "number";
                /**
                 * @description The actual associated data
                 * @example { "starter": "squirtle" }
                 */
                value?: string;
            };
            /**
             * @description Whether the feature is enabled or not.
             * @example true
             */
            feature_enabled?: boolean;
            /**
             * @deprecated
             * @description Use `feature_enabled` instead.
             * @example true
             */
            featureEnabled?: boolean;
        };
        /** @description A variant allows for further separation of users into segments. See [our excellent documentation](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) for a more detailed description */
        variantSchema: {
            /**
             * @description The variants name. Is unique for this feature flag
             * @example blue_group
             */
            name: string;
            /** @description The weight is the likelihood of any one user getting this variant. It is a number between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information */
            weight: number;
            /**
             * @description Set to fix if this variant must have exactly the weight allocated to it. If the type is variable, the weight will adjust so that the total weight of all variants adds up to 1000
             * @example variable
             * @enum {string}
             */
            weightType?: "variable" | "fix";
            /**
             * @description [Stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) is how Unleash guarantees that the same user gets the same variant every time
             * @example custom.context.field
             */
            stickiness?: string;
            /**
             * @description Extra data configured for this variant
             * @example {
             *       "type": "json",
             *       "value": "{\"color\": \"red\"}"
             *     }
             */
            payload?: {
                /**
                 * @description The type of the value. Commonly used types are string, number, json and csv.
                 * @enum {string}
                 */
                type: "json" | "csv" | "string" | "number";
                /** @description The actual value of payload */
                value: string;
            };
            /** @description Overrides assigning specific variants to specific users. The weighting system automatically assigns users to specific groups for you, but any overrides in this list will take precedence. */
            overrides?: components["schemas"]["overrideSchema"][];
        };
        /** @description A list of variants */
        variantsSchema: components["schemas"]["variantSchema"][];
        /** @description Detailed information about an Unleash version */
        versionSchema: {
            /** @description The current version of Unleash. */
            current: {
                /**
                 * @description The OSS version used when building this Unleash instance, represented as a git revision belonging to the [main Unleash git repo](https://github.com/Unleash/unleash/)
                 * @example 5.3.0-main
                 */
                oss?: string;
                /**
                 * @description The Enterpris version of Unleash used to build this instance, represented as a git revision belonging to the [Unleash Enterprise](https://github.com/ivarconr/unleash-enterprise) repository. Will be an empty string if no enterprise version was used,
                 * @example 5.3.0-main+2105.45ed03c9
                 */
                enterprise?: string;
            };
            /** @description Information about the latest available Unleash releases. Will be an empty object if no data is available. */
            latest: {
                /**
                 * @description The latest available OSS version of Unleash
                 * @example 5.1.5
                 */
                oss?: string;
                /**
                 * @description The latest available Enterprise version of Unleash
                 * @example 5.1.5
                 */
                enterprise?: string;
            };
            /**
             * @description Whether the Unleash server is running the latest release (`true`) or if there are updates available (`false`)
             * @example true
             */
            isLatest: boolean;
            /**
             * @description The instance identifier of the Unleash instance
             * @example 0d652a82-43db-4144-8e02-864b0b030710
             */
            instanceId?: string;
            /**
             * Format: date-time
             * @description The date and time of when this Unleash instance version was built
             * @example 2023-06-30T11:41:00.123Z
             */
            buildDate?: string | null;
        };
        /** @description Data related to actionable change requests in a project. */
        actionableChangeRequestsSchema: {
            /** @description The number of actionable change requests in the project. */
            total: number;
        };
        /** @description Describes a single permission */
        adminPermissionSchema: {
            /**
             * @description The identifier for this permission
             * @example 3
             */
            id: number;
            /**
             * @description The name of this permission
             * @example UPDATE_FEATURE
             */
            name: string;
            /**
             * @description The name to display in listings of permissions
             * @example Update feature flags
             */
            displayName: string;
            /**
             * @description What level this permission applies to. Either root, project or the name of the environment it applies to
             * @example project
             */
            type: string;
            /**
             * @description Which environment this permission applies to
             * @example development
             */
            environment?: string | null;
        };
        /** @description What kind of permissions are available */
        adminPermissionsSchema: {
            /** @description Returns permissions available at all three levels (root|project|environment) */
            permissions: {
                /** @description Permissions available at the root level, i.e. not connected to any specific project or environment */
                root?: components["schemas"]["adminPermissionSchema"][];
                /** @description Permissions available at the project level */
                project: components["schemas"]["adminPermissionSchema"][];
                /** @description A list of environments with available permissions per environment */
                environments: {
                    /**
                     * @description The name of the environment
                     * @example development
                     */
                    name: string;
                    /** @description Permissions available for this environment */
                    permissions: components["schemas"]["adminPermissionSchema"][];
                }[];
            };
            /**
             * @description The api version of this response. A natural increasing number. Only increases if format changes
             * @example 1
             * @enum {integer}
             */
            version: 1 | 2;
        };
        /** @description Data required to move a feature flag to a project. */
        changeProjectSchema: {
            /**
             * @description The project to move the feature flag to.
             * @example newProject
             */
            newProjectId: string;
        };
        /** @description Data used to clone an environment. */
        cloneEnvironmentSchema: {
            /**
             * @description The name of the new cloned environment, this cannot be changed later
             * @example development
             */
            name: string;
            /**
             * @description Updates the type of environment (i.e. development or production).
             * @example development
             */
            type: string;
            /** @description A list of projects that should be included in the cloned environment. */
            projects?: string[];
            /** @description Copies the RBAC permissions from the source environment if true. Defaults to true */
            clonePermissions?: boolean;
        };
        /** @description Data required to create a new [environment](https://docs.getunleash.io/reference/environments) */
        createEnvironmentSchema: {
            /** @description The name of the environment. Must be a URL-friendly string according to [RFC 3968, section 2.3](https://www.rfc-editor.org/rfc/rfc3986#section-2.3) */
            name: string;
            /** @description The [type of environment](https://docs.getunleash.io/reference/environments#environment-types) you would like to create. Unleash officially recognizes the following values:
             *     - `development`
             *     - `test`
             *     - `preproduction`
             *     - `production`
             *
             *     If you pass a string that is not one of the recognized values, Unleash will accept it, but it will carry no special semantics. */
            type: string;
            /** @description Newly created environments are enabled by default. Set this property to `false` to create the environment in a disabled state. */
            enabled?: boolean;
            /** @description Defines where in the list of environments to place this environment. The list uses an ascending sort, so lower numbers are shown first. You can change this value later. */
            sortOrder?: number;
            /**
             * @description Experimental field. The number of approvals required before a change request can be applied in this environment.
             * @example 3
             */
            requiredApprovals?: number | null;
        };
        /** @description Data used to create a new [project](https://docs.getunleash.io/reference/projects). */
        createProjectSchema: {
            /**
             * @deprecated
             * @description The project's identifier. If this property is not present or is an empty string, Unleash will generate the project id automatically. This property is deprecated.
             * @example pet-shop
             */
            id?: string;
            /**
             * @description The project's name. The name must contain at least one non-whitespace character.
             * @example Pet shop
             */
            name: string;
            /**
             * @description The project's description.
             * @example This project contains features related to the new pet shop.
             */
            description?: string | null;
            /**
             * @description A mode of the project affecting what actions are possible in this project
             * @default open
             * @example open
             * @enum {string}
             */
            mode: "open" | "protected" | "private";
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @default default
             * @example userId
             */
            defaultStickiness: string;
            /**
             * @description A list of environments that should be enabled for this project. If this property is missing, Unleash will default to enabling all non-deprecated environments for the project. An empty list will result in no environment enabled for the project.
             * @example [
             *       "production",
             *       "development"
             *     ]
             */
            environments?: string[];
            /** @description A list of environments that should have change requests enabled. If the list includes environments not in the `environments` list, they will still have change requests enabled. */
            changeRequestEnvironments?: {
                /**
                 * @description The name of the environment to configure change requests for.
                 * @example production
                 */
                name: string;
                /**
                 * @description The number of approvals required for a change request to be fully approved and ready to applied in this environment. If no value is provided, it will be set to the default number, which is 1. Values will be clamped to between 1 and 10 inclusive.
                 * @default 1
                 * @example 3
                 */
                requiredApprovals: number;
            }[];
        };
        /** @description A write model for the custom role and permissions to allow Unleash to decide what actions a role holder is allowed to perform */
        createRoleWithPermissionsSchema: {
            /**
             * @description The name of the custom role
             * @example external-contributors
             */
            name: string;
            /**
             * @description A more detailed description of the custom role and what use it's intended for
             * @example Users with external-contributors role have limited access to most features in Unleash
             */
            description?: string;
            /**
             * @description [Custom root roles](https://docs.getunleash.io/reference/rbac#custom-root-roles) (type=root-custom) are root roles with a custom set of permissions. [Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) (type=custom) contain a specific set of permissions for project resources.
             * @example root-custom
             * @enum {string}
             */
            type?: "root-custom" | "custom";
            /** @description A list of permissions assigned to this role */
            permissions?: {
                /**
                 * @description The name of the permission
                 * @example CREATE_PROJECT
                 */
                name: string;
                /**
                 * @description The environments of the permission if the permission is environment specific
                 * @example development
                 */
                environment?: string | null;
            }[];
        } | {
            /**
             * @description The name of the custom role
             * @example external-contributors
             */
            name: string;
            /**
             * @description A more detailed description of the custom role and what use it's intended for
             * @example Users with external-contributors role have limited access to most features in Unleash
             */
            description?: string;
            /**
             * @description [Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) contain a specific set of permissions for project resources.
             * @example custom
             * @enum {string}
             */
            type?: "custom";
            /** @description A list of permissions assigned to this role */
            permissions?: {
                /**
                 * @description The id of the permission
                 * @example 2
                 */
                id: number;
                /**
                 * @description The name of the permission
                 * @example CREATE_PROJECT
                 */
                name?: string;
                /**
                 * @description The environments of the permission if the permission is environment specific
                 * @example development
                 */
                environment?: string | null;
            }[];
        };
        /** @description A list of invoices */
        invoicesSchema: {
            /**
             * @description A formatted representation of the amount due.
             * @example € 123.00
             */
            amountFormatted: string;
            /**
             * @description `true` if the invoice has been paid, `false` if it has not.
             * @example true
             */
            paid: boolean;
            /**
             * @description The current status of the invoice
             * @example pending
             */
            status: string;
            /**
             * @description When the invoice is due
             * @example 2018-11-13
             */
            dueDate?: string;
            /**
             * Format: uri
             * @description A URL pointing to where the invoice can be found.
             * @example https://invoice.url
             */
            invoiceURL: string;
            /**
             * Format: uri
             * @description A link to a PDF-version of the invoice.
             * @example https://invoice.url/pdf
             */
            invoicePDF: string;
        }[];
        /** @description Settings for configuring OpenID Connect as a login provider for Unleash */
        oidcSettingsSchema: {
            /**
             * @description Whether to enable or disable OpenID Connect for this instance
             * @example true
             * @enum {boolean}
             */
            enabled: true;
            /**
             * Format: uri
             * @description The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)
             * @example https://myoidchost.azure.com/.well-known/openid-configuration
             */
            discoverUrl?: string;
            /**
             * @description The OIDC client ID of this application.
             * @example FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B
             */
            clientId: string;
            /**
             * @description Shared secret from OpenID server. Used to authenticate login requests
             * @example qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO
             */
            secret: string;
            /** @description Auto create users based on email addresses from login tokens */
            autoCreate?: boolean;
            /** @description Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active */
            enableSingleSignOut?: boolean;
            /**
             * @description [Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`
             * @example getunleash.io,getunleash.ai
             */
            emailDomains?: string;
            /**
             * @description Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated.
             *      Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information
             *
             * @example urn:okta:loa:2fa:any phr
             */
            acrValues?: string;
            /**
             * @description The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.
             * @example RS256
             * @enum {string}
             */
            idTokenSigningAlgorithm?: "RS256" | "RS384" | "RS512";
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the OIDC token response to read which groups the user belongs to from.
             * @example groups
             */
            groupJsonPath?: string;
            /**
             * @description When enabled Unleash will also request the 'groups' scope as part of the login request.
             * @example false
             */
            addGroupsScope?: boolean;
        } | {
            /**
             * @description Whether to enable or disable OpenID Connect for this instance
             * @example false
             * @enum {boolean}
             */
            enabled?: false;
            /**
             * Format: uri
             * @description The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)
             * @example https://myoidchost.azure.com/.well-known/openid-configuration
             */
            discoverUrl?: string;
            /**
             * @description The OIDC client ID of this application.
             * @example FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B
             */
            clientId?: string;
            /**
             * @description Shared secret from OpenID server. Used to authenticate login requests
             * @example qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO
             */
            secret?: string;
            /** @description Auto create users based on email addresses from login tokens */
            autoCreate?: boolean;
            /** @description Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active */
            enableSingleSignOut?: boolean;
            /**
             * @description [Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`
             * @example getunleash.io,getunleash.ai
             */
            emailDomains?: string;
            /**
             * @description Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated.
             *      Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information
             *
             * @example urn:okta:loa:2fa:any phr
             */
            acrValues?: string;
            /**
             * @description The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.
             * @example RS256
             * @enum {string}
             */
            idTokenSigningAlgorithm?: "RS256" | "RS384" | "RS512";
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the OIDC token response to read which groups the user belongs to from.
             * @example groups
             */
            groupJsonPath?: string;
            /**
             * @description When enabled Unleash will also request the 'groups' scope as part of the login request.
             * @example false
             */
            addGroupsScope?: boolean;
        };
        /** @description Does the server allow username/password authentication */
        passwordAuthSchema: {
            /**
             * @description Is username/password authentication disabled
             * @example false
             */
            disabled?: boolean;
        };
        /**
         * @deprecated
         * @description An overview of users and available roles within a project.
         */
        projectUsersSchema: {
            /** @description A list of users with access to this project and their role within it. */
            users: components["schemas"]["userWithProjectRoleSchema"][];
            /** @description A list of roles that are available for this project */
            roles: components["schemas"]["roleSchema"][];
        };
        /** @description An object describing roles for a project and what users and groups are part of that role. */
        projectAccessConfigurationSchema: {
            /** @description A list of roles that are available within this project. */
            roles: {
                /**
                 * @description The id of the role.
                 * @example 1
                 */
                id?: number;
                /**
                 * @description A list of group ids that will be assigned this role
                 * @example [
                 *       1,
                 *       2,
                 *       3
                 *     ]
                 */
                groups?: number[];
                /**
                 * @description A list of user ids that will be assigned this role
                 * @example [
                 *       1,
                 *       2,
                 *       3
                 *     ]
                 */
                users?: number[];
            }[];
        };
        /** @description An object describing access permissions for a given project. */
        projectAccessSchema: {
            /** @description A list of groups that have access to this project */
            groups: components["schemas"]["groupWithProjectRoleSchema"][];
            /** @description A list of users and their roles within this project */
            users: components["schemas"]["userWithProjectRoleSchema"][];
            /** @description A list of roles that are available within this project. */
            roles: components["schemas"]["roleSchema"][];
        };
        /** @description An object containing a collection of roles, a collection of groups and a collection of users. */
        projectAddAccessSchema: {
            /** @description A list of role IDs */
            roles: number[];
            /** @description A list of group IDs */
            groups: number[];
            /** @description A list of user IDs */
            users: number[];
        };
        /** @description Details about the newly created project. */
        projectCreatedSchema: {
            /**
             * @description The project's identifier.
             * @example pet-shop
             */
            id: string;
            /**
             * @description The project's name.
             * @example Pet shop
             */
            name: string;
            /**
             * @description The project's description.
             * @example This project contains features related to the new pet shop.
             */
            description?: string | null;
            /**
             * @description A limit on the number of features allowed in the project. `null` if no limit.
             * @example 100
             */
            featureLimit?: number | null;
            /**
             * @description A mode of the project affecting what actions are possible in this project
             * @example open
             * @enum {string}
             */
            mode?: "open" | "protected" | "private";
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness?: string;
            /**
             * @description The environments enabled for the project.
             * @example [
             *       "production",
             *       "staging"
             *     ]
             */
            environments?: string[];
            /** @description The list of environments that have change requests enabled. */
            changeRequestEnvironments?: {
                /**
                 * @description The name of the environment this change request configuration applies to.
                 * @example production
                 */
                name: string;
                /**
                 * @description The number of approvals required for a change request to be fully approved and ready to applied in this environment. If no value is provided, it will be set to the default number, which is 1. The value must be greater than or equal to 1.
                 * @default 1
                 * @example 3
                 */
                requiredApprovals: number;
            }[];
        };
        /** @description An overview of how many users and groups are mapped to the specified project with the specified role. */
        projectRoleSchema: {
            /**
             * @description The id of the project user and group count are counted for.
             * @example project-a
             */
            project: string;
            /**
             * @description Id of the role the user and group count are counted for.
             * @example 3
             */
            role?: number;
            /**
             * @description Number of users mapped to this project.
             * @example 1
             */
            userCount?: number;
            /**
             * @description Number of service accounts mapped to this project.
             * @example 1
             */
            serviceAccountCount?: number;
            /**
             * @description Number of groups mapped to this project.
             * @example 1
             */
            groupCount?: number;
        };
        /** @description A collection of projects with counts of users and groups mapped to them with specified roles. */
        projectRoleUsageSchema: {
            /** @description A collection of projects with counts of users and groups mapped to them with specified roles. */
            projects?: components["schemas"]["projectRoleSchema"][];
        };
        /** @description A read model for the role and permissions to allow Unleash to decide what actions a role holder is allowed to perform */
        roleWithPermissionsSchema: {
            /**
             * @description The role id
             * @example 9
             */
            id: number;
            /**
             * @description A role can either be a global `root` role, or a `project` role or a `custom` project role or a custom global `root-custom` role
             * @example root
             */
            type: string;
            /**
             * @description The name of the role
             * @example Editor
             */
            name: string;
            /**
             * @description A more detailed description of the role and what use it's intended for
             * @example Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default.
             */
            description?: string;
            /** @description A list of permissions assigned to this role */
            permissions: components["schemas"]["adminPermissionSchema"][];
        };
        /** @description A single user role received after creation or update of a role */
        roleWithVersionSchema: {
            /**
             * @description The version of this schema
             * @example 1
             */
            version: number;
            /** @description A single role */
            roles: components["schemas"]["roleSchema"];
        };
        /** @description A collection of user roles */
        rolesWithVersionSchema: {
            /**
             * @description The version of this schema
             * @example 1
             */
            version: number;
            /** @description A list of roles */
            roles: components["schemas"]["roleSchema"][];
        };
        /** @description Settings used to authenticate via SAML */
        samlSettingsSchema: {
            /**
             * @description Whether to enable or disable SAML 2.0 for this instance
             * @example true
             * @enum {boolean}
             */
            enabled?: true;
            /**
             * @description The SAML 2.0 entity ID
             * @example http://localhost:8080/auth/realms/master
             */
            entityId: string;
            /**
             * @description Which URL to use for Single Sign On
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOnUrl: string;
            /**
             * @description The X509 certificate used to validate requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            certificate: string;
            /**
             * @description Which URL to use for Single Sign Out
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOutUrl?: string;
            /**
             * @description Signing certificate for sign out requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            spCertificate?: string;
            /**
             * @description Should Unleash create users based on the emails coming back in the authentication reply from the SAML server
             * @example true
             */
            autoCreate?: boolean;
            /**
             * @description A comma separated list of email domains that Unleash will auto create user accounts for.
             * @example getunleash.io,unleash-hosted.com
             */
            emailDomains?: string;
            /**
             * @description Assign this root role to auto created users
             * @example Editor
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the SAML token response from which to read the groups the user belongs to.
             * @example groups
             */
            groupJsonPath?: string;
        } | {
            /**
             * @description Whether to enable or disable SAML 2.0 for this instance
             * @example false
             * @enum {boolean}
             */
            enabled?: false;
            /**
             * @description The SAML 2.0 entity ID
             * @example http://localhost:8080/auth/realms/master
             */
            entityId?: string;
            /**
             * @description Which URL to use for Single Sign On
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOnUrl?: string;
            /**
             * @description The X509 certificate used to validate requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            certificate?: string;
            /**
             * @description Which URL to use for Single Sign Out
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOutUrl?: string;
            /**
             * @description Signing certificate for sign out requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            spCertificate?: string;
            /**
             * @description Should Unleash create users based on the emails coming back in the authentication reply from the SAML server
             * @example true
             */
            autoCreate?: boolean;
            /**
             * @description A comma separated list of email domains that Unleash will auto create user accounts for.
             * @example getunleash.io,unleash-hosted.com
             */
            emailDomains?: string;
            /**
             * @description Assign this root role to auto created users
             * @example Editor
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the SAML token response from which to read the groups the user belongs to.
             * @example groups
             */
            groupJsonPath?: string;
        };
        /** @description Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single feature or segment change. */
        changeRequestCreateSchema: {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateSegment";
            payload: components["schemas"]["upsertSegmentSchema"];
        } | {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteSegment";
            /** @description Required data to delete a segment. */
            payload: {
                /**
                 * @description The ID of the segment to delete.
                 * @example 1
                 */
                id: number;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateEnabled";
            payload: {
                /**
                 * @description The new state of the feature.
                 * @example true
                 */
                enabled: boolean;
                /**
                 * @description Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added
                 * @example true
                 */
                shouldActivateDisabledStrategies?: boolean;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addStrategy";
            payload: components["schemas"]["createFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateStrategy";
            payload: components["schemas"]["updateFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteStrategy";
            payload: {
                /**
                 * @description The ID of the strategy to update.
                 * @example 0103487d-8788-4cda-af59-0a68642dbc5a
                 */
                id: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "archiveFeature";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "patchVariant";
            payload: {
                variants: components["schemas"]["variantSchema"][];
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "reorderStrategy";
            payload: components["schemas"]["setStrategySortOrderSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addDependency";
            payload: components["schemas"]["createDependentFeatureSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteDependency";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addReleasePlan";
            payload: components["schemas"]["releasePlanTemplateIdSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "startMilestone";
            /** @description The ID of the release plan and which of its milestones to start. */
            payload: {
                /**
                 * @description The ID of the milestone to start. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                milestoneId: string;
                /**
                 * @description The ID of the release plan. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteReleasePlan";
            /** @description The Id of the release plan to remove. */
            payload: {
                /**
                 * @description The Id of the release plan. This id is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        };
        /** @description Either a single change or a list of changes to create a change request from. */
        changeRequestOneOrManyCreateSchema: {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateSegment";
            payload: components["schemas"]["upsertSegmentSchema"];
        } | {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteSegment";
            /** @description Required data to delete a segment. */
            payload: {
                /**
                 * @description The ID of the segment to delete.
                 * @example 1
                 */
                id: number;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateEnabled";
            payload: {
                /**
                 * @description The new state of the feature.
                 * @example true
                 */
                enabled: boolean;
                /**
                 * @description Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added
                 * @example true
                 */
                shouldActivateDisabledStrategies?: boolean;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addStrategy";
            payload: components["schemas"]["createFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateStrategy";
            payload: components["schemas"]["updateFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteStrategy";
            payload: {
                /**
                 * @description The ID of the strategy to update.
                 * @example 0103487d-8788-4cda-af59-0a68642dbc5a
                 */
                id: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "archiveFeature";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "patchVariant";
            payload: {
                variants: components["schemas"]["variantSchema"][];
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "reorderStrategy";
            payload: components["schemas"]["setStrategySortOrderSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addDependency";
            payload: components["schemas"]["createDependentFeatureSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteDependency";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addReleasePlan";
            payload: components["schemas"]["releasePlanTemplateIdSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "startMilestone";
            /** @description The ID of the release plan and which of its milestones to start. */
            payload: {
                /**
                 * @description The ID of the milestone to start. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                milestoneId: string;
                /**
                 * @description The ID of the release plan. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteReleasePlan";
            /** @description The Id of the release plan to remove. */
            payload: {
                /**
                 * @description The Id of the release plan. This id is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        } | components["schemas"]["changeRequestCreateSchema"][];
        /** @description A feature and all its suggested changes. */
        changeRequestFeatureSchema: {
            /**
             * @description The name of the feature
             * @example my-feature
             */
            name: string;
            /**
             * @description A string describing the conflicts related to this change. Only present if there are any concflicts on the feature level.
             * @example Feature has been archived
             */
            conflict?: string;
            /** @description List of changes inside change request. This list may be empty when listing all change requests for a project. */
            changes: components["schemas"]["changeRequestChangeSchema"][];
            defaultChange?: components["schemas"]["changeRequestDefaultChangeSchema"];
        };
        /** @description Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single feature change. */
        changeRequestCreateFeatureSchema: {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateEnabled";
            payload: {
                /**
                 * @description The new state of the feature.
                 * @example true
                 */
                enabled: boolean;
                /**
                 * @description Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added
                 * @example true
                 */
                shouldActivateDisabledStrategies?: boolean;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addStrategy";
            payload: components["schemas"]["createFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateStrategy";
            payload: components["schemas"]["updateFeatureStrategySchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteStrategy";
            payload: {
                /**
                 * @description The ID of the strategy to update.
                 * @example 0103487d-8788-4cda-af59-0a68642dbc5a
                 */
                id: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "archiveFeature";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "patchVariant";
            payload: {
                variants: components["schemas"]["variantSchema"][];
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "reorderStrategy";
            payload: components["schemas"]["setStrategySortOrderSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addDependency";
            payload: components["schemas"]["createDependentFeatureSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteDependency";
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "addReleasePlan";
            payload: components["schemas"]["releasePlanTemplateIdSchema"];
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "startMilestone";
            /** @description The ID of the release plan and which of its milestones to start. */
            payload: {
                /**
                 * @description The ID of the milestone to start. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                milestoneId: string;
                /**
                 * @description The ID of the release plan. This ID is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        } | {
            /**
             * @description The name of the feature that this change applies to.
             * @example my-best-feature
             */
            feature: string;
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteReleasePlan";
            /** @description The Id of the release plan to remove. */
            payload: {
                /**
                 * @description The Id of the release plan. This id is an ulid
                 * @example 01JB9GGTGQYEQ9D40R17T3YVW3
                 */
                planId: string;
            };
        };
        /** @description Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single segment change. */
        changeRequestCreateSegmentSchema: {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "updateSegment";
            payload: components["schemas"]["upsertSegmentSchema"];
        } | {
            /**
             * @description The name of this action.
             * @enum {string}
             */
            action: "deleteSegment";
            /** @description Required data to delete a segment. */
            payload: {
                /**
                 * @description The ID of the segment to delete.
                 * @example 1
                 */
                id: number;
            };
        };
        /** @description Information about a [change request](https://docs.getunleash.io/reference/change-requests) approval. */
        changeRequestApprovalSchema: {
            /** @description Information about the user who gave this approval. */
            createdBy: {
                /**
                 * @description The ID of the user who gave this approval.
                 * @example 33
                 */
                id?: number;
                /**
                 * @description The approving user's username.
                 * @example unleash-user
                 */
                username?: string;
                /**
                 * Format: uri
                 * @description The URL where the user's image can be found.
                 */
                imageUrl?: string;
            };
            /**
             * Format: date-time
             * @description When the approval was given.
             * @example 2022-12-12T12:13:24.218Z
             */
            createdAt: string;
        };
        /** @description A list of environment-specific [change request](https://docs.getunleash.io/reference/change-requests) configurations. */
        changeRequestConfigSchema: components["schemas"]["changeRequestEnvironmentConfigSchema"][];
        /** @description The [change request](https://docs.getunleash.io/reference/change-requests) configuration for a specific environment. */
        changeRequestEnvironmentConfigSchema: {
            /**
             * @description The environment that this configuration applies to.
             * @example my-dev-environment
             */
            environment: string;
            /**
             * @description The [type of the environment](https://docs.getunleash.io/reference/environments#environment-types) listed in `environment`.
             * @example development
             */
            type: string;
            /**
             * @description `true` if this environment has change requests enabled, otherwise `false`.
             * @example true
             */
            changeRequestEnabled: boolean;
            /**
             * @description The number of approvals that are required for a change request to be fully approved and ready to be applied in this environment.
             * @example 2
             */
            requiredApprovals: number | null;
        };
        /** @description Data used to add a comment to a [change request](https://docs.getunleash.io/reference/change-requests). */
        changeRequestAddCommentSchema: {
            /**
             * @description The content of the comment.
             * @example This is a comment
             */
            text: string;
        };
        /** @description A comment belonging to a [change request](https://docs.getunleash.io/reference/change-requests). */
        changeRequestCommentSchema: {
            /**
             * @description The comment's ID. Unique per change request.
             * @example 33
             */
            id?: number;
            /**
             * @description The content of the comment.
             * @example This is a comment
             */
            text: string;
            /** @description Information about the user who posted the comment */
            createdBy: {
                /**
                 * @description The user's username.
                 * @example unleash-user
                 */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL where the user's image can be found.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When the comment was made.
             * @example 2022-12-12T12:13:24.218Z
             */
            createdAt: string;
        };
        /** @description Data used to update change request in an environment */
        updateChangeRequestEnvironmentConfigSchema: {
            /** @description `true` if change requests should be enabled, otherwise `false`. */
            changeRequestsEnabled: boolean;
            /**
             * @description The number of approvals required before a change request can be applied in this environment.
             * @example 3
             */
            requiredApprovals?: number;
        };
        /** @description A change request change, containing info about the type of change and the specific changes. */
        changeRequestChangeSchema: {
            /**
             * @description The ID of this change.
             * @example 33
             */
            id: number;
            /**
             * @description The kind of action that the change contains information about.
             * @example updateStrategy
             */
            action: string;
            /**
             * @description A description of the conflict caused by this change. Only present if there are any conflicts.
             * @example Strategy has been deleted
             */
            conflict?: string;
            /** @description The data required to perform this action. */
            payload?: string | boolean | Record<string, never> | number | components["schemas"]["setStrategySortOrderSchema"];
            /** @description The user who created this change. */
            createdBy?: {
                /** @description The user's username. */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL where the user's image can be found.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change was suggested
             * @example 2023-07-31T13:22:03+02:00
             */
            createdAt?: string;
            /** @description Information about scheduled change requests that would casue conflicts with this change if applied. */
            scheduleConflicts?: {
                /** @description The list of scheduled change requests that would cause conflict with this change. */
                changeRequests: {
                    /** @description The ID of the change request. */
                    id: number;
                    /** @description The title of the change request, if any. Only present if there is a title. */
                    title?: string;
                }[];
            };
        };
        /** @description A change request segment change, containing info about the type of segment change and the specific changes. */
        changeRequestSegmentChangeSchema: {
            /**
             * @description The ID of this change.
             * @example 33
             */
            id: number;
            /**
             * @description The kind of action that the change contains information about.
             * @example updateStrategy
             */
            action: string;
            /**
             * @description A description of the conflict caused by this change. Only present if there are any conflicts.
             * @example Strategy has been deleted
             */
            conflict?: string;
            /** @description The data required to perform this action. */
            payload: string | boolean | Record<string, never> | number | components["schemas"]["setStrategySortOrderSchema"];
            /** @description The user who created this change. */
            createdBy?: {
                /** @description The user's username. */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL where the user's image can be found.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change was suggested
             * @example 2023-07-31T13:22:03+02:00
             */
            createdAt?: string;
            /** @description Information about scheduled change requests that would casue conflicts with this change if applied. */
            scheduleConflicts?: {
                /** @description The list of scheduled change requests that would cause conflict with this change. */
                changeRequests: {
                    /** @description The ID of the change request. */
                    id: number;
                    /** @description The title of the change request, if any. Only present if there is a title. */
                    title?: string;
                }[];
            };
            /**
             * @description The current name of the segment
             * @example beta-users
             */
            name: string;
        };
        /** @description Data used to update a [change request](https://docs.getunleash.io/reference/change-requests)'s requested approvers. */
        changeRequestSetApproversSchema: {
            /** @description An array of user ids to request approval from. This will replace the current approvers. */
            reviewers: number[];
        };
        /** @description A description of a default change that will be applied with the change request to prevent invalid states.
         *
         *     Default changes are changes that are applied in addition to explicit user-specified changes when a change request is applied. Any default changes are applied in the background and are not a real part of the change request. */
        changeRequestDefaultChangeSchema: {
            /**
             * @description The kind of action this is.
             * @example addStrategy
             */
            action: string;
            /**
             * @description The necessary data to perform this change.
             * @example {
             *       "name": "flexibleRollout",
             *       "title": "",
             *       "disabled": false,
             *       "segments": [],
             *       "parameters": {
             *         "groupId": "my-feature",
             *         "rollout": "100",
             *         "stickiness": "default"
             *       },
             *       "constraints": [
             *         {
             *           "values": [
             *             "ux"
             *           ],
             *           "inverted": false,
             *           "operator": "STR_CONTAINS",
             *           "contextName": "userId",
             *           "caseInsensitive": false
             *         }
             *       ]
             *     }
             */
            payload: Record<string, never>;
        };
        /** @description A [change request](https://docs.getunleash.io/reference/change-requests) */
        changeRequestSchema: {
            /**
             * @description This change requests's ID.
             * @example 3
             */
            id: number;
            /**
             * @description A title describing the change request's content.
             * @example Increasing gradual rollout
             */
            title?: string;
            /**
             * @description The environment in which the changes should be applied.
             * @example development
             */
            environment: string;
            /**
             * @description The minimum number of approvals required before this change request can be applied.
             * @example 2
             */
            minApprovals: number;
            /**
             * @description The project this change request belongs to.
             * @example unleash-project
             */
            project: string;
            /** @description The list of features and their changes that relate to this change request. */
            features: components["schemas"]["changeRequestFeatureSchema"][];
            /** @description The list of segments and their changes that relate to this change request. */
            segments: components["schemas"]["changeRequestSegmentChangeSchema"][];
            /** @description A list of approvals that this change request has received. */
            approvals?: components["schemas"]["changeRequestApprovalSchema"][];
            /** @description A list of rejections that this change request has received.  */
            rejections?: components["schemas"]["changeRequestApprovalSchema"][];
            /** @description All comments that have been made on this change request. */
            comments?: components["schemas"]["changeRequestCommentSchema"][];
            /** @description The user who created this change request. */
            createdBy: {
                /** @example Hunter */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL of the user's profile image.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change request was created.
             * @example 2023-07-31T13:33:02Z
             */
            createdAt: string;
            /**
             * @description A mapping of each state this change request has entered to the most recent time when it entered that state. If a change request has entered the same state multiple times, only the most recent timestamp will be included.
             * @example {
             *       "Draft": "2023-07-31T13:33:02Z",
             *       "In review": "2023-08-01T10:15:30Z",
             *       "Approved": "2023-08-02T09:01:00Z"
             *     }
             */
            stateTimestamps?: {
                [key: string]: string;
            };
            /**
             * @description The current state of the change request.
             * @enum {string}
             */
            state: "Draft" | "In review" | "Approved" | "Applied" | "Cancelled" | "Rejected";
        } | {
            /**
             * @description This change requests's ID.
             * @example 3
             */
            id: number;
            /**
             * @description A title describing the change request's content.
             * @example Increasing gradual rollout
             */
            title?: string;
            /**
             * @description The environment in which the changes should be applied.
             * @example development
             */
            environment: string;
            /**
             * @description The minimum number of approvals required before this change request can be applied.
             * @example 2
             */
            minApprovals: number;
            /**
             * @description The project this change request belongs to.
             * @example unleash-project
             */
            project: string;
            /** @description The list of features and their changes that relate to this change request. */
            features: components["schemas"]["changeRequestFeatureSchema"][];
            /** @description The list of segments and their changes that relate to this change request. */
            segments: components["schemas"]["changeRequestSegmentChangeSchema"][];
            /** @description A list of approvals that this change request has received. */
            approvals?: components["schemas"]["changeRequestApprovalSchema"][];
            /** @description A list of rejections that this change request has received.  */
            rejections?: components["schemas"]["changeRequestApprovalSchema"][];
            /** @description All comments that have been made on this change request. */
            comments?: components["schemas"]["changeRequestCommentSchema"][];
            /** @description The user who created this change request. */
            createdBy: {
                /** @example Hunter */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL of the user's profile image.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change request was created.
             * @example 2023-07-31T13:33:02Z
             */
            createdAt: string;
            /**
             * @description A mapping of each state this change request has entered to the most recent time when it entered that state. If a change request has entered the same state multiple times, only the most recent timestamp will be included.
             * @example {
             *       "Draft": "2023-07-31T13:33:02Z",
             *       "In review": "2023-08-01T10:15:30Z",
             *       "Approved": "2023-08-02T09:01:00Z"
             *     }
             */
            stateTimestamps?: {
                [key: string]: string;
            };
            /**
             * @description The current state of the change request.
             * @enum {string}
             */
            state: "Scheduled";
            schedule: components["schemas"]["changeRequestScheduleSchema"];
        };
        /** @description Count of change requests in different stages of the [process](https://docs.getunleash.io/reference/change-requests#change-request-flow). */
        changeRequestsCountSchema: {
            /**
             * @description The number of total change requests in this project
             * @example 10
             */
            total: number;
            /**
             * @description The number of applied change requests
             * @example 5
             */
            applied: number;
            /**
             * @description The number of rejected change requests
             * @example 2
             */
            rejected: number;
            /**
             * @description The number of change requests awaiting the review
             * @example 2
             */
            reviewRequired: number;
            /**
             * @description The number of approved change requests
             * @example 1
             */
            approved: number;
            /**
             * @description The number of scheduled change requests
             * @example 1
             */
            scheduled: number;
        };
        /** @description A list of change requests */
        changeRequestsSchema: ({
            /**
             * @description This change requests's ID.
             * @example 3
             */
            id: number;
            /**
             * @description A title describing the change request's content.
             * @example Increasing gradual rollout
             */
            title?: string;
            /**
             * @description The environment in which the changes should be applied.
             * @example development
             */
            environment: string;
            /**
             * @deprecated
             * @description The minimum number of approvals required before this change request can be applied.
             * @example 2
             */
            minApprovals: number;
            /**
             * @description The project this change request belongs to.
             * @example unleash-project
             */
            project: string;
            /** @description The list of features and their changes that relate to this change request. */
            features: components["schemas"]["changeRequestFeatureSchema"][];
            /** @description The list of segments and their changes that relate to this change request. */
            segments: components["schemas"]["changeRequestSegmentChangeSchema"][];
            /**
             * @deprecated
             * @description A list of approvals that this change request has received.
             */
            approvals?: components["schemas"]["changeRequestApprovalSchema"][];
            /**
             * @deprecated
             * @description A list of rejections that this change request has received.
             */
            rejections?: components["schemas"]["changeRequestApprovalSchema"][];
            /**
             * @deprecated
             * @description All comments that have been made on this change request.
             */
            comments?: components["schemas"]["changeRequestCommentSchema"][];
            /** @description The user who created this change request. */
            createdBy: {
                /** @example Hunter */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL of the user's profile image.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change request was created.
             * @example 2023-07-31T13:33:02Z
             */
            createdAt: string;
            /**
             * @description A mapping of each state this change request has entered to the most recent time when it entered that state. If a change request has entered the same state multiple times, only the most recent timestamp will be included.
             * @example {
             *       "Draft": "2023-07-31T13:33:02Z",
             *       "In review": "2023-08-01T10:15:30Z",
             *       "Approved": "2023-08-02T09:01:00Z"
             *     }
             */
            stateTimestamps?: {
                [key: string]: string;
            };
            /**
             * @description The current state of the change request.
             * @enum {string}
             */
            state: "Draft" | "In review" | "Approved" | "Applied" | "Cancelled" | "Rejected";
        } | {
            /**
             * @description This change requests's ID.
             * @example 3
             */
            id: number;
            /**
             * @description A title describing the change request's content.
             * @example Increasing gradual rollout
             */
            title?: string;
            /**
             * @description The environment in which the changes should be applied.
             * @example development
             */
            environment: string;
            /**
             * @deprecated
             * @description The minimum number of approvals required before this change request can be applied.
             * @example 2
             */
            minApprovals: number;
            /**
             * @description The project this change request belongs to.
             * @example unleash-project
             */
            project: string;
            /** @description The list of features and their changes that relate to this change request. */
            features: components["schemas"]["changeRequestFeatureSchema"][];
            /** @description The list of segments and their changes that relate to this change request. */
            segments: components["schemas"]["changeRequestSegmentChangeSchema"][];
            /**
             * @deprecated
             * @description A list of approvals that this change request has received.
             */
            approvals?: components["schemas"]["changeRequestApprovalSchema"][];
            /**
             * @deprecated
             * @description A list of rejections that this change request has received.
             */
            rejections?: components["schemas"]["changeRequestApprovalSchema"][];
            /**
             * @deprecated
             * @description All comments that have been made on this change request.
             */
            comments?: components["schemas"]["changeRequestCommentSchema"][];
            /** @description The user who created this change request. */
            createdBy: {
                /** @example Hunter */
                username?: string | null;
                /**
                 * Format: uri
                 * @description The URL of the user's profile image.
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description When this change request was created.
             * @example 2023-07-31T13:33:02Z
             */
            createdAt: string;
            /**
             * @description A mapping of each state this change request has entered to the most recent time when it entered that state. If a change request has entered the same state multiple times, only the most recent timestamp will be included.
             * @example {
             *       "Draft": "2023-07-31T13:33:02Z",
             *       "In review": "2023-08-01T10:15:30Z",
             *       "Approved": "2023-08-02T09:01:00Z"
             *     }
             */
            stateTimestamps?: {
                [key: string]: string;
            };
            /**
             * @description The current state of the change request.
             * @enum {string}
             */
            state: "Scheduled";
            schedule: components["schemas"]["changeRequestScheduleSchema"];
        })[];
        /** @description A schedule for a change request's application. The schedule can either be pending, failed, or suspended. The schedule will always contain the state of the schedule and the last scheduled time, but other data varies between the different states. */
        changeRequestScheduleSchema: {
            /**
             * Format: date-time
             * @description When this change request will be applied.
             * @example 2023-07-31T13:33:02Z
             */
            scheduledAt: string;
            /**
             * @description The status of the schedule.
             * @example pending
             * @enum {string}
             */
            status: "pending";
        } | {
            /**
             * Format: date-time
             * @description When Unleash last attempted to apply this change request.
             * @example 2023-07-31T13:33:02Z
             */
            scheduledAt: string;
            /**
             * @description The status of the schedule.
             * @example failed
             * @enum {string}
             */
            status: "failed";
            /**
             * @description The reason the scheduled failed to apply.
             * @example conflicts
             */
            reason: string;
            /**
             * @deprecated
             * @description The reason the scheduled failed to apply. Deprecated in favor of the `reason` property.
             * @example conflicts
             */
            failureReason?: string | null;
        } | {
            /**
             * Format: date-time
             * @description When Unleash would have attempted to apply this change request if the schedule was not suspended.
             * @example 2023-07-31T13:33:02Z
             */
            scheduledAt: string;
            /**
             * @description The status of the schedule.
             * @example suspended
             * @enum {string}
             */
            status: "suspended";
            /**
             * @description Why the schedule was suspended.
             * @example The user who scheduled this change request (user id: 123) has been deleted from this Unleash instance.
             */
            reason: string;
        };
        /** @description Data used to update a [change request](https://docs.getunleash.io/reference/change-requests)'s title. */
        changeRequestUpdateTitleSchema: {
            /**
             * @description The new title to use for this change request.
             * @example Increasing gradual rollout
             */
            title: string;
        };
        /** @description A change request view model, used in the UI to identify change requests in conflict */
        scheduledChangeRequestViewModelSchema: {
            /**
             * @description The change request id
             * @example 1
             */
            id: number;
            /**
             * @description The environment of the change request
             * @example production
             */
            environment: string;
            /**
             * @description The change request title
             * @example My awesome change
             */
            title?: string;
        };
        /** @description Query parameters used to modify the list of scheduled change requests returned. For each parameter you add, the list will add any scheduled change requests matching that parameter. */
        changeRequestScheduledQueryParamsSchema: {
            /** @description The name of one or more feature flags. */
            feature?: string[] | string;
            /** @description One or more strategy IDs. */
            strategyId?: string[] | string;
            /** @description One or more features whose variants have been changed in a scheduled change request. This applies to flag-level variants. For changes to strategy variants, use the `strategyId` query parameter with the relevant strategy's ID. */
            variantForFlag?: string[] | string;
        };
        /** @description A list of scheduled change request view models */
        changeRequestScheduledResultSchema: components["schemas"]["scheduledChangeRequestViewModelSchema"][];
        /** @description Data used to update an [environment](https://docs.getunleash.io/reference/environments). */
        updateEnvironmentSchema: {
            /** @description Updates the type of environment (i.e. development or production). */
            type?: string;
            /** @description Changes the sort order of this environment. */
            sortOrder?: number;
            /**
             * @description Experimental field. The number of approvals required before a change request can be applied in this environment.
             * @example 3
             */
            requiredApprovals?: number | null;
        };
        /** @description Data used to update a [project](https://docs.getunleash.io/reference/projects) */
        updateProjectSchema: {
            /**
             * @description The new name of the project. The name must contain at least one non-whitespace character.
             * @example my-renamed-project
             */
            name: string;
            /**
             * @description A new description for the project
             * @example Anything related to the new UI
             */
            description?: string;
            /**
             * @description A mode of the project affecting what actions are possible in this project
             * @example open
             * @enum {string}
             */
            mode?: "open" | "protected" | "private";
            /**
             * @description A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
             * @example userId
             */
            defaultStickiness?: string;
        };
        /** @description Data used to update a [project](https://docs.getunleash.io/reference/projects) settings */
        updateProjectEnterpriseSettingsSchema: {
            /**
             * @description A mode of the project affecting what actions are possible in this project
             * @example open
             * @enum {string}
             */
            mode?: "open" | "protected" | "private";
            featureNaming?: components["schemas"]["createFeatureNamingPatternSchema"];
        };
        /** @description Data about a user including their project role */
        userWithProjectRoleSchema: {
            /**
             * @deprecated
             * @description Whether this user is authenticated through Unleash tokens or logged in with a session
             * @example false
             */
            isAPI?: boolean;
            /**
             * @description The name of the user
             * @example Hunter Burgan
             */
            name?: string;
            /**
             * @description The user's email address
             * @example hunter@hunter.com
             */
            email?: string | null;
            /**
             * @description The user's ID in the Unleash system
             * @example 1
             */
            id: number;
            /**
             * Format: uri
             * @description A URL pointing to the user's image.
             */
            imageUrl?: string | null;
            /**
             * Format: date-time
             * @description When this user was added to the project
             * @example 2023-08-01T14:35:16Z
             */
            addedAt?: string;
            /**
             * @description The ID of the role this user has in the given project
             * @example 5
             */
            roleId?: number;
            /** @description A list of roles this user has in the given project */
            roles?: number[];
        };
        /** @description Data about a group including their project role */
        groupWithProjectRoleSchema: {
            /**
             * @description The name of the group
             * @example DX team
             */
            name?: string;
            /**
             * @description The group's ID in the Unleash system
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description When this group was added to the project
             * @example 2023-08-01T14:35:16Z
             */
            addedAt?: string;
            /**
             * @description The ID of the role this group has in the given project
             * @example 5
             */
            roleId?: number;
            /** @description A list of roles this user has in the given project */
            roles?: number[];
            /**
             * @description A custom description of the group
             * @example Current members of the DX squad
             */
            description?: string | null;
            /**
             * @description A list of SSO groups that should map to this Unleash group
             * @example [
             *       "SSOGroup1",
             *       "SSOGroup2"
             *     ]
             */
            mappingsSSO?: string[];
            /**
             * @description A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
             * @example 1
             */
            rootRole?: number | null;
            /**
             * @description A user who created this group
             * @example admin
             */
            createdBy?: string | null;
            /**
             * Format: date-time
             * @description When was this group created
             * @example 2023-06-30T11:41:00.123Z
             */
            createdAt?: string | null;
            /** @description A list of users belonging to this group */
            users?: components["schemas"]["groupUserModelSchema"][];
            /**
             * @description The SCIM ID of the group, only present if managed by SCIM
             * @example 01HTMEXAMPLESCIMID7SWWGHN7
             */
            scimId?: string | null;
        };
        /** @description Data used to validate a project ID */
        validateProjectSchema: {
            /**
             * @description The project ID to validate
             * @example new-project-id
             */
            id: string;
        };
        /** @description Project settings for a given project */
        projectSettingsSchema: {
            /**
             * @description The [default stickiness for this project](https://docs.getunleash.io/reference/stickiness#project-default-stickiness)
             * @enum {string|null}
             */
            defaultStickiness: "default" | "sessionId" | "userId" | "random" | null;
            /**
             * @description The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode).
             * @enum {string|null}
             */
            mode: "open" | "protected" | null;
        };
        /** @description Data used to update the state of a [change request](https://docs.getunleash.io/reference/change-requests). */
        changeRequestStateSchema: {
            /**
             * @description The new desired state for the change request
             * @enum {string}
             */
            state: "Draft" | "In review" | "Approved" | "Applied" | "Cancelled" | "Rejected";
            /**
             * @description Any comments accompanying the state changed. Used when sending a draft to review.
             * @example This is a comment for my change request
             */
            comment?: string;
        } | {
            /**
             * @description The new desired state for the change request
             * @enum {string}
             */
            state: "Scheduled";
            /**
             * Format: date-time
             * @description The time at which the change request should be applied.
             */
            scheduledAt: string;
            /**
             * @description Any comments accompanying the state changed. Used when sending a draft to review.
             * @example This is a comment for my change request
             */
            comment?: string;
        };
        /** @description Represents a [service account](https://docs.getunleash.io/reference/service-accounts). Service accounts are used to let systems interact with the Unleash API. */
        serviceAccountSchema: {
            /**
             * @description The service account id
             * @example 54321
             */
            id: number;
            /**
             * @deprecated
             * @description Deprecated: for internal use only, should not be exposed through the API
             * @example false
             */
            isAPI?: boolean;
            /**
             * @description The name of the service account
             * @example My Service Account
             */
            name?: string;
            /**
             * @deprecated
             * @description Deprecated: service accounts don't have emails associated with them
             * @example noemail@getunleash.io
             */
            email?: string;
            /**
             * @description The service account username
             * @example my-service-account
             */
            username?: string;
            /**
             * @description The service account image url
             * @example https://example.com/my-service-account.png
             */
            imageUrl?: string;
            /**
             * @deprecated
             * @description Deprecated: service accounts cannot be invited via an invitation link
             * @example https://example.com/invite-link
             */
            inviteLink?: string;
            /**
             * @deprecated
             * @description Deprecated: service accounts cannot log in to Unleash
             * @example 0
             */
            loginAttempts?: number;
            /**
             * @deprecated
             * @description Deprecated: internal use only
             * @example false
             */
            emailSent?: boolean;
            /**
             * @description The root role id associated with the service account
             * @example 1
             */
            rootRole?: number;
            /**
             * Format: date-time
             * @deprecated
             * @description Deprecated. This property is always `null`. To find out when a service account was last seen, check its `tokens` list and refer to each token's `lastSeen` property instead.
             * @example null
             */
            seenAt?: string | null;
            /**
             * Format: date-time
             * @description The service account creation date
             * @example 2021-01-01T00:00:00.000Z
             */
            createdAt?: string;
            /** @description The list of tokens associated with the service account */
            tokens?: components["schemas"]["patSchema"][];
        };
        /** @description Represents a list of service accounts, and includes a list of root roles they reference */
        serviceAccountsSchema: {
            /** @description A list of service accounts */
            serviceAccounts: components["schemas"]["serviceAccountSchema"][];
            /** @description A list of root roles that are referenced from service account objects in the `serviceAccounts` list */
            rootRoles?: components["schemas"]["roleSchema"][];
        };
        /** @description Describes the properties required to create a new service account */
        createServiceAccountSchema: {
            /**
             * @description The username of the service account
             * @example service-account-1
             */
            username: string;
            /**
             * @description The name of the service account
             * @example Service Account 1
             */
            name: string;
            /**
             * @description The id of the root role for the service account
             * @example 1
             */
            rootRole: number;
        };
        /** @description Describes the properties required to update a service account */
        updateServiceAccountSchema: {
            /**
             * @description The name of the service account
             * @example Service Account 1
             */
            name?: string;
            /**
             * @description The id of the root role for the service account
             * @example 1
             */
            rootRole?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description A list of [notifications](https://docs.getunleash.io/reference/notifications) */
        notificationsSchema: {
            /**
             * @description The id of this notification
             * @example 1
             */
            id: number;
            /**
             * @description The actual notification message
             * @example Your change request got approved
             */
            message: string;
            /**
             * @description The link to change request or feature flag the notification refers to
             * @example /myunleash/projects/myproject/change-requests/46
             */
            link: string;
            /**
             * @description The type of the notification used e.g. for the graphical hints
             * @enum {unknown}
             */
            notificationType: "change-request" | "toggle";
            createdBy: {
                /**
                 * @description The name of the user who triggered the notification
                 * @example Jane Smith
                 */
                username?: string | null;
                /**
                 * @description The avatar url of the user who triggered the notification
                 * @example https://gravatar.com/avatar/758f27d1f066779a62a65665242b8780107df403509a62a9e8a5924df5469f68?s=42&d=retro&r=g
                 */
                imageUrl?: string | null;
            };
            /**
             * Format: date-time
             * @description The date and time when the notification was created
             * @example 2022-12-02T13:17:12.445Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the notification was read or marked as read, otherwise `null`
             * @example 2022-12-02T13:17:12.445Z
             */
            readAt: string | null;
        }[];
        /** @description Data used to mark notifications as being read */
        markNotificationsAsReadSchema: {
            /** @description A list of IDs belonging to the notifications you want to mark as read. */
            notifications: number[];
        };
        /** @description A model representing a single login event. */
        loginEventSchema: {
            /**
             * @description The event's ID. Event IDs are incrementing integers. In other words, a more recent event will always have a higher ID than an older event.
             * @example 13
             */
            id: number;
            /**
             * @description The username of the user that attempted to log in. Will return "Incorrectly configured provider" when attempting to log in using a misconfigured provider.
             * @example admin
             */
            username?: string;
            /**
             * @description The authentication type used to log in.
             * @example simple
             */
            auth_type?: string;
            /**
             * Format: date-time
             * @description The date and time of when the login was attempted.
             * @example 2023-03-01T12:04:26.061Z
             */
            created_at?: string;
            /**
             * @description Whether the login was successful or not.
             * @example true
             */
            successful?: boolean;
            /**
             * @description The IP address of the client that attempted to log in.
             * @example ::ffff:127.0.0.1
             */
            ip?: string | null;
            /**
             * @description The reason for the login failure. This property is only present if the login was unsuccessful.
             * @example No user found
             */
            failure_reason?: string | null;
        };
        /** @description A response model with a list of login events. */
        loginHistorySchema: {
            /** @description A list of login events */
            events: components["schemas"]["loginEventSchema"][];
        };
        /** @description Data containing an overview of all the projects and groups users have access to */
        accessOverviewSchema: {
            /** @description A list of user access details */
            overview?: components["schemas"]["userAccessSchema"][];
        };
        /** @description Describes a single set of access for a user */
        userAccessSchema: {
            /**
             * @description The identifier for the user
             * @example 3
             */
            userId: number;
            /**
             * Format: date-time
             * @description When the user was created
             * @example 2023-03-01T12:04:26.061Z
             */
            createdAt?: string | null;
            /**
             * @description The name of the user
             * @example SomeUser
             */
            userName?: string | null;
            /**
             * Format: date-time
             * @description The last time the user logged in
             * @example 2023-03-01T12:04:26.061Z
             */
            lastSeen?: string | null;
            /**
             * @description A list of project ids that this user has access to
             * @example [
             *       "default",
             *       "project2"
             *     ]
             */
            accessibleProjects: string[];
            /**
             * @description A list of group names that this user is a member of
             * @example [
             *       "group1",
             *       "group2"
             *     ]
             */
            groups: string[];
            /**
             * @description The name of the root role that this user has
             * @example ADMIN
             */
            rootRole: string;
            /**
             * @description The email address of the user
             * @example some-user@example.com
             */
            userEmail: string;
        };
        /** @description Describes the properties required to create or update a banner. */
        createBannerSchema: {
            /**
             * @description The message to display to all users. Supports markdown.
             * @example **Reminder to everyone**: Maintenance is scheduled for *2337-12-27*.
             */
            message: string;
            /**
             * @description Whether the banner should be displayed currently. If not specified, defaults to true.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description The variant of the banner. One of "info", "warning", "error", or "success". If not specified, defaults to "info".
             * @example info
             */
            variant?: string;
            /**
             * @description Whether the banner should be sticky on the screen. If not specified, defaults to `false`.
             * @example true
             */
            sticky?: boolean;
            /**
             * @description The icon to display on the banner. Can be one of https://fonts.google.com/icons. If not specified, this will be the default icon for the variant. If "none", no icon will be displayed.
             * @example build
             */
            icon?: string | null;
            /**
             * @description The link to display on the banner. Can either be an absolute or a relative link (e.g. absolute: "https://example.com" or relative: "/admin/service-accounts"). If "dialog", will display a dialog when clicked. If not specified, no link will be displayed.
             * @example dialog
             */
            link?: string | null;
            /**
             * @description The text to display on the link. If not specified, will be displayed as "More info".
             * @example Learn more
             */
            linkText?: string | null;
            /**
             * @description The title to display on the dialog. If not specified, this will be the same as `linkText`.
             * @example Learn more about it here
             */
            dialogTitle?: string | null;
            /**
             * @description The markdown to display on the dialog. If not specified, no dialog will be displayed.
             * @example # Information
             *
             *     Maintenance is **scheduled**.
             *
             *     ## More details
             *
             *     This is an example dialog that supports Markdown.
             */
            dialog?: string | null;
        };
        /** @description An object describing a banner to be displayed to all users. */
        bannerSchema: {
            /**
             * @description The banner's ID. Banner IDs are incrementing integers. In other words, a more recently created banner will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description The message to display to all users. Supports markdown.
             * @example **Reminder to everyone**: Maintenance is scheduled for *2337-12-27*.
             */
            message: string;
            /**
             * @description Whether the banner should be displayed currently. If not specified, defaults to true.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description The variant of the banner. One of "info", "warning", "error", or "success". If not specified, defaults to "info".
             * @example info
             */
            variant?: string;
            /**
             * @description Whether the banner should be sticky on the screen. If not specified, defaults to `false`.
             * @example true
             */
            sticky?: boolean;
            /**
             * @description The icon to display on the banner. Can be one of https://fonts.google.com/icons. If not specified, this will be the default icon for the variant. If "none", no icon will be displayed.
             * @example build
             */
            icon?: string | null;
            /**
             * @description The link to display on the banner. Can either be an absolute or a relative link (e.g. absolute: "https://example.com" or relative: "/admin/service-accounts"). If "dialog", will display a dialog when clicked. If not specified, no link will be displayed.
             * @example dialog
             */
            link?: string | null;
            /**
             * @description The text to display on the link. If not specified, will be displayed as "More info".
             * @example Learn more
             */
            linkText?: string | null;
            /**
             * @description The title to display on the dialog. If not specified, this will be the same as `linkText`.
             * @example Learn more about it here
             */
            dialogTitle?: string | null;
            /**
             * @description The markdown to display on the dialog. If not specified, no dialog will be displayed.
             * @example # Information
             *
             *     Maintenance is **scheduled**.
             *
             *     ## More details
             *
             *     This is an example dialog that supports Markdown.
             */
            dialog?: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the banner was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
        };
        /** @description A response model with a list of banners. */
        bannersSchema: {
            /** @description A list of banners. */
            banners: components["schemas"]["bannerSchema"][];
        };
        /** @description Describes the properties required to create or update a signal endpoint. */
        createSignalEndpointSchema: {
            /**
             * @description Whether the signal endpoint is currently enabled. If not specified, defaults to true.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description The signal endpoint name. Must be URL-safe.
             * @example cpu-over-90
             */
            name: string;
            /**
             * @description A more detailed description of the signal endpoint and its intended use.
             * @example Notifies when CPU usage is over 90%.
             */
            description?: string | null;
        };
        /** @description An object describing a signal endpoint. */
        signalEndpointSchema: {
            /**
             * @description The signal endpoint's ID. Signal endpoint IDs are incrementing integers. In other words, a more recently created signal endpoint will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description Whether the signal endpoint is currently enabled. If not specified, defaults to true.
             * @example true
             */
            enabled: boolean;
            /**
             * @description The signal endpoint name. Must be URL-safe.
             * @example cpu-over-90
             */
            name: string;
            /**
             * @description A more detailed description of the signal endpoint and its intended use.
             * @example Notifies when CPU usage is over 90%.
             */
            description?: string | null;
            /**
             * Format: date-time
             * @description The date and time of when the signal endpoint was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The ID of the user that created this signal endpoint.
             * @example 1337
             */
            createdByUserId: number;
            /**
             * @description The full URL that should be used to call the signal endpoint. This property is only returned for newly created or updated signal endpoints.
             * @example https://app.unleash-hosted.com/my-instance/signal-endpoint/cpu-over-90
             */
            url?: string;
            /** @description The list of tokens associated with the signal endpoint. */
            tokens?: components["schemas"]["signalEndpointTokenSchema"][];
        };
        /** @description A response model with a list of signal endpoints. */
        signalEndpointsSchema: {
            /** @description A list of signal endpoints. */
            signalEndpoints: components["schemas"]["signalEndpointSchema"][];
        };
        /** @description Describes the properties required to create or update a signal endpoint token. */
        createSignalEndpointTokenSchema: {
            /**
             * @description The signal endpoint token name.
             * @example My external app #1
             */
            name: string;
        };
        /** @description An object describing a signal endpoint token. */
        signalEndpointTokenSchema: {
            /**
             * @description The signal endpoint token's ID. Signal endpoint token IDs are incrementing integers. In other words, a more recently created signal endpoint token will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description The token used for authentication. It is automatically generated by Unleash when the token is created and that is the only time this property is returned.
             * @example signal_xyzrandomstring
             */
            token?: string;
            /**
             * @description The signal endpoint token name.
             * @example My external app #1
             */
            name: string;
            /**
             * @description The signal endpoint ID that this token belongs to.
             * @example 1337
             */
            signalEndpointId: number;
            /**
             * Format: date-time
             * @description The date and time of when the signal endpoint token was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The ID of the user that created this signal endpoint token.
             * @example 1337
             */
            createdByUserId: number;
        };
        /** @description A response model with a list of signal endpoint tokens. */
        signalEndpointTokensSchema: {
            /** @description A list of signal endpoint tokens. */
            signalEndpointTokens: components["schemas"]["signalEndpointTokenSchema"][];
        };
        /** @description Schema representing feedback information. */
        feedbackSchema: {
            /**
             * @description The unique identifier of the feedback.
             * @example 123
             */
            id: number;
            /**
             * Format: date-time
             * @description The date and time when the feedback was provided.
             * @example 2022-12-12T12:13:24.218Z
             */
            createdAt: string;
            /**
             * @description The category of the feedback.
             * @example UI/UX
             */
            category: string;
            /**
             * @description The type of user providing the feedback.
             * @example developer
             */
            userType: string | null;
            /**
             * @description A score indicating the difficulty experienced by the user.
             * @example 5
             */
            difficultyScore: number | null;
            /**
             * @description This field is for users to mention what they liked.
             * @example Easy to navigate.
             */
            positive: string | null;
            /**
             * @description Details aspects of the service or product that could benefit from enhancements or modifications. Aids in pinpointing areas needing attention for improvement.
             * @example Slow response time.
             */
            areasForImprovement: string | null;
        };
        /** @description A list of feedback items. */
        feedbackListSchema: components["schemas"]["feedbackSchema"][];
        /** @description Schema representing the creation of feedback information. */
        provideFeedbackSchema: {
            /**
             * @description The category of the feedback.
             * @example UI/UX
             */
            category: string;
            /**
             * @description The type of user providing the feedback.
             * @example developer
             */
            userType?: string | null;
            /**
             * @description A score indicating the difficulty experienced by the user.
             * @example 5
             */
            difficultyScore?: number | null;
            /**
             * @description This field is for users to mention what they liked.
             * @example Easy to navigate.
             */
            positive?: string | null;
            /**
             * @description Details aspects of the service or product that could benefit from enhancements or modifications. Aids in pinpointing areas needing attention for improvement.
             * @example Slow response time.
             */
            areasForImprovement?: string | null;
        };
        /** @description A model representing a set license token. */
        licenseUpdateSchema: {
            /** @description The actual license token. */
            token: string;
        };
        /** @description A model representing a license response. */
        licenseReadSchema: {
            /** @description The actual license token. */
            token?: string;
            /** @description Whether the license is valid or not. */
            isValid: boolean;
            /** @description Name of the customer that owns the license. This is the name of the company that purchased the license. */
            customer?: string;
            /** @description Type of license. */
            type?: string;
            /** @description Name of the Unleash instance where this license is valid. */
            instanceName?: string;
            /** @description Identifier of the Unleash instance where this license is valid. */
            instanceId?: string;
            /** @description Name of plan that the license is for. */
            plan?: string;
            /** @description Number of seats in the license. */
            seats?: number;
            /**
             * Format: date-time
             * @description Date when the license expires.
             * @example 2023-07-31T13:33:02Z
             */
            expireAt?: string;
            /**
             * Format: date-time
             * @description Date when the license was issued.
             * @example 2023-07-31T13:33:02Z
             */
            issuedAt?: string;
        };
        /** @description A model representing a license check response. */
        licenseCheckSchema: {
            /** @description Whether or not the current Unleash license is considered valid */
            isValid: boolean;
            /**
             * @description Message describing the current state of the Unleash license
             * @example Your license expired 3 days ago
             */
            message?: string;
            /**
             * @description Type of messages, whether it is an informative or a warning
             * @example info
             * @enum {string}
             */
            messageType?: "info" | "warning" | "error";
        };
        /** @description A schema representing a single licensed user data point. */
        licensedUserSchema: {
            /**
             * Format: date-time
             * @description The date associated with the licensed users count.
             * @example 2024-10-01T00:00:00.000Z
             */
            date: string;
            /**
             * @description The count of licensed users on the given date.
             * @example 100
             */
            count: number;
        };
        /** @description A response model representing user license data. */
        licensedUsersSchema: {
            /**
             * @description The total number of licensed seats currently available for this Unleash instance.
             * @example 25
             */
            seatCount: number;
            /** @description An object containing historical and current licensed user data. */
            licensedUsers: {
                /** @description A monthly history of licensed user counts. */
                history: components["schemas"]["licensedUserSchema"][];
                /**
                 * @description The current number of licenses in use.
                 * @example 25
                 */
                current: number;
            };
        };
        /** @description An object describing a signal. */
        signalSchema: {
            /**
             * @description The signal's ID. Signal IDs are incrementing integers. In other words, a more recently created signal will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description The payload of the signal.
             * @example {
             *       "cpu": 92,
             *       "memory": 85
             *     }
             */
            payload?: Record<string, never>;
            /**
             * Format: date-time
             * @description The date and time of when the signal was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The signal source type. Should be used along with `sourceId` to uniquely identify the resource that created this signal.
             * @example signal-endpoint
             * @enum {string}
             */
            source: "signal-endpoint";
            /**
             * @description The ID of the source that created this signal. Should be used along with `source` to uniquely identify the resource that created this signal.
             * @example 1337
             */
            sourceId: number;
            /**
             * @description The ID of the source token that created this signal. Only present if the signal was created by a signal endpoint.
             * @example 1337
             */
            createdBySourceTokenId?: number | null;
        };
        /** @description A response model with a list of signals. */
        signalsSchema: {
            /** @description A list of signals. */
            signals: components["schemas"]["signalSchema"][];
        };
        /** @description An action set defines actions that Unleash performs when a signal is matched. */
        createActionsSchema: {
            /**
             * @description The name of the action set
             * @example Disable new features
             */
            name: string;
            /**
             * @description The description of the action set
             * @example Disables new features when error rate is above threshold
             */
            description?: string | null;
            /**
             * @description The id of the service account that will execute the action
             * @example 12
             */
            actorId: number;
            /**
             * @description Whether this action set is enabled or not
             * @default true
             * @example true
             */
            enabled: boolean;
            /** @description The list of actions to execute in sequential order when the action set is triggered */
            actions: components["schemas"]["createActionSchema"][];
            /** @description Defines a matching rule for the signal that will trigger the action set */
            match: {
                /**
                 * @description Match the source of the signal
                 * @example signal-endpoint
                 * @enum {string}
                 */
                source: "signal-endpoint";
                /**
                 * @description Match the source id of the signal
                 * @example 123
                 */
                sourceId: number;
                /**
                 * @description Match the payload of the signal
                 * @example {
                 *       "type": "error-rate-above-threshold"
                 *     }
                 */
                payload: {
                    [key: string]: unknown;
                };
            };
        };
        /** @description A response model with an identifiable action set. */
        actionsSchema: {
            /**
             * @description The ID of the action set.
             * @example 1
             */
            id: number;
            /**
             * @description The project that this action set belongs to.
             * @example default
             */
            project: string;
            /**
             * Format: date-time
             * @description The date and time of when the action set was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The ID of the user that created this action set.
             * @example 1
             */
            createdByUserId: number;
            /**
             * @description The name of the action set
             * @example Disable new features
             */
            name: string;
            /**
             * @description The description of the action set
             * @example Disables new features when error rate is above threshold
             */
            description?: string | null;
            /**
             * @description The id of the service account that will execute the action
             * @example 12
             */
            actorId: number;
            /**
             * @description Whether this action set is enabled or not
             * @default true
             * @example true
             */
            enabled: boolean;
            /** @description The list of actions to execute in sequential order when the action set is triggered. */
            actions: components["schemas"]["actionSchema"][];
            /** @description Defines a matching rule for the signal that will trigger the action set */
            match: {
                /**
                 * @description Match the source of the signal
                 * @example signal-endpoint
                 * @enum {string}
                 */
                source: "signal-endpoint";
                /**
                 * @description Match the source id of the signal
                 * @example 123
                 */
                sourceId: number;
                /**
                 * @description Match the payload of the signal
                 * @example {
                 *       "type": "error-rate-above-threshold"
                 *     }
                 */
                payload: {
                    [key: string]: unknown;
                };
            };
        };
        /** @description Represents a single action response */
        actionSchema: {
            /**
             * @description The id of the action set
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The date and time of when the action was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The id of user that created this action set
             * @example 1
             */
            createdByUserId: number;
            /**
             * @description The name of the action to execute
             * @example disable-feature
             */
            action: string;
            /**
             * @description The order in which the action should be executed
             * @example 1
             */
            sortOrder: number;
            /**
             * @description A map of parameters to pass to the action
             * @default {}
             * @example {
             *       "featureName": "my-feature"
             *     }
             */
            executionParams: {
                [key: string]: unknown;
            };
        };
        /** @description Represents a single action */
        createActionSchema: {
            /**
             * @description The name of the action to execute
             * @example disable-feature
             */
            action: string;
            /**
             * @description The order in which the action should be executed
             * @example 1
             */
            sortOrder: number;
            /**
             * @description A map of parameters to pass to the action
             * @default {}
             * @example {
             *       "featureName": "my-feature"
             *     }
             */
            executionParams: {
                [key: string]: unknown;
            };
        };
        /** @description A response model with a list of action sets. */
        actionsListSchema: {
            /** @description A list of action sets. */
            actions: components["schemas"]["actionsSchema"][];
        };
        /** @description A summary of this Unleash instance's usage statistics, including user and flag counts, and trends over time. */
        instanceInsightsSchema: {
            /** @description How number of users changed over time */
            userTrends: {
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given day.
                 * @example 2024-01-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description The number of actual Unleash users on a particular day
                 * @example 100
                 */
                total: number;
                /**
                 * @description The number of active Unleash users on a particular day
                 * @example 98
                 */
                active: number;
                /**
                 * @description The number of inactive Unleash users on a particular day
                 * @example 2
                 */
                inactive: number;
            }[];
            /** @description How number of flags changed over time */
            flagTrends: {
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given day.
                 * @example 2024-01-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description The number of all flags on a particular day
                 * @example 100
                 */
                total: number;
                /**
                 * @description The number of active flags on a particular day
                 * @example 98
                 */
                active: number;
                /**
                 * @description The number of user marked stale flags on a particular day
                 * @example 0
                 */
                stale: number;
                /**
                 * @description The number of time calculated potentially stale flags on a particular day
                 * @example 2
                 */
                potentiallyStale: number;
            }[];
            /** @description How number of flags per project changed over time */
            projectFlagTrends: {
                /**
                 * @description Year and week in a given year for which the stats were calculated
                 * @example 2024-40
                 */
                week: string;
                /**
                 * @description Project id of the project the flag trends belong to
                 * @example default
                 */
                project: string;
                /**
                 * @deprecated
                 * @description Use `technicalDebt` instead.
                 * @example 50
                 */
                health: number;
                /**
                 * @description An indicator of the [project's technical debt](https://docs.getunleash.io/reference/technical-debt) on a scale from 0 to 100
                 * @example 20
                 */
                technicalDebt?: number;
                /**
                 * @description The average time from when a feature was created to when it was enabled in the "production" environment during the current window
                 * @example 10
                 */
                timeToProduction?: number;
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given day.
                 * @example 2024-01-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description The number of all flags on a particular day
                 * @example 100
                 */
                total: number;
                /**
                 * @description The number of active flags on a particular day
                 * @example 98
                 */
                active: number;
                /**
                 * @description The number of user marked stale flags on a particular day
                 * @example 0
                 */
                stale: number;
                /**
                 * @description The number of time calculated potentially stale flags on a particular day
                 * @example 2
                 */
                potentiallyStale: number;
                /**
                 * @description The number of users who have access to the project
                 * @example 30
                 */
                users?: number;
            }[];
            /** @description How metrics data per project changed over time */
            metricsSummaryTrends: {
                /**
                 * @description Year and week in a given year for which the metrics summary was calculated
                 * @example 2024-01
                 */
                week: string;
                /**
                 * Format: date-time
                 * @description A UTC date when metrics summary was captured. Time is the very end of a given day.
                 * @example 2024-01-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description Project id of the project the impressions summary belong to
                 * @example default
                 */
                project: string;
                /**
                 * @description Total number of times all project flags were requested
                 * @example 50
                 */
                totalRequests: number;
                /**
                 * @description Total number of times all project flags were exposed across all environments
                 * @example 50
                 */
                totalYes: number;
                /**
                 * @description Total number of times all project flags were not exposed across all environments
                 * @example 50
                 */
                totalNo: number;
                /**
                 * @description Total number of applications the impression data belong to
                 * @example 50
                 */
                totalApps: number;
                /**
                 * @description Total number of flags the impression data belong to
                 * @example 50
                 */
                totalFlags: number;
                /**
                 * @description Total number of environments the impression data belong to
                 * @example 50
                 */
                totalEnvironments: number;
            }[];
            /** @description How updates per environment type changed over time */
            environmentTypeTrends: {
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given day.
                 * @example 2024-01-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description Year and week in a given year for which the stats were calculated
                 * @example 2024-01
                 */
                week: string;
                /**
                 * @description Environment type the data belongs too
                 * @example production
                 */
                environmentType: string;
                /**
                 * @description Total number of times configuration has been updated in the environment type
                 * @example 50
                 */
                totalUpdates: number;
            }[];
            /** @description Weekly count of new flags entering production */
            lifecycleTrends: {
                /**
                 * @description Year and week in a given year for which the stats were calculated
                 * @example 2024-15
                 */
                week: string;
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given week.
                 * @example 2024-04-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description Number of flags that entered production during this week
                 * @example 5
                 */
                newProductionFlags: number;
                /**
                 * @description Project id that the flags belong to
                 * @example default
                 */
                project: string;
            }[];
            /** @description Weekly count of created vs archived flags by project and flag type */
            creationArchiveTrends: {
                /**
                 * @description Year and week in a given year for which the stats were calculated
                 * @example 2024-15
                 */
                week: string;
                /**
                 * Format: date-time
                 * @description A UTC date when the stats were captured. Time is the very end of a given week.
                 * @example 2024-04-12T23:59:59.999Z
                 */
                date: string;
                /**
                 * @description Project id that the flags belong to
                 * @example default
                 */
                project: string;
                /**
                 * @description Count of newly created flags by flag type
                 * @example {
                 *       "experiment": 5,
                 *       "release": 2,
                 *       "operational": 1
                 *     }
                 */
                createdFlags: {
                    [key: string]: number;
                };
                /**
                 * @description Total count of archived flags during this week
                 * @example 3
                 */
                archivedFlags: number;
            }[];
        };
        /** @description Aggregated view of feature flag lifecycle trends across environments */
        lifecycleTrendsSchema: {
            /** @description Aggregated view of feature flag lifecycle across environments */
            lifecycleTrends: {
                develop: {
                    /** @example 35 */
                    totalFlags: number;
                    /** @example 28 */
                    medianDaysInCurrentStage: number;
                    /** @example 25 */
                    medianDaysHistorically: number;
                    categories: {
                        experimental: {
                            /** @example 15 */
                            flagsOlderThanWeek: number;
                            /** @example 13 */
                            newFlagsThisWeek: number;
                        };
                        release: {
                            /** @example 13 */
                            flagsOlderThanWeek: number;
                            /** @example 0 */
                            newFlagsThisWeek: number;
                        };
                        permanent: {
                            /** @example 7 */
                            flagsOlderThanWeek: number;
                            /** @example 0 */
                            newFlagsThisWeek: number;
                        };
                    };
                };
                production: {
                    /** @example 10 */
                    totalFlags: number;
                    /** @example 14 */
                    medianDaysInCurrentStage: number;
                    /** @example 12 */
                    medianDaysHistorically: number;
                    categories: {
                        experimental: {
                            /** @example 2 */
                            flagsOlderThanWeek: number;
                            /** @example 5 */
                            newFlagsThisWeek: number;
                        };
                        release: {
                            /** @example 2 */
                            flagsOlderThanWeek: number;
                            /** @example 1 */
                            newFlagsThisWeek: number;
                        };
                        permanent: {
                            /** @example 3 */
                            flagsOlderThanWeek: number;
                            /** @example 0 */
                            newFlagsThisWeek: number;
                        };
                    };
                };
                cleanup: {
                    /** @example 5 */
                    totalFlags: number;
                    /** @example 16 */
                    medianDaysInCurrentStage: number;
                    /** @example 18 */
                    medianDaysHistorically: number;
                    categories: {
                        experimental: {
                            /** @example 0 */
                            flagsOlderThanWeek: number;
                            /** @example 3 */
                            newFlagsThisWeek: number;
                        };
                        release: {
                            /** @example 0 */
                            flagsOlderThanWeek: number;
                            /** @example 1 */
                            newFlagsThisWeek: number;
                        };
                        permanent: {
                            /** @example 1 */
                            flagsOlderThanWeek: number;
                            /** @example 0 */
                            newFlagsThisWeek: number;
                        };
                    };
                };
            };
        };
        /** @description An object describing a signal originated from a signal endpoint. */
        signalEndpointSignalSchema: {
            /**
             * @description The signal's ID. Signal IDs are incrementing integers. In other words, a more recently created signal will always have a higher ID than an older one.
             * @example 7
             */
            id?: number;
            /**
             * @description The payload of the signal.
             * @example {
             *       "cpu": 92,
             *       "memory": 85
             *     }
             */
            payload?: Record<string, never>;
            /**
             * Format: date-time
             * @description The date and time of when the signal was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The signal source type. Should be used along with `sourceId` to uniquely identify the resource that created this signal.
             * @example signal-endpoint
             * @enum {string}
             */
            source: "signal-endpoint";
            /**
             * @description The ID of the source that created this signal. Should be used along with `source` to uniquely identify the resource that created this signal.
             * @example 1337
             */
            sourceId: number;
            /**
             * @description The name of the token used to register this signal.
             * @example signal-endpoint-token
             */
            tokenName?: string | null;
        };
        /** @description A response model with a list of signals originated from a signals endpoint. */
        signalEndpointSignalsSchema: {
            /** @description A list of signals originated from a signals endpoint. */
            signalEndpointSignals: components["schemas"]["signalEndpointSignalSchema"][];
        };
        /** @description An object describing an action event. */
        actionEventSchema: {
            /**
             * @description The id of the action set
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The date and time of when the action was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The id of user that created this action set
             * @example 1
             */
            createdByUserId: number;
            /**
             * @description The name of the action to execute
             * @example disable-feature
             */
            action: string;
            /**
             * @description The order in which the action should be executed
             * @example 1
             */
            sortOrder: number;
            /**
             * @description A map of parameters to pass to the action
             * @default {}
             * @example {
             *       "featureName": "my-feature"
             *     }
             */
            executionParams: {
                [key: string]: unknown;
            };
            /**
             * @description The state of the action. Can be one of `not started`, `started`, `success`, or `failed`.
             * @enum {string}
             */
            state: "not started" | "started" | "success" | "failed";
            /** @description The details of the action event, if any. */
            details?: string | null;
        };
        /** @description A response model with a list of action set events. */
        actionSetEventsSchema: {
            /** @description A list of action set events. */
            actionSetEvents: components["schemas"]["actionSetEventSchema"][];
        };
        /** @description An object describing an action event. */
        actionSetEventSchema: {
            /**
             * @description The action set event's ID. Action set event IDs are incrementing integers. In other words, a more recently created action set event will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description The ID of the action set that the action set event belongs to.
             * @example 42
             */
            actionSetId: number;
            /**
             * @description The ID of the signal that triggered this action set event.
             * @example 1337
             */
            signalId: number;
            /**
             * Format: date-time
             * @description The date and time of when the action set event was created. In other words, the date and time of when the action set started executing.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The state of the action set event. Can be one of `started`, `success`, or `failed`.
             * @example started
             * @enum {string}
             */
            state: "started" | "success" | "failed";
            /** @description The signal that triggered this action set event. */
            signal: components["schemas"]["signalSchema"];
            /** @description The action set this action set event belongs to, where the individual actions are decorated with the respective action states. */
            actionSet: {
                /**
                 * @description The ID of the action set.
                 * @example 1
                 */
                id: number;
                /**
                 * @description The project that this action set belongs to.
                 * @example default
                 */
                project: string;
                /**
                 * Format: date-time
                 * @description The date and time of when the action set was created.
                 * @example 2023-12-27T13:37:00+01:00
                 */
                createdAt: string;
                /**
                 * @description The ID of the user that created this action set.
                 * @example 1
                 */
                createdByUserId: number;
                /**
                 * @description The name of the action set
                 * @example Disable new features
                 */
                name: string;
                /**
                 * @description The description of the action set
                 * @example Disables new features when error rate is above threshold
                 */
                description?: string | null;
                /**
                 * @description The id of the service account that will execute the action
                 * @example 12
                 */
                actorId: number;
                /**
                 * @description Whether this action set is enabled or not
                 * @default true
                 * @example true
                 */
                enabled: boolean;
                /** @description The list of actions executed in sequential order when the action set was triggered, decorated with the individual action states. */
                actions: components["schemas"]["actionEventSchema"][];
                /** @description Defines a matching rule for the signal that will trigger the action set */
                match: {
                    /**
                     * @description Match the source of the signal
                     * @example signal-endpoint
                     * @enum {string}
                     */
                    source: "signal-endpoint";
                    /**
                     * @description Match the source id of the signal
                     * @example 123
                     */
                    sourceId: number;
                    /**
                     * @description Match the payload of the signal
                     * @example {
                     *       "type": "error-rate-above-threshold"
                     *     }
                     */
                    payload: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        /** @description Defines a parameter for an action. */
        actionDefinitionParameterSchema: {
            /**
             * @description The name of the parameter.
             * @example project
             * @enum {string}
             */
            name: "project" | "environment" | "featureName" | "tag";
            /**
             * @description The label of the parameter.
             * @example Param name
             */
            label: string;
            /**
             * @description The parameter type.
             * @example select
             * @enum {string}
             */
            type: "select" | "hidden";
            /**
             * @description Whether the parameter is optional.
             * @default true
             * @example true
             */
            optional: boolean;
            /** @description Lists of options to be used for the parameter. */
            options?: string[];
        };
        /** @description Configuration of a single action and its parameters. */
        actionDefinitionSchema: {
            /**
             * @description The label of the action.
             * @example Enable a feature
             */
            label: string;
            /**
             * @description A description for the action.
             * @example Enable a feature flag in a specific environment.
             */
            description: string;
            /**
             * @description The category of the action.
             * @example Feature flags
             */
            category: string;
            /**
             * @description The permissions required to perform the action.
             * @example [
             *       "UPDATE_FEATURE"
             *     ]
             */
            permissions: string[];
            /** @description The parameters required to perform the action. */
            parameters: components["schemas"]["actionDefinitionParameterSchema"][];
        };
        /** @description Configuration of different actions and their parameters. */
        actionDefinitionsConfigSchema: {
            TOGGLE_FEATURE_ON?: components["schemas"]["actionDefinitionSchema"];
            TOGGLE_FEATURE_OFF?: components["schemas"]["actionDefinitionSchema"];
            TOGGLE_FEATURES_ON_BY_TAG?: components["schemas"]["actionDefinitionSchema"];
            TOGGLE_FEATURES_OFF_BY_TAG?: components["schemas"]["actionDefinitionSchema"];
        };
        /** @description Input data required for the action */
        toggleFeatureActionSchema: {
            /** @description The project where the feature is located */
            project: string;
            /** @description The environment we want to target */
            environment: string;
            /** @description The name of the feature we want to target */
            featureName: string;
        };
        /** @description Input data required for the action */
        toggleFeaturesByTagActionSchema: {
            /**
             * @description The project where the feature is located
             * @example default
             */
            project: string;
            /**
             * @description The environment we want to target
             * @example development
             */
            environment: string;
            /**
             * @description The tag we want to target, in the following format: `[TAG_TYPE]:[TAG_VALUE]`
             * @example simple:tag
             */
            tag: string;
        };
        /** @description Contains the recorded data usage for each API path, segmented by day and type of traffic */
        trafficUsageApiDataSchema: {
            /** @description An array containing each day in the selected period that has data usage recorded */
            days: {
                /**
                 * Format: date-time
                 * @description The day of the period for which the usage is recorded
                 * @example 2023-04-19T00:00:00.000Z
                 */
                day: string;
                /** @description Contains the recorded data usage for each type of traffic group */
                trafficTypes: {
                    /**
                     * @description The traffic group
                     * @example successful-requests
                     */
                    group: string;
                    /**
                     * @description The number of requests
                     * @example 100
                     */
                    count: number;
                }[];
            }[];
            /**
             * @description The path of the API that the recorded data usage is for
             * @example /api/client/features
             */
            apiPath: string;
        };
        /** @description Contains the recorded data usage for each API path, segmented by month and type of traffic */
        trafficUsageApiMonthlyDataSchema: {
            /** @description An array containing each month in the selected range that has data usage recorded */
            months: {
                /**
                 * @description The month this data usage is recorded for
                 * @example 2023-04
                 */
                month: string;
                /** @description Contains the recorded data usage for each type of traffic group */
                trafficTypes: {
                    /**
                     * @description The traffic group
                     * @example successful-requests
                     */
                    group: string;
                    /**
                     * @description The number of requests
                     * @example 100
                     */
                    count: number;
                }[];
            }[];
            /**
             * @description The path of the API that the recorded data usage is for
             * @example /api/client/features
             */
            apiPath: string;
        };
        /** @description Contains the recorded data usage for each API path, segmented by day/month and type of traffic */
        trafficUsageDataSegmentedCombinedSchema: {
            /**
             * @description Whether the data is aggregated by month or by day.
             * @example monthly
             * @enum {string}
             */
            grouping: "monthly" | "daily";
            /** @description The date range there is data for. The range is inclusive and goes from the start of the `from` date to the end of the `to` date */
            dateRange: {
                /**
                 * Format: date
                 * @description The start of the dateRange
                 * @example 2023-04-01
                 */
                from: string;
                /**
                 * Format: date
                 * @description The end of the dateRange
                 * @example 2023-04-30
                 */
                to: string;
            };
            /** @description Contains the recorded daily/monthly data usage for each API path */
            apiData: {
                /**
                 * @description The API path
                 * @example /api/client
                 */
                apiPath: string;
                /** @description The recorded data points for the API path */
                dataPoints: {
                    /**
                     * @description The date of the data point. Formatted as a full date (e.g. 2023-04-01) if the data is aggregated by day or as a month (e.g. 2023-04) if the data is aggregated by month.
                     * @example 2023-04-01
                     */
                    period: string;
                    /** @description The recorded traffic types for the data point */
                    trafficTypes: {
                        /**
                         * @description The type of traffic
                         * @example successful-requests
                         */
                        group: string;
                        /**
                         * @description The number of requests
                         * @example 42
                         */
                        count: number;
                    }[];
                }[];
            }[];
        };
        /** @description Contains the recorded metered groups connections segmented by day/month */
        meteredConnectionsSchema: {
            /**
             * @description Whether the data is aggregated by month or by day.
             * @example monthly
             * @enum {string}
             */
            grouping: "monthly" | "daily";
            /** @description The date range there is data for. The range is inclusive and goes from the start of the `from` date to the end of the `to` date */
            dateRange: {
                /**
                 * Format: date
                 * @description The start of the dateRange
                 * @example 2023-04-01
                 */
                from: string;
                /**
                 * Format: date
                 * @description The end of the dateRange
                 * @example 2023-04-30
                 */
                to: string;
            };
            /** @description Contains the recorded daily/monthly connections for each metered group */
            apiData: {
                /**
                 * @description The metered group representing charging unit in the organization using Unleash
                 * @example default
                 */
                meteredGroup: string;
                /** @description The recorded data points for the metered group */
                dataPoints: {
                    /**
                     * @description The date of the data point. Formatted as a full date (e.g. 2023-04-01) if the data is aggregated by day or as a month (e.g. 2023-04) if the data is aggregated by month.
                     * @example 2023-04-01
                     */
                    period: string;
                    /**
                     * @description Number of connections. 1 connection = 7200 backend SDK requests per day
                     * @example 10.5
                     */
                    connections: number;
                }[];
            }[];
        };
        /** @description Contains the recorded metered groups requests segmented by day/month */
        meteredRequestsSchema: {
            /**
             * @description Whether the data is aggregated by month or by day.
             * @example monthly
             * @enum {string}
             */
            grouping: "monthly" | "daily";
            /** @description The date range there is data for. The range is inclusive and goes from the start of the `from` date to the end of the `to` date */
            dateRange: {
                /**
                 * Format: date
                 * @description The start of the dateRange
                 * @example 2023-04-01
                 */
                from: string;
                /**
                 * Format: date
                 * @description The end of the dateRange
                 * @example 2023-04-30
                 */
                to: string;
            };
            /** @description Contains the recorded daily/monthly requests for each metered group */
            apiData: {
                /**
                 * @description The metered group representing charging unit in the organization using Unleash
                 * @example default
                 */
                meteredGroup: string;
                /** @description The recorded data points for the metered group */
                dataPoints: {
                    /**
                     * @description The date of the data point. Formatted as a full date (e.g. 2023-04-01) if the data is aggregated by day or as a month (e.g. 2023-04) if the data is aggregated by month.
                     * @example 2023-04-01
                     */
                    period: string;
                    /**
                     * @description Number of requests
                     * @example 1200
                     */
                    requests: number;
                }[];
            }[];
        };
        /** @description An object describing settings for SCIM provisioning. */
        scimSettingsSchema: {
            /**
             * @description Whether SCIM provisioning is currently enabled.
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether a SCIM provisioning API token is currently set.
             * @example true
             */
            hasToken: boolean;
        };
        /** @description An object describing settings for SCIM provisioning. */
        setScimSettingsSchema: {
            /**
             * @description Whether SCIM provisioning is currently enabled.
             * @example true
             */
            enabled: boolean;
        };
        /** @description An object describing a SCIM provisioning API token. */
        scimTokenSchema: {
            /**
             * @description The token used for SCIM API authentication. Can be revoked at a later stage by generating a new one.
             * @example xyzrandomstring
             */
            token: string;
        };
        /** @description Data for the playground API to evaluate flags with change request applied in preview mode */
        changeRequestPlaygroundRequestSchema: {
            context: components["schemas"]["sdkContextSchema"];
        };
        /** @description Response for SAML settings */
        samlSettingsResponseSchema: {
            /**
             * @description Whether to enable or disable SAML 2.0 for this instance
             * @example true
             * @enum {boolean}
             */
            enabled?: true;
            /**
             * @description The SAML 2.0 entity ID
             * @example http://localhost:8080/auth/realms/master
             */
            entityId?: string;
            /**
             * @description Which URL to use for Single Sign On
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOnUrl?: string;
            /**
             * @description The X509 certificate used to validate requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            certificate?: string;
            /**
             * @description Which URL to use for Single Sign Out
             * @example http://localhost:8080/auth/realms/master/protocol/saml
             */
            signOutUrl?: string;
            /**
             * @description Signing certificate for sign out requests
             * @example MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
             *     A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
             *     MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
             *     YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
             *     ODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
             *     CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
             *     ZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I
             *     nrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa
             *     e7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr
             *     fSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf
             *     epfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2
             *     SfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC
             *     IQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR
             *     69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa
             *     /KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv
             *     w8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S
             *     fIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef
             *     0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4
             *     FzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn
             *     nf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz
             *     cPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP
             *     IOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf
             *     HTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9
             *     /Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD
             *     gYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC
             *     JGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9
             *     3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=
             *
             */
            spCertificate?: string;
            /**
             * @description Should Unleash create users based on the emails coming back in the authentication reply from the SAML server
             * @example true
             */
            autoCreate?: boolean;
            /**
             * @description A comma separated list of email domains that Unleash will auto create user accounts for.
             * @example getunleash.io,unleash-hosted.com
             */
            emailDomains?: string;
            /**
             * @description Assign this root role to auto created users
             * @example Editor
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the SAML token response from which to read the groups the user belongs to.
             * @example groups
             */
            groupJsonPath?: string;
        };
        /** @description Response for OpenID Connect settings */
        oidcSettingsResponseSchema: {
            /**
             * @description Whether to enable or disable OpenID Connect for this instance
             * @example true
             * @enum {boolean}
             */
            enabled?: true;
            /**
             * Format: uri
             * @description The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)
             * @example https://myoidchost.azure.com/.well-known/openid-configuration
             */
            discoverUrl?: string;
            /**
             * @description The OIDC client ID of this application.
             * @example FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B
             */
            clientId?: string;
            /**
             * @description Shared secret from OpenID server. Used to authenticate login requests
             * @example qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO
             */
            secret?: string;
            /** @description Auto create users based on email addresses from login tokens */
            autoCreate?: boolean;
            /** @description Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active */
            enableSingleSignOut?: boolean;
            /**
             * @description [Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`
             * @enum {string}
             */
            defaultRootRole?: "Viewer" | "Editor" | "Admin";
            /**
             * @description Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
             * @example 2
             */
            defaultRootRoleId?: number;
            /**
             * @description Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`
             * @example getunleash.io,getunleash.ai
             */
            emailDomains?: string;
            /**
             * @description Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated.
             *      Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information
             *
             * @example urn:okta:loa:2fa:any phr
             */
            acrValues?: string;
            /**
             * @description The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.
             * @example RS256
             * @enum {string}
             */
            idTokenSigningAlgorithm?: "RS256" | "RS384" | "RS512";
            /**
             * @description Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
             * @example false
             */
            enableGroupSyncing?: boolean;
            /**
             * @description Specifies the path in the OIDC token response to read which groups the user belongs to from.
             * @example groups
             */
            groupJsonPath?: string;
            /**
             * @description When enabled Unleash will also request the 'groups' scope as part of the login request.
             * @example false
             */
            addGroupsScope?: boolean;
        };
        /** @description A list of signals that have been registered by the system */
        signalQueryResponseSchema: {
            /** @description The list of signals */
            signals: components["schemas"]["signalQuerySignalSchema"][];
            /**
             * @description The total count of signals
             * @example 842
             */
            total: number;
        };
        /** @description An object describing a signal enriched with source data. */
        signalQuerySignalSchema: {
            /**
             * @description The signal's ID. Signal IDs are incrementing integers. In other words, a more recently created signal will always have a higher ID than an older one.
             * @example 7
             */
            id: number;
            /**
             * @description The payload of the signal.
             * @example {
             *       "cpu": 92,
             *       "memory": 85
             *     }
             */
            payload?: Record<string, never>;
            /**
             * Format: date-time
             * @description The date and time of when the signal was created.
             * @example 2023-12-27T13:37:00+01:00
             */
            createdAt: string;
            /**
             * @description The signal source type. Should be used along with `sourceId` to uniquely identify the resource that created this signal.
             * @example signal-endpoint
             * @enum {string}
             */
            source: "signal-endpoint";
            /**
             * @description The ID of the source that created this signal. Should be used along with `source` to uniquely identify the resource that created this signal.
             * @example 1337
             */
            sourceId: number;
            /**
             * @description The name of the token used to register this signal.
             * @example signal-endpoint-token
             */
            tokenName?: string | null;
            /**
             * @description The name of the source that registered this signal.
             * @example cpu-over-90
             */
            sourceName?: string | null;
            /**
             * @description A more detailed description of the source that registered this signal.
             * @example Notifies when CPU usage is over 90%.
             */
            sourceDescription?: string | null;
        };
        /** @description Schema representing the creation of a release plan. */
        releasePlanSchema: {
            /**
             * @description The release plan/template's ID. Release template IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            id: string;
            /**
             * @description A field to distinguish between release plans and release templates.
             * @example plan
             * @enum {string}
             */
            discriminator: "plan";
            /**
             * @description The name of the release template.
             * @example My release plan
             */
            name: string;
            /**
             * @description A description of the release template.
             * @example This is my release plan
             */
            description?: string | null;
            /**
             * @description The name of the feature that uses this release plan.
             * @example my-feature
             */
            featureName: string;
            /**
             * @description The environment that this release plan is for.
             * @example production
             */
            environment: string;
            /**
             * @description Release template: The ID of the user who created this template.
             * @example 53
             */
            createdByUserId: number;
            /**
             * Format: date-time
             * @description The date and time that the release template was created.
             * @example 2022-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description The ID of the currently active milestone in this release plan.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW1
             */
            activeMilestoneId?: string | null;
            /** @description A list of the milestones in this release template. */
            milestones: components["schemas"]["releasePlanMilestoneSchema"][];
            /**
             * @description The ID of the release plan template that this release plan is based on.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            releasePlanTemplateId: string;
        };
        /** @description Schema representing the creation of a release template. */
        releasePlanTemplateSchema: {
            /**
             * @description The release plan/template's ID. Release template IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            id: string;
            /**
             * @description A field to distinguish between release plans and release templates.
             * @example template
             * @enum {string}
             */
            discriminator: "template";
            /**
             * @description The name of the release template.
             * @example My release plan
             */
            name: string;
            /**
             * @description A description of the release template.
             * @example This is my release plan
             */
            description?: string | null;
            /**
             * @description Release template: The ID of the user who created this template.
             * @example 53
             */
            createdByUserId: number;
            /**
             * Format: date-time
             * @description The date and time that the release template was created.
             * @example 2022-01-01T00:00:00Z
             */
            createdAt: string;
            /** @description A list of the milestones in this release template. */
            milestones?: components["schemas"]["releasePlanMilestoneSchema"][];
            /**
             * Format: date-time
             * @description The date and time that the release template was archived.
             * @example 2022-01-01T00:00:00Z
             */
            archivedAt?: string | null;
        };
        /** @description Schema representing the creation of a release plan milestone. */
        releasePlanMilestoneSchema: {
            /**
             * @description The milestone's ID. Milestone IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW1
             */
            id: string;
            /**
             * @description The name of the milestone.
             * @example My milestone
             */
            name: string;
            /**
             * @description The order of the milestone in the release plan.
             * @example 1
             */
            sortOrder: number;
            /**
             * @description The ID of the release plan/template that this milestone belongs to.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            releasePlanDefinitionId: string;
            /** @description A list of strategies that are attached to this milestone. */
            strategies?: components["schemas"]["releasePlanMilestoneStrategySchema"][];
        };
        /** @description Schema representing the creation of a release plan milestone strategy. */
        releasePlanMilestoneStrategySchema: {
            /**
             * @description The milestone strategy's ID. Milestone strategy IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW3
             */
            id: string;
            /**
             * @description The ID of the milestone that this strategy belongs to.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW1
             */
            milestoneId: string;
            /**
             * @description The order of the strategy in the list
             * @example 9999
             */
            sortOrder: number;
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description The name of the strategy type
             * @example flexibleRollout
             */
            strategyName: string;
            /**
             * @description An object containing the parameters for the strategy
             * @example {
             *       "groupId": "some_new",
             *       "rollout": "25",
             *       "stickiness": "sessionId"
             *     }
             */
            parameters?: components["schemas"]["parametersSchema"];
            /**
             * @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints
             * @example [
             *       {
             *         "values": [
             *           "1",
             *           "2"
             *         ],
             *         "inverted": false,
             *         "operator": "IN",
             *         "contextName": "appName",
             *         "caseInsensitive": false
             *       }
             *     ]
             */
            constraints?: components["schemas"]["constraintSchema"][];
            /** @description Strategy level variants */
            variants?: components["schemas"]["createStrategyVariantSchema"][];
            /**
             * @description Ids of segments to use for this strategy
             * @example [
             *       1,
             *       2
             *     ]
             */
            segments?: number[];
        };
        /** @description Schema representing the creation of a release template. */
        createReleasePlanTemplateSchema: {
            /**
             * @description The name of the release template.
             * @example My release plan
             */
            name: string;
            /**
             * @description A description of the release template.
             * @example This is my release plan
             */
            description?: string | null;
            /** @description A list of the milestones in this release template. */
            milestones?: components["schemas"]["createReleasePlanMilestoneSchema"][];
        };
        /** @description Schema representing the creation of a release plan milestone. */
        createReleasePlanMilestoneSchema: {
            /**
             * @description The name of the milestone.
             * @example My milestone
             */
            name: string;
            /**
             * @description The order of the milestone in the release plan.
             * @example 1
             */
            sortOrder: number;
            /** @description A list of strategies that are attached to this milestone. */
            strategies?: components["schemas"]["createReleasePlanMilestoneStrategySchema"][];
        };
        /** @description Schema representing the creation of a release plan milestone strategy. */
        createReleasePlanMilestoneStrategySchema: {
            /**
             * @description The order of the strategy in the list
             * @example 9999
             */
            sortOrder: number;
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description The name of the strategy type
             * @example flexibleRollout
             */
            strategyName: string;
            /**
             * @description An object containing the parameters for the strategy
             * @example {
             *       "groupId": "some_new",
             *       "rollout": "25",
             *       "stickiness": "sessionId"
             *     }
             */
            parameters?: components["schemas"]["parametersSchema"];
            /**
             * @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints
             * @example [
             *       {
             *         "values": [
             *           "1",
             *           "2"
             *         ],
             *         "inverted": false,
             *         "operator": "IN",
             *         "contextName": "appName",
             *         "caseInsensitive": false
             *       }
             *     ]
             */
            constraints?: components["schemas"]["constraintSchema"][];
            /** @description Strategy level variants */
            variants?: components["schemas"]["createStrategyVariantSchema"][];
            /**
             * @description Ids of segments to use for this strategy
             * @example [
             *       1,
             *       2
             *     ]
             */
            segments?: number[];
        };
        /** @description Schema representing the update of a release template. */
        updateReleasePlanTemplateSchema: {
            /**
             * @description The release plan/template's ID. Release template IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            id: string;
            /**
             * @description The name of the release template.
             * @example My release plan
             */
            name: string;
            /**
             * @description A description of the release template.
             * @example This is my release plan
             */
            description?: string | null;
            /** @description A list of the milestones in this release template. */
            milestones?: components["schemas"]["createReleasePlanMilestoneSchema"][] | null;
        };
        /** @description Schema representing the update of a release plan milestone. */
        updateReleasePlanMilestoneSchema: {
            /**
             * @description The name of the milestone.
             * @example My milestone
             */
            name: string;
            /**
             * @description The order of the milestone in the release plan.
             * @example 1
             */
            sortOrder: number;
            /**
             * @description The ID of the release plan/template that this milestone belongs to.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            releasePlanDefinitionId: string;
            /** @description A list of strategies that are attached to this milestone. */
            strategies?: components["schemas"]["updateReleasePlanMilestoneStrategySchema"][];
        };
        /** @description Schema representing the update of a release plan milestone. */
        updateReleasePlanMilestoneStrategySchema: {
            /**
             * @description The milestone strategy's ID. Milestone strategy IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW3
             */
            id?: string;
            /**
             * @description The ID of the milestone that this strategy belongs to.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW1
             */
            milestoneId: string;
            /**
             * @description The order of the strategy in the list
             * @example 9999
             */
            sortOrder: number;
            /**
             * @description A descriptive title for the strategy
             * @example Gradual Rollout 25-Prod
             */
            title?: string | null;
            /**
             * @description The name of the strategy type
             * @example flexibleRollout
             */
            strategyName: string;
            /**
             * @description An object containing the parameters for the strategy
             * @example {
             *       "groupId": "some_new",
             *       "rollout": "25",
             *       "stickiness": "sessionId"
             *     }
             */
            parameters?: components["schemas"]["parametersSchema"];
            /**
             * @description A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/activation-strategies#constraints
             * @example [
             *       {
             *         "values": [
             *           "1",
             *           "2"
             *         ],
             *         "inverted": false,
             *         "operator": "IN",
             *         "contextName": "appName",
             *         "caseInsensitive": false
             *       }
             *     ]
             */
            constraints?: components["schemas"]["constraintSchema"][];
            /** @description Strategy level variants */
            variants?: components["schemas"]["createStrategyVariantSchema"][];
            /**
             * @description Ids of segments to use for this strategy
             * @example [
             *       1,
             *       2
             *     ]
             */
            segments?: number[];
        };
        /** @description Schema for creating a release plan for a feature flag environment by copying and applying the configuration from a release plan template. */
        releasePlanTemplateIdSchema: {
            /**
             * @description The release plan template's ID. Release template IDs are ulids.
             * @example 01JB9GGTGQYEQ9D40R17T3YVW2
             */
            templateId: string;
        };
        /** @description Represents traffic data for a single endpoint in Edge */
        edgeEndpointTrafficSchema: {
            /** @description Number of 20x requests */
            requests200?: number;
            /** @description Number of 30x requests */
            requests304?: number;
        };
        /** @description Represents Edge instance observability data. */
        edgeInstanceDataSchema: {
            /**
             * @description The ID of the Edge process, typically a ULID. Newly generated for each restart of the instance.
             * @example 01ARZ3NDEKTSV4RRFFQ69G5FAV
             */
            identifier: string;
            /**
             * @description The name of the application, configured by the user, typically persistent across restarts of Edge.
             * @example unleash-edge-us-east-1
             */
            appName: string;
            /**
             * @description Which region the Edge instance is running in. Set to AWS_REGION by default (if present).
             * @example us-east-1
             */
            region?: string | null;
            /**
             * @description Which version (semver) of Edge is the Edge instance running.
             * @example 19.6.3
             */
            edgeVersion: string;
            processMetrics?: components["schemas"]["edgeProcessMetricsSchema"];
            /**
             * Format: date-time
             * @description RFC3339 timestamp for when the Edge instance was started.
             */
            started: string;
            traffic: components["schemas"]["edgeInstanceTrafficSchema"];
            latencyUpstream: components["schemas"]["edgeUpstreamLatencySchema"];
            /** @description How many streaming clients are connected to the Edge instance. */
            connectedStreamingClients: number;
            /** @description A list of Edge instances connected to the Edge instance. */
            connectedEdges: components["schemas"]["edgeInstanceDataSchema"][];
            /** @description Requests made to edge's endpoints since last report. Meant to be used for billing purposes. */
            requestsSinceLastReport?: components["schemas"]["edgeRequestStatsSchema"];
            /** @description Connection consumption data since last report, including features and metrics consumption. Used for long-lived backend SDKs with backend controlled number of instances. */
            connectionConsumptionSinceLastReport?: components["schemas"]["connectionConsumptionSchema"];
            /** @description Request consumption data since last report, grouped by metered group. User for frontend SDKs with unpredictable and potentially large number of user devices running those SDKs. */
            requestConsumptionSinceLastReport?: components["schemas"]["requestConsumptionSchema"];
        };
        /** @description Represents requests to the Edge instance (/api/client/features, /api/frontend, etc.) */
        edgeInstanceTrafficSchema: {
            /** @description A map containing GET requests. */
            get: {
                [key: string]: components["schemas"]["edgeLatencyMetricsSchema"];
            };
            /** @description A map containing POST requests. */
            post: {
                [key: string]: components["schemas"]["edgeLatencyMetricsSchema"];
            };
            /** @description A map containing requests that were denied. */
            accessDenied: {
                [key: string]: components["schemas"]["edgeLatencyMetricsSchema"];
            };
            /** @description A map containing requests that had cached responses. */
            cachedResponses: {
                [key: string]: components["schemas"]["edgeLatencyMetricsSchema"];
            };
        };
        /** @description Representing latency for an Edge operation. */
        edgeLatencyMetricsSchema: {
            /** @description Average time per request in milliseconds. */
            avg: number;
            /** @description Total number of requests made. */
            count: number;
            /**
             * @description 99% of requests finished within this amount of milliseconds.
             * @example 34.5
             */
            p99: number;
        };
        /** @description Represents Edge instance resource usage data. */
        edgeProcessMetricsSchema: {
            /**
             * @description CPU usage, in seconds, since start of process.
             * @example 54.54
             */
            cpuUsage: number;
            /**
             * @description Current process_resident_memory (in bytes) usage.
             * @example 34000432
             */
            memoryUsage: number;
        };
        /** @description Represents Edge traffic data. */
        edgeRequestStatsSchema: {
            /** @description 20x and 30x requests to the client features endpoint */
            "/api/client/features"?: components["schemas"]["edgeEndpointTrafficSchema"];
            /** @description Traffic to the frontend endpoint */
            "/api/frontend"?: components["schemas"]["edgeEndpointTrafficSchema"];
            /** @description Traffic to the proxy endpoint (proxy endpoint is deprecated, use /api/frontend instead) */
            "/api/proxy"?: components["schemas"]["edgeEndpointTrafficSchema"];
            /** @description Traffic to Edge Metrics (from SDKs) */
            "/api/client/metrics"?: components["schemas"]["edgeEndpointTrafficSchema"];
            /** @description Traffic to Edge Metrics (from other Edge instances) */
            "/api/client/metrics/bulk"?: components["schemas"]["edgeEndpointTrafficSchema"];
            /** @description Traffic to Edge Metrics (from other Edge instances) */
            "/api/client/metrics/edge"?: components["schemas"]["edgeEndpointTrafficSchema"];
        };
        /** @description Latencies for upstream actions from Edge (downloading/syncing new features, uploading metrics, uploading instance data) */
        edgeUpstreamLatencySchema: {
            features: components["schemas"]["edgeLatencyMetricsSchema"];
            metrics: components["schemas"]["edgeLatencyMetricsSchema"];
            edge: components["schemas"]["edgeLatencyMetricsSchema"];
        };
        connectionConsumptionSchema: {
            /** @description Feature consumption data points */
            features: components["schemas"]["meteredGroupConsumptionSchema"][];
            /** @description Metrics consumption data points */
            metrics: components["schemas"]["meteredGroupConsumptionSchema"][];
        };
        consumptionDataPointSchema: {
            /**
             * @description Time interval in milliseconds [start, end].
             * @example [
             *       0,
             *       15000
             *     ]
             */
            interval: number[];
            /** @description Number of requests in this interval */
            requests: number;
        };
        meteredGroupConsumptionSchema: {
            /**
             * @description Name of the metered group
             * @example default
             */
            meteredGroup: string;
            /** @description Array of consumption data points */
            dataPoints: components["schemas"]["consumptionDataPointSchema"][];
        };
        requestConsumptionSchema: {
            /**
             * @description Name of the metered group
             * @example default
             */
            meteredGroup: string;
            /**
             * @description Total number of requests for this metered group
             * @example 10000
             */
            requests: number;
        }[];
        /** @description The data required to create an CDN API token. */
        cdnApiTokenSchema: {
            /**
             * @description The name of the token.
             * @example token-64522
             */
            tokenName: string;
            /**
             * @description The project that the token should be valid for. Defaults to "*" meaning every project.
             * @example project-851
             */
            project?: string;
            /**
             * @description The environment that the token should be valid for.
             * @example development
             */
            environment: string;
            /**
             * Format: date-time
             * @description The time when this token should expire.
             * @example 2023-07-04T11:26:24+02:00
             */
            expiresAt?: string | null;
        };
        /** @description List of CDN tokens. */
        cdnApiTokensSchema: {
            /** @description List of tokens for CDN */
            tokens?: components["schemas"]["cdnApiTokenSchema"][];
        };
        /** @description Information about a user available to review a change request */
        changeRequestReviewerSchema: {
            /**
             * @description Id of the user available to review
             * @example 23
             */
            id: number;
            /**
             * @description The email of the approving user
             * @example email@example.com
             */
            email: string;
            /**
             * @description The username of the approving user
             * @example unleash-user
             */
            username?: string | null;
            /**
             * @description The name of the approving user
             * @example Reviewer Approver
             */
            name?: string | null;
            /**
             * Format: uri
             * @description The URL where the user's image can be found.
             */
            imageUrl?: string | null;
        };
        /** @description A list of users available to review a change request. */
        changeRequestAvailableReviewersSchema: {
            /** @description a list of reviewers */
            reviewers: components["schemas"]["changeRequestReviewerSchema"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getProjects: {
        parameters: {
            query?: {
                archived?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createProjectSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createProjectSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectCreatedSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description validateProjectSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["validateProjectSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description updateProjectSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateProjectSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateProjectEnterpriseSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description updateProjectEnterpriseSettingsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateProjectEnterpriseSettingsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    archiveProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    reviveProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectAccessSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectAccessSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    setProjectAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description projectAccessConfigurationSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["projectAccessConfigurationSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addAccessToProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description projectAddAccessSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["projectAddAccessSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getRoleProjectAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectRoleUsageSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectRoleUsageSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    setRolesForUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeUserAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    setRolesForGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeGroupAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    changeProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description changeProjectSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["changeProjectSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description adminPermissionsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["adminPermissionsSchema"];
                };
            };
        };
    };
    getRequestsPerSecond: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description requestsPerSecondSegmentedSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["requestsPerSecondSegmentedSchema"];
                };
            };
        };
    };
    getTrafficDataUsageForPeriod: {
        parameters: {
            query: {
                /** @description Whether to aggregate the data by month or by day */
                grouping: "daily" | "monthly";
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                from: string;
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description trafficUsageDataSegmentedCombinedSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["trafficUsageDataSegmentedCombinedSchema"];
                };
            };
        };
    };
    getConnectionsForPeriod: {
        parameters: {
            query: {
                /** @description Whether to aggregate the data by month or by day */
                grouping: "daily" | "monthly";
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                from: string;
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description meteredConnectionsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["meteredConnectionsSchema"];
                };
            };
        };
    };
    getRequestsForPeriod: {
        parameters: {
            query: {
                /** @description Whether to aggregate the data by month or by day */
                grouping: "daily" | "monthly";
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                from: string;
                /** @description The starting date of the traffic data usage search in IS:yyyy-MM-dd format */
                to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description meteredRequestsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["meteredRequestsSchema"];
                };
            };
        };
    };
    getNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description notificationsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["notificationsSchema"];
                };
            };
        };
    };
    markNotificationsAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description markNotificationsAsReadSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["markNotificationsAsReadSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLifecycleTrends: {
        parameters: {
            query?: {
                /** @description Comma-separated list of project IDs to filter lifecycle trends */
                projects?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description lifecycleTrendsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["lifecycleTrendsSchema"];
                };
            };
        };
    };
    getInstanceInsights: {
        parameters: {
            query?: {
                /** @description The beginning of the date range in yyyy-MM-dd format */
                from?: string;
                /** @description The end of the date range in yyyy-MM-dd format */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description instanceInsightsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["instanceInsightsSchema"];
                };
            };
        };
    };
    subscribeEmailSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    unsubscribeEmailSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllLicensedUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description licensedUsersSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["licensedUsersSchema"];
                };
            };
        };
    };
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description healthCheckSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["healthCheckSchema"];
                };
            };
            /** @description healthCheckSchema */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["healthCheckSchema"];
                };
            };
        };
    };
    validatePublicSignupToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addPublicSignupTokenUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        /** @description createInvitedUserSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createInvitedUserSchema"];
            };
        };
        responses: {
            /** @description userSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description loginSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["loginSchema"];
            };
        };
        responses: {
            /** @description userSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tokenUserSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tokenUserSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description changePasswordSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["changePasswordSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description validatePasswordSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["validatePasswordSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    sendResetPasswordEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description emailSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["emailSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateFeature: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description validateFeatureSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["validateFeatureSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    listTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        /** @description updateTagsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateTagsSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            200: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagsSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        /** @description tagSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tagSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
                type: string;
                value: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllFeatureTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureTypesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureTypesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateFeatureTypeLifetime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description updateFeatureTypeLifetimeSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFeatureTypeLifetimeSchema"];
            };
        };
        responses: {
            /** @description featureTypeSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureTypeSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    reviveFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllStrategies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description strategiesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["strategiesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createStrategySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createStrategySchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["strategySchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description strategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["strategySchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        /** @description updateStrategySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateStrategySchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deprecateStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategyName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    reactivateStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategyName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getEvents: {
        parameters: {
            query?: {
                /** @description The name of the project whose events you want to retrieve */
                project?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description eventsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["eventsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getEventsForToggle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureEventsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureEventsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getEventCreators: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description eventCreatorsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["eventCreatorsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPlayground: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description playgroundRequestSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["playgroundRequestSchema"];
            };
        };
        responses: {
            /** @description playgroundResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["playgroundResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAdvancedPlayground: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description advancedPlaygroundRequestSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["advancedPlaygroundRequestSchema"];
            };
        };
        responses: {
            /** @description advancedPlaygroundResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["advancedPlaygroundResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getUnknownFlags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description unknownFlagsResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["unknownFlagsResponseSchema"];
                };
            };
        };
    };
    getApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description applicationSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["applicationSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appName: string;
            };
            cookie?: never;
        };
        /** @description createApplicationSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createApplicationSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getApplications: {
        parameters: {
            query?: {
                /** @description The search query for the application name */
                query?: string;
                /** @description The number of applications to skip when returning a page. By default it is set to 0. */
                offset?: string;
                /** @description The number of applications to return in a page. By default it is set to 1000. */
                limit?: string;
                /** @description The field to sort the results by. By default it is set to "appName". */
                sortBy?: string;
                /** @description The sort order for the sortBy. By default it is det to "asc". */
                sortOrder?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description applicationsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["applicationsSchema"];
                };
            };
        };
    };
    getApplicationOverview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description applicationOverviewSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["applicationOverviewSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getApplicationEnvironmentInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description applicationEnvironmentInstancesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["applicationEnvironmentInstancesSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getOutdatedSdks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description outdatedSdksSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["outdatedSdksSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getRawFeatureMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureMetricsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureMetricsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureUsageSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureUsageSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureUsageSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getCustomMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPrometheusMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prometheus formatted metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description meSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["meSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description profileSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["profileSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    changeMyPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description passwordSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["passwordSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Old and new password do not match */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Old password is incorrect or user is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserRoles: {
        parameters: {
            query?: {
                /** @description The id of the project you want to check permissions for */
                projectId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description rolesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rolesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description #/components/schemas/patsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["patsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createPat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description #/components/schemas/createPatSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createPatSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["patSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deletePat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a personal access token id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getUiConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description uiConfigSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["uiConfigSchema"];
                };
            };
        };
    };
    setCors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description setCorsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["setCorsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContextFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description contextFieldsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contextFieldsSchema"];
                };
            };
        };
    };
    createContextField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createContextFieldSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createContextFieldSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contextFieldSchema"];
                };
            };
        };
    };
    getContextField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description contextFieldSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contextFieldSchema"];
                };
            };
        };
    };
    updateContextField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
            };
            cookie?: never;
        };
        /** @description updateContextFieldSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateContextFieldSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContextField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStrategiesByContextField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description contextFieldStrategiesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contextFieldStrategiesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateContextFieldLegalValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
            };
            cookie?: never;
        };
        /** @description legalValueSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["legalValueSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContextFieldLegalValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contextField: string;
                legalValue: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description nameSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["nameSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description exportQuerySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["exportQuerySchema"];
            };
        };
        responses: {
            /** @description exportResultSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["exportResultSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description importTogglesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["importTogglesSchema"];
            };
        };
        responses: {
            /** @description importTogglesValidateSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["importTogglesValidateSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    importToggles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description importTogglesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["importTogglesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createTagSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createTagSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagWithVersionSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getTagsByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
                value: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagWithVersionSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagWithVersionSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
                value: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTagTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagTypesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagTypesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createTagType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tagTypeSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tagTypeSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagTypeSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateTagType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tagTypeSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tagTypeSchema"];
            };
        };
        responses: {
            /** @description validateTagTypeSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validateTagTypeSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getTagType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tagTypeSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tagTypeSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTagType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        /** @description updateTagTypeSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateTagTypeSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteTagType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAddons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description addonsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["addonsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createAddon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description addonCreateUpdateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["addonCreateUpdateSchema"];
            };
        };
        responses: {
            /** @description addonSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["addonSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAddon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description addonSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["addonSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateAddon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description addonCreateUpdateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["addonCreateUpdateSchema"];
            };
        };
        responses: {
            /** @description addonSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["addonSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteAddon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getIntegrationEvents: {
        parameters: {
            query?: {
                /** @description The number of results to return in a page. By default it is set to 50. */
                limit?: string;
                /** @description The number of results to skip when returning a page. By default it is set to 0. */
                offset?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description #/components/schemas/integrationEventsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integrationEventsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllApiTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description apiTokensSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apiTokensSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createApiTokenSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createApiTokenSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apiTokenSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getApiTokensByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description apiTokensSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apiTokensSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        /** @description updateApiTokenSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateApiTokenSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getInactiveUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description inactiveUsersSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inactiveUsersSchema"];
                };
            };
        };
    };
    deleteInactiveUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description idsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["idsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateUserPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description passwordSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["passwordSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    changeUserPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a user id */
                id: number;
            };
            cookie?: never;
        };
        /** @description passwordSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["passwordSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    resetUserPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description idSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["idSchema"];
            };
        };
        responses: {
            /** @description resetPasswordSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resetPasswordSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description usersSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["usersSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description createUserSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createUserSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["createUserResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    searchUsers: {
        parameters: {
            query?: {
                /** @description The pattern to search in the username or email */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description usersSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["usersSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getBaseUsersAndGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description usersGroupsBaseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["usersGroupsBaseSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getUserPermissions: {
        parameters: {
            query?: {
                project?: string;
                environment?: string;
            };
            header?: never;
            path: {
                /** @description a user id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description #/components/schemas/userAccessOverviewSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userAccessOverviewSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAdminCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description adminCountSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["adminCountSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a user id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description userSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a user id */
                id: number;
            };
            cookie?: never;
        };
        /** @description updateUserSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateUserSchema"];
            };
        };
        responses: {
            /** @description createUserResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["createUserResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a user id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteScimUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description feedbackCreateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["feedbackCreateSchema"];
            };
        };
        responses: {
            /** @description feedbackResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["feedbackResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description feedbackUpdateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["feedbackUpdateSchema"];
            };
        };
        responses: {
            /** @description feedbackResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["feedbackResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectOverview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectOverviewSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectOverviewSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectDora: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectDoraMetricsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectDoraMetricsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectApplications: {
        parameters: {
            query?: {
                /** @description The search query for the application name, sdk, environment */
                query?: string;
                /** @description The number of applications to skip when returning a page. By default it is set to 0. */
                offset?: string;
                /** @description The number of applications to return in a page. By default it is set to 50. */
                limit?: string;
                /** @description The field to sort the results by. By default it is set to "appName". */
                sortBy?: string;
                /** @description The sort order for the sortBy. By default it is det to "asc". */
                sortOrder?: string;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectApplicationsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectApplicationsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectFlagCreators: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectFlagCreatorsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectFlagCreatorsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getOutdatedProjectSdks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description outdatedSdksSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["outdatedSdksSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureEnvironmentSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureEnvironmentSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    toggleFeatureEnvironmentOff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    toggleFeatureEnvironmentOn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    bulkToggleFeaturesEnvironmentOn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description bulkToggleFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["bulkToggleFeaturesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    bulkToggleFeaturesEnvironmentOff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description bulkToggleFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["bulkToggleFeaturesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureStrategies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureStrategySchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addFeatureStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description createFeatureStrategySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createFeatureStrategySchema"];
            };
        };
        responses: {
            /** @description featureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureStrategySchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
                strategyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureStrategySchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateFeatureStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
                strategyId: string;
            };
            cookie?: never;
        };
        /** @description updateFeatureStrategySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFeatureStrategySchema"];
            };
        };
        responses: {
            /** @description featureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureStrategySchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeatureStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
                strategyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    patchFeatureStrategy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
                strategyId: string;
            };
            cookie?: never;
        };
        /** @description patchesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["patchesSchema"];
            };
        };
        responses: {
            /** @description featureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureStrategySchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    setStrategySortOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description setStrategySortOrderSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["setStrategySortOrderSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectFeaturesSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description createFeatureSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createFeatureSchema"];
            };
        };
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    cloneFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description cloneFeatureSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["cloneFeatureSchema"];
            };
        };
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description updateFeatureSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFeatureSchema"];
            };
        };
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    archiveFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    patchFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description patchesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["patchesSchema"];
            };
        };
        responses: {
            /** @description featureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    staleFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description batchStaleSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["batchStaleSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addTagToFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description tagsBulkAddSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tagsBulkAddSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addFeatureDependency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                child: string;
            };
            cookie?: never;
        };
        /** @description createDependentFeatureSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createDependentFeatureSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeatureDependencies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                child: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeatureDependency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                child: string;
                parent: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    listParentOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                child: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description parentFeatureOptionsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["parentFeatureOptionsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    listParentVariantOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                parent: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description parentVariantOptionsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["parentVariantOptionsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    checkDependenciesExist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description dependenciesExistSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dependenciesExistSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addEnvironmentToProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description projectEnvironmentSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["projectEnvironmentSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeEnvironmentFromProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addDefaultStrategyToProjectEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description createFeatureStrategySchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createFeatureStrategySchema"];
            };
        };
        responses: {
            /** @description createFeatureStrategySchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["createFeatureStrategySchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectHealthReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description healthReportSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["healthReportSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getEnvironmentFeatureVariants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureVariantsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureVariantsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    overwriteEnvironmentFeatureVariants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description variantsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["variantsSchema"];
            };
        };
        responses: {
            /** @description featureVariantsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureVariantsSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    patchEnvironmentsFeatureVariants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                environment: string;
            };
            cookie?: never;
        };
        /** @description patchesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["patchesSchema"];
            };
        };
        responses: {
            /** @description featureVariantsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureVariantsSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    overwriteFeatureVariantsOnEnvironments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description pushVariantsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["pushVariantsSchema"];
            };
        };
        responses: {
            /** @description featureVariantsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureVariantsSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectApiTokens: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description apiTokensSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apiTokensSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createProjectApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description createProjectApiTokenSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["createProjectApiTokenSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apiTokenSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteProjectApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description batchFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["batchFeaturesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    reviveFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description batchFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["batchFeaturesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateArchiveFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description batchFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["batchFeaturesSchema"];
            };
        };
        responses: {
            /** @description validateArchiveFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validateArchiveFeaturesSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    archiveFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        /** @description batchFeaturesSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["batchFeaturesSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectInsights: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectInsightsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectInsightsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description projectStatusSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["projectStatusSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureLifecycle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureLifecycleSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureLifecycleSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    complete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description featureLifecycleCompletedSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["featureLifecycleCompletedSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    uncomplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    createFeatureLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        /** @description featureLinkSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["featureLinkSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateFeatureLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                linkId: string;
            };
            cookie?: never;
        };
        /** @description featureLinkSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["featureLinkSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteFeatureLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
                linkId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFeatureLifecycleStageCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description featureLifecycleCountSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["featureLifecycleCountSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPersonalDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description personalDashboardSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["personalDashboardSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPersonalDashboardProjectDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description personalDashboardProjectDetailsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["personalDashboardProjectDetailsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllEnvironments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description environmentsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["environmentsSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description environmentSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["environmentSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getProjectEnvironments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description environmentsProjectSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["environmentsProjectSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateSortOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description sortOrderSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["sortOrderSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    toggleEnvironmentOn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    toggleEnvironmentOff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateSplashSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description splashResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["splashResponseSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateConstraint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description constraintSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["constraintSchema"];
            };
        };
        responses: {
            /** @description The constraint is valid */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getAllPublicSignupTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description publicSignupTokensSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["publicSignupTokensSchema"];
                };
            };
        };
    };
    createPublicSignupToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description publicSignupTokenCreateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["publicSignupTokenCreateSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["publicSignupTokenSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getPublicSignupToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description publicSignupTokenSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["publicSignupTokenSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updatePublicSignupToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        /** @description publicSignupTokenUpdateSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["publicSignupTokenUpdateSchema"];
            };
        };
        responses: {
            /** @description publicSignupTokenSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["publicSignupTokenSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getInstanceAdminStatsCsv: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description instanceAdminStatsSchemaCsv */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
        };
    };
    getInstanceAdminStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description instanceAdminStatsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["instanceAdminStatsSchema"];
                };
            };
        };
    };
    addFavoriteFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeFavoriteFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    addFavoriteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeFavoriteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    validateSegment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description nameSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["nameSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getSegmentsByStrategyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description segmentsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["segmentsSchema"];
                };
            };
        };
    };
    updateFeatureStrategySegments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description updateFeatureStrategySegmentsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFeatureStrategySegmentsSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["updateFeatureStrategySegmentsSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getStrategiesBySegmentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a segment id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description segmentStrategiesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["segmentStrategiesSchema"];
                };
            };
        };
    };
    getSegment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a segment id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description adminSegmentSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["adminSegmentSchema"];
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    updateSegment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a segment id */
                id: number;
            };
            cookie?: never;
        };
        /** @description upsertSegmentSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["upsertSegmentSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    removeSegment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description a segment id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getSegments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description segmentsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["segmentsSchema"];
                };
            };
        };
    };
    createSegment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description upsertSegmentSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["upsertSegmentSchema"];
            };
        };
        responses: {
            /** @description The resource was successfully created. */
            201: {
                headers: {
                    /** @description The location of the newly created resource. */
                    location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["adminSegmentSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NameExistsError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example There is already a feature called "my-awesome-feature".
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getMaintenance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description maintenanceSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["maintenanceSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    toggleMaintenance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description toggleMaintenanceSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["toggleMaintenanceSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getTelemetrySettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description telemetrySettingsSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["telemetrySettingsSchema"];
                };
            };
        };
    };
    searchFeatures: {
        parameters: {
            query?: {
                /** @description The search query for the feature name or tag */
                query?: string;
                /** @description Id of the project where search and filter is performed. The project id can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF. */
                project?: string;
                /** @description The state of the feature active/stale. The state can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF. */
                state?: string;
                /** @description The lifecycle stage of the feature. The stagee can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF. */
                lifecycle?: string;
                /** @description The feature flag type to filter by. The type can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF. */
                type?: string;
                /** @description The feature flag creator to filter by. The creators can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF. */
                createdBy?: string;
                /** @description The list of feature tags to filter by. Feature tag has to specify a type and a value joined with a colon. */
                tag?: string;
                /** @description The list of segments with operators to filter by. The segment valid operators are INCLUDE, DO_NOT_INCLUDE, INCLUDE_ALL_OF, INCLUDE_ANY_OF, EXCLUDE_IF_ANY_OF, EXCLUDE_ALL. */
                segment?: string;
                /** @description The list of feature environment status to filter by. Feature environment has to specify a name and a status joined with a colon. */
                status?: string[];
                /** @description The number of features to skip when returning a page. By default it is set to 0. */
                offset?: string;
                /** @description The number of feature environments to return in a page. By default it is set to 50. */
                limit?: string;
                /** @description The field to sort the results by. By default it is set to "createdAt". */
                sortBy?: string;
                /** @description The sort order for the sortBy. By default it is det to "asc". */
                sortOrder?: "asc" | "desc";
                /** @description The flag to indicate if the favorite features should be returned first. By default it is set to false. */
                favoritesFirst?: string;
                /** @description Whether to get results for archived feature flags or active feature flags. If `true`, Unleash will return only archived flags. If `false`, it will return only active flags. */
                archived?: string;
                /** @description The date the feature was created. The date can be specified with an operator. The supported operators are IS_BEFORE, IS_ON_OR_AFTER. */
                createdAt?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description searchFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["searchFeaturesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    searchEvents: {
        parameters: {
            query?: {
                /** @description Find events by a free-text search query. The query will be matched against the event data payload (if any). */
                query?: string;
                /** @description Filter by event ID using supported operators: IS, IS_ANY_OF. */
                id?: string;
                /** @description Filter by group ID using supported operators: IS, IS_ANY_OF. */
                groupId?: string;
                /** @description Filter by feature name using supported operators: IS, IS_ANY_OF */
                feature?: string;
                /** @description Filter by projects ID using supported operators: IS, IS_ANY_OF. */
                project?: string;
                /** @description Filter by event type using supported operators: IS, IS_ANY_OF. */
                type?: string;
                /** @description Filter by the ID of the event creator, using supported operators: IS, IS_ANY_OF. */
                createdBy?: string;
                /** @description The starting date of the creation date range in IS:yyyy-MM-dd format */
                from?: string;
                /** @description The ending date of the creation date range in IS:yyyy-MM-dd format */
                to?: string;
                /** @description The number of features to skip when returning a page. By default it is set to 0. */
                offset?: string;
                /** @description The number of feature environments to return in a page. By default it is set to 50. The maximum is 1000. */
                limit?: string;
                /** @description Filter by environment name using supported operators: IS, IS_ANY_OF. */
                environment?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description eventSearchResponseSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["eventSearchResponseSchema"];
                };
            };
        };
    };
    uiObservability: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description recordUiErrorSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["recordUiErrorSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NoAccessError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You need the "UPDATE_ADDON" permission to perform this action in the "development" environment.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getClientFeature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                featureName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description clientFeatureSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clientFeatureSchema"];
                };
            };
        };
    };
    getAllClientFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description clientFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clientFeaturesSchema"];
                };
            };
        };
    };
    registerClientMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description clientMetricsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["clientMetricsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    clientBulkMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description bulkMetricsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["bulkMetricsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    clientCustomMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description customMetricsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["customMetricsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    registerClientApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description clientApplicationSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["clientApplicationSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFrontendFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description frontendApiFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["frontendApiFeaturesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getFrontendApiFeaturesWithPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description frontendApiFeaturesPostSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["frontendApiFeaturesPostSchema"];
            };
        };
        responses: {
            /** @description frontendApiFeaturesSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["frontendApiFeaturesSchema"];
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    registerFrontendMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description clientMetricsSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["clientMetricsSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This response has no body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    registerFrontendClient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description frontendApiClientSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["frontendApiClientSchema"];
            };
        };
        responses: {
            /** @description This response has no body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example AuthenticationRequired
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The requested resource was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example NotFoundError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example Could not find the addon with ID "12345".
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    getValidTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tokenStringListSchema */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tokenStringListSchema"];
            };
        };
        responses: {
            /** @description validatedEdgeTokensSchema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validatedEdgeTokensSchema"];
                };
            };
            /** @description The request data does not match what we expect. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ValidationError
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].
                         */
                        message?: string;
                    };
                };
            };
            /** @description The request body is larger than what we accept. By default we only accept bodies of 100kB or less */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTooLarge
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example You provided more data than we can handle. Unleash accepts at most X MB.
                         */
                        message?: string;
                    };
                };
            };
            /** @description The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the "content-type" header. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the error instance
                         * @example 9c40958a-daac-400e-98fb-3bb438567008
                         */
                        id?: string;
                        /**
                         * @description The name of the error kind
                         * @example ContentTypeerror
                         */
                        name?: string;
                        /**
                         * @description A description of what went wrong.
                         * @example We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
}
